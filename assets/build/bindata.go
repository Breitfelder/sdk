// Code generated by go-bindata.
// sources:
// etc/build/Makefile
// etc/build/etc/Dockerfile.build.alpine
// etc/build/etc/Dockerfile.build.debian
// etc/build/etc/run.sh
// etc/build/make/bootstrap.mk
// etc/build/make/functions.mk
// etc/build/make/rules.mk
// DO NOT EDIT!

package build

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xbd\x6e\xdb\x40\x10\x84\xfb\x7b\x8a\x01\xac\x42\x04\x4c\x09\x30\x52\x05\xb0\x01\x03\x0e\x5c\x38\x49\xe3\xa4\x0e\x97\xbc\x3d\xeb\xc2\xfb\xcb\xdd\x52\xb1\xdf\x3e\x20\x15\x8a\x4c\x0a\xab\xdc\x9b\xe1\xb7\xb3\xc3\x2b\x7c\x3b\xd8\x02\x5b\x20\x07\x06\x07\xc9\x6f\x29\xda\x20\x88\x66\x7a\x69\x5b\x67\xca\x01\x9e\x7a\xc6\xf3\xc3\xd3\xf5\xf4\xf8\xfc\xf0\x84\x72\x88\x83\xd3\x68\x19\x45\x62\x66\x0d\x12\x75\x85\xa6\xe8\xde\xc5\x8e\xc4\xc6\xd0\x5c\xe3\x85\x03\x67\x12\xd6\xe0\x57\xee\x06\xb1\xe1\x05\xcd\x09\x59\x17\xdd\x23\x65\x4e\x94\xb9\x6e\x07\xeb\x74\xb3\xc3\x17\x0a\x6f\xd0\xd6\x18\xce\x1c\x46\xde\x91\x72\x01\x15\x34\x9f\xef\xbf\x3e\x7e\xbf\x7f\xfc\xd4\x80\x32\x23\xf3\xaf\xc1\x66\xd6\x63\x1c\x5b\x46\x97\xa5\xd6\x71\x99\x44\x7e\x95\x4c\xdd\xb4\xcb\xe4\xe8\xc7\xc4\x63\x32\x4f\xc1\x1a\x2e\xb2\x93\xe8\x5d\x03\x92\xe9\x94\x1c\xa3\x80\x82\x9e\x86\x94\xe3\x4f\xee\x04\x92\x29\x14\x47\x13\xc2\x0a\x24\x82\x4e\x0d\xd8\xd0\xb9\x41\x8f\x38\x92\x85\xd8\x60\x28\xff\x5f\xb6\x68\x12\xa3\xdb\x29\x35\xb7\x82\x5b\x6c\xb6\xe5\xc0\xce\x21\xfd\xd6\x95\x5a\x15\x36\x49\xf3\x50\xed\x77\x45\xf7\x6a\xe6\x9c\x3e\x5b\xbc\xd5\x7e\x0c\xb4\x3f\x1f\xe5\x7b\x25\x3e\xfd\xbb\x64\xed\x16\x9f\xd4\x29\xde\x0f\x17\x49\xb3\xc6\x2d\x3e\xdc\xa8\x39\x8a\xef\xb5\xcd\xa8\x13\x36\xdb\x15\xa6\xaa\x94\x5a\xdd\xf4\x71\x89\xde\x45\xef\xc7\xd6\xea\x23\x56\x86\x9b\x3b\xec\x35\x1f\xf7\x61\x70\xae\x52\xd6\x68\x36\x2b\x59\x01\x38\x03\x36\xdb\x45\xa8\xce\x6d\xa1\xae\x53\xb6\x41\x6a\x0e\x47\xdc\x61\xb3\x9d\x85\xaa\x52\x1c\xb4\x35\x4a\xfd\xfd\x05\x17\xdb\x78\xcf\x67\x86\xd0\x8d\x63\xb9\x64\x6c\x63\x94\x22\x99\xd2\x25\x63\x1e\x1c\x4f\xb4\x3f\x01\x00\x00\xff\xff\x36\xc8\x9a\x9a\x50\x03\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 848, mode: os.FileMode(420), modTime: time.Unix(1488391979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcDockerfileBuildAlpine = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x4f\xdb\x30\x14\x7d\x26\xbf\xe2\x2a\x8b\xd0\x36\xc9\x31\x14\xd6\x50\xa4\x3d\x04\x9a\x75\xd5\x20\x41\x21\xe5\x69\x52\xe4\xd8\xce\x87\xea\xc4\x99\xed\x40\x07\xe2\xbf\x4f\x49\x4a\x4b\x25\xb4\x27\xe7\xde\x73\xee\xb9\xf6\x39\xf9\x11\x47\xb7\xe0\xbc\xcc\xa3\xeb\x5f\x41\x9c\x5e\xad\x96\x37\xf3\x34\xf4\x93\xe5\x43\x90\x2e\x6f\xfd\x45\xf0\x6a\x59\x41\xf8\x00\x8b\xe8\xc6\x0f\x17\xe9\x7d\x7c\x9d\xae\xe2\x1b\x28\x8d\x69\xf5\x25\xc6\x85\x14\xa4\x29\x5c\xa9\x0a\xcc\x04\x2e\xa4\xf3\x12\xaf\xc2\x64\x79\x1b\xa4\x8b\x28\x7d\x08\xe2\xfb\x65\x14\xbe\xba\x5a\x51\xd7\x10\xe5\x16\xcf\x96\xf5\x09\x72\x25\xeb\xbd\x40\x65\xca\x2e\x73\xa9\xac\x31\x93\x74\xcd\x15\x12\x55\xa6\x88\xfa\xbb\x95\xc6\x99\x90\x19\xae\x89\x36\x5c\xe1\x53\xf7\x02\x13\xd1\x56\x0d\xc7\xf3\x81\x9c\x57\x82\x5b\x96\x3f\x9f\xef\xf4\x14\x79\x72\x47\xcd\x4e\x73\x45\x65\x63\x78\x63\xfe\x23\x7f\x7a\x36\xa1\xcc\x3b\xf1\xa6\x17\xfc\x2c\xa3\x93\xe9\x6c\x76\x32\xe1\xe7\xd4\xcb\xbe\x79\xb3\xc9\xc9\x59\x3e\x9d\x32\x3a\xcb\xa7\xe7\xef\x77\x37\x12\xb5\x15\x75\x5b\x62\x68\x09\xd8\xb2\xe2\x55\x08\x9a\x1b\x40\x7c\x03\xbf\xad\xa3\xe3\x63\x20\xed\x1a\x08\x63\x80\x50\x23\x11\x25\xb4\xe4\x80\xd0\x63\xa5\x4c\x47\x04\xb8\x59\x57\x09\x86\x18\x6f\x75\x4f\x3f\xca\x88\x2e\x87\x8f\x82\xd2\xe1\xac\x3b\x2d\x10\xe3\x8f\x43\x21\x5b\xde\x68\x2d\x46\x82\xec\x8f\x71\x05\xdf\xb4\x52\x19\x58\x44\x71\x14\x25\xe9\x55\x14\x25\xf7\x49\xec\xdf\x7d\xb7\x9d\xcf\x85\x04\xde\x3c\x6e\xa1\x2f\xf6\x7e\xe6\xa9\xe8\x6f\xf9\x07\x6c\xe7\x30\x4e\x1b\x50\x04\xdb\x28\xc7\x9c\xb6\xef\x30\x44\x01\xba\x06\xdc\x69\x85\x85\xa4\x44\x00\xda\x3c\xe7\x1f\x52\x55\xfd\x61\x9b\xb2\x77\xd3\xb8\x90\x58\x2b\xba\x85\x46\xff\x50\x3b\x01\x54\xc1\xa1\xa9\x23\xc1\xc5\x35\x59\x73\xf7\xcd\x9f\xdd\x1e\xa4\x72\xc0\x5f\x0f\xa8\xbd\xe1\x8c\x1f\x78\xfb\xf6\xdf\xde\xf9\xc9\x4f\xc0\x85\x1c\xca\xa1\x70\xc6\x26\xce\xaa\xe6\xf2\xf0\x72\x7d\xc7\xe9\xb1\x31\xd4\x7a\xcd\x2a\x05\xa8\x1d\x0c\x1b\x46\xb4\xa2\xf6\xbe\xca\xaa\xc6\x86\xfe\x91\x65\x2d\x19\xa0\x18\x3c\xcf\xdb\xa1\xf6\xbf\x00\x00\x00\xff\xff\xbb\xef\xcb\x99\x5a\x03\x00\x00")

func etcDockerfileBuildAlpineBytes() ([]byte, error) {
	return bindataRead(
		_etcDockerfileBuildAlpine,
		"etc/Dockerfile.build.alpine",
	)
}

func etcDockerfileBuildAlpine() (*asset, error) {
	bytes, err := etcDockerfileBuildAlpineBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/Dockerfile.build.alpine", size: 858, mode: os.FileMode(420), modTime: time.Unix(1488389408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcDockerfileBuildDebian = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x6b\x83\x30\x1c\xc5\xcf\xf3\x53\xfc\x11\xf1\x16\x73\x19\x13\x7a\x73\x35\x73\x32\x4d\x46\xaa\xee\x32\x08\x56\x69\x2a\x8b\xa6\x44\x85\xd2\xd2\xef\x3e\x16\xb7\x95\x42\x8f\xef\xf7\xf2\xf2\xde\xff\x85\xb3\x1c\xbc\x73\xcc\xd6\x6f\x84\x8b\xe7\x32\xcd\x62\x41\xa3\x22\xad\x88\x48\xf3\x28\x21\x17\xc7\x21\xb4\x82\x84\x65\x11\x4d\x44\xcc\x3e\x68\xc6\xa2\x58\x94\x3c\x83\xfd\x34\x1d\xc6\x15\xc6\x52\xab\x7a\x90\x81\x36\x12\xb7\x0a\x4b\xed\x9d\x79\x49\x8b\x34\x27\x22\x61\xa2\x22\x7c\x93\x32\x7a\x09\x54\x37\xcc\x47\x54\xf7\xed\xd3\x63\x30\xd5\x26\x90\x27\xc7\xe1\x25\x85\x66\x36\x0a\xd0\x6e\xdc\x64\xe0\x7a\x77\x6a\x5c\x40\x1a\x7e\x2b\x96\x1c\x7c\x3a\x0f\xbe\x0f\x53\x6d\x00\xad\x01\xcf\xa3\xc1\x4a\x37\xb5\x02\x74\x3c\xed\xee\x3e\x35\xfd\x2d\xfe\xbb\xe9\x3d\x2a\x5e\x01\x4b\x6d\xa5\x15\xde\x02\xf1\xb6\x1b\x56\xd7\x9f\xb1\xd4\x96\x78\x3f\xde\x32\xbb\xff\x6a\x3b\x03\xe8\x60\x47\xdb\xc8\x68\x1a\xf7\xaa\xb6\xdd\xe0\x82\xef\x43\xb3\xef\x75\x0b\x88\x43\x18\x86\xff\xae\xfb\x1d\x00\x00\xff\xff\x64\xa0\x99\x0d\x76\x01\x00\x00")

func etcDockerfileBuildDebianBytes() ([]byte, error) {
	return bindataRead(
		_etcDockerfileBuildDebian,
		"etc/Dockerfile.build.debian",
	)
}

func etcDockerfileBuildDebian() (*asset, error) {
	bytes, err := etcDockerfileBuildDebianBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/Dockerfile.build.debian", size: 374, mode: os.FileMode(420), modTime: time.Unix(1488389408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcRunSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x4b\xc3\x40\x10\x46\xef\xf3\x2b\x3e\xe3\xe0\x1e\xa4\x74\x6b\x8e\x65\xb5\x0a\x4b\x11\x62\x16\x62\xc9\x65\xbb\xd0\x6d\xdd\x9a\x45\xb3\x85\x9a\x83\x42\x7f\xbc\x68\x13\x48\x8f\xf3\x98\x99\xf7\xae\xaf\xa6\xdb\x98\xa6\x5b\xff\xd5\xd0\x9b\x3f\x7e\xec\x7e\x7c\x52\x62\x2d\xf3\xdc\xca\x79\x3e\x6b\x05\xa5\xc3\xb1\xf5\x9f\x8a\xc5\x3a\x58\xd9\x0a\xa2\xb8\x87\x05\xeb\xb2\x7e\xae\x4c\xf9\xa2\xcb\x15\xdc\x1c\x5d\x13\x12\x01\xc0\x88\xab\xcc\x8e\xd7\x5c\x46\xfb\x48\x14\x76\xcd\x01\x93\x00\x1e\x74\xb7\x97\xcf\x78\xc1\x67\x25\x51\x61\x96\x6a\xc3\x0b\xdc\xdd\xdf\xcc\x36\x54\xe9\x55\xfd\x58\x28\x7e\xe8\x0b\xce\x33\x26\xef\x1d\x24\x1c\x4e\xa7\x3f\x58\xeb\xea\xc9\xbc\x6a\x38\x8c\x9a\xfe\x95\x19\x17\x66\xd9\x27\x7c\xc7\x6e\xb8\xff\x0d\x00\x00\xff\xff\x3a\xd1\x31\xa2\x01\x01\x00\x00")

func etcRunShBytes() ([]byte, error) {
	return bindataRead(
		_etcRunSh,
		"etc/run.sh",
	)
}

func etcRunSh() (*asset, error) {
	bytes, err := etcRunShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/run.sh", size: 257, mode: os.FileMode(493), modTime: time.Unix(1488389408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeBootstrapMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xdb\x30\x14\x7d\xae\x7f\xc5\xa1\xcd\x83\x0d\xf6\xc6\x9e\x06\x85\x32\xd2\x46\xcb\xcc\xda\x64\x38\x69\xd8\x9b\x2b\x5b\xd7\xf1\xa5\x8e\x94\x49\xb2\xcb\x60\x3f\x7e\x38\x89\x93\xb4\x1d\x7b\x94\x74\xcf\xc7\x3d\x47\x57\xe8\xa4\x65\x59\x34\xe4\x50\x10\xeb\x35\x58\x97\x4d\xab\x48\xa1\xb2\x66\x03\x5f\x13\x9e\x36\x52\x73\x45\xce\x7f\xd8\x3c\x3f\x05\xf7\xe3\xd9\xf4\x71\x3c\x15\xf8\x72\x13\x64\x8f\xb3\x65\xfa\x20\xf2\xf9\xe2\xfc\x34\x1b\x2f\xd3\x95\xc8\x57\x22\x5b\xa4\xf3\xd9\xf9\xcb\x74\x7e\x7e\x1b\x5c\xc1\x6c\x3d\x1b\x2d\x9b\x93\x8b\x60\x92\xa5\x2b\x91\xe5\x13\xb1\xca\x7f\x64\xe2\x6b\xfa\x13\xd7\x37\x50\xd4\x0d\x0f\x27\x02\x8c\xc2\x77\xc3\x51\x32\x0a\x5d\x4d\x4d\x83\x35\x7b\x58\xea\x92\xad\xb4\x8e\xf0\x4d\x8c\x27\xf8\x83\xb2\xf5\x48\xca\x4f\xc9\xe7\x28\x08\x26\xf3\xbb\xef\x22\xcb\xd3\x87\xfd\x32\x28\x8a\xa6\x72\xf5\xc7\x51\x38\x6c\x18\x25\xca\x72\x47\xf6\xd5\xe4\xa0\x2f\x26\x7b\x07\xa5\x6c\x1a\x90\x2b\xe5\x96\x72\x65\xca\x67\xb2\xb9\x97\xeb\x78\x14\x9e\x83\xa2\xeb\xa3\xd5\x03\x3c\x8a\x06\xd6\xdb\xc7\xf4\x7e\x32\x64\x76\x34\xf3\x06\x9f\x14\x2d\x37\xea\x35\xe4\x40\xf8\x7f\x48\xf2\xc2\xbe\x4e\xd6\xa6\x0f\x5b\x51\xc5\x9a\x14\x0a\xaa\x65\xc7\xa6\xb5\xa8\x8c\xc5\x6e\xcc\x81\xb5\x63\x45\xf0\x56\x76\xec\x92\x92\x03\xae\x34\xfd\x42\x38\x0a\x8d\xe5\x35\x6b\xdc\xa5\x51\x8c\x56\x1f\x48\xa2\x00\x00\xae\xc0\x15\x5e\x08\xd2\xd2\x40\x70\x97\xc6\xe8\xc8\x16\xc6\x11\xd8\x81\x74\xdf\xaa\x42\xf1\xbb\x97\x97\x6d\xe3\x83\x8b\x95\xc8\x6e\xe7\x0b\xd1\xf7\xea\x6d\x4b\x01\x69\xc5\x55\x6f\x90\x2b\x2c\xb3\xf1\x2a\x5d\xe4\xcb\xf1\xf4\x68\xf7\x4d\xef\xec\x60\x3a\xb2\x96\x15\xa9\x93\xc9\x13\x2e\x8a\xb1\x37\xf7\x06\x77\xdd\x27\x74\x36\xf6\x4a\xf6\xb0\x83\x36\x1e\xac\xd1\x17\xb8\xfb\xf9\xdb\xd6\xd5\xbd\xa0\x62\xb7\x5b\x23\xe0\x6a\x2f\x57\xb1\x75\xfe\xc5\x58\x85\x51\xe8\xda\xc2\x79\x24\x31\xe2\xf7\x25\x47\xf1\x3f\x3f\x69\x14\x5c\xf4\xd4\x03\x2d\x6e\x70\xb9\x93\x3a\x5e\xf4\xc5\x28\xea\xa8\x31\xdb\x0d\x69\xdf\x27\xea\xd8\x68\x77\xb9\x77\xfd\x37\x00\x00\xff\xff\x2b\x2b\x66\x5c\xb6\x03\x00\x00")

func makeBootstrapMkBytes() ([]byte, error) {
	return bindataRead(
		_makeBootstrapMk,
		"make/bootstrap.mk",
	)
}

func makeBootstrapMk() (*asset, error) {
	bytes, err := makeBootstrapMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/bootstrap.mk", size: 950, mode: os.FileMode(420), modTime: time.Unix(1488389408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeFunctionsMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x4d\x0e\x82\x30\x10\xc5\xf1\x7d\x4f\xf1\x12\x58\x40\xd2\x2e\xdc\x72\x19\x32\xb4\x83\x12\xcb\x8c\xe9\x47\xbc\xbe\x51\x51\x49\x70\x3b\x79\xf9\xff\xa6\x01\x67\x4f\x37\x1e\x83\xfa\x2b\xa7\xb1\xd0\x79\xbb\xc0\x6b\x54\x81\xbf\x50\x42\x51\x50\x8c\x7a\x47\xcd\x0c\xc2\x7b\x8b\xe7\x96\x32\x52\x8d\x6c\x02\xcf\x8b\xf0\x31\x66\xda\x2e\xd7\x29\x17\x0c\xd6\x39\xdb\x76\xa7\xbe\x37\x2c\x81\x67\x63\x1a\x54\x39\xe2\x24\x5b\x24\xec\x99\xa2\x98\xf8\xa5\x2f\xf2\x7b\xc0\xeb\xba\x92\x84\x0f\xfe\x27\xf7\xe5\x9d\xb3\xc3\x9e\x7f\x04\x00\x00\xff\xff\xff\x00\xb3\xb9\xf8\x00\x00\x00")

func makeFunctionsMkBytes() ([]byte, error) {
	return bindataRead(
		_makeFunctionsMk,
		"make/functions.mk",
	)
}

func makeFunctionsMk() (*asset, error) {
	bytes, err := makeFunctionsMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/functions.mk", size: 248, mode: os.FileMode(420), modTime: time.Unix(1488389408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeRulesMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5b\x6f\xdb\x36\x14\x7e\x36\x7f\xc5\x81\xab\xa0\x22\x1a\xd9\x2b\xfa\xe6\x4c\x6b\xdc\x5a\x75\x85\xf9\x52\xf8\x92\x6d\x68\x06\x41\x91\x28\x9b\x88\x2e\x2e\x49\xa9\x29\xb6\xfd\xf7\x81\x22\x75\x8b\x2f\xed\x5e\xf6\x14\xf9\xf0\x3b\xf7\xef\x1c\x32\xef\xb6\xee\x6c\xe2\xb9\x13\x18\xd9\x60\x98\x7c\x4f\xe2\x18\x42\x5f\x10\x78\xd5\xbf\x4a\xac\xab\xd0\xba\xfa\xc3\xbb\xfa\xe8\x5d\xcd\xbd\xab\x75\x1f\x23\x05\xff\x34\xde\x7c\x54\x0a\x71\x16\xf8\x82\x66\x29\x1e\x3e\xe4\x34\x0e\x11\x5a\x6d\x17\xda\x54\xf8\xd8\x1c\x12\x11\x0c\x59\x9e\x0e\xf8\x5e\x02\xbc\x3b\x67\xf5\x6e\xb9\x76\x24\x50\x7f\xda\xaf\xc1\x30\x57\xdb\x05\x46\xe8\x05\x84\x59\xf0\x48\x18\xb0\x3c\x15\x34\x21\x10\x64\x49\xe2\xa7\x21\x47\x93\xe5\xfb\x5f\x9d\x95\xf7\x7e\x3e\x81\xb7\xb6\x46\x55\xc2\x32\x30\x29\x36\xcc\x06\x86\x41\x45\xa5\x25\x32\xb6\x23\x04\xcb\x53\xb0\x2c\x96\x80\x25\x2a\xdc\x66\x3c\x3d\xc6\x09\x7f\x57\x9d\x7f\xda\xae\x3f\x1e\x03\x0e\x39\xdf\x23\x5d\xa0\xbb\xe5\x6c\x3b\x77\xbc\xcd\x78\x35\x75\x36\x12\x3a\xcc\x0e\x62\x18\x32\x5a\x10\x36\xe4\x2c\x18\x76\x71\x65\x3d\xdf\x76\xea\x89\x2a\x67\x1f\xdc\x99\xe3\xd5\x9e\xdc\xf9\x78\xea\xc8\xfa\xad\xdd\xe5\xc2\x99\xe0\x67\x5a\xc3\x49\x59\x94\x88\xc6\xe4\xb4\xbe\x72\x3b\x59\xb9\x77\x95\x31\x6d\xe2\xa8\x5d\x8d\xa5\x41\x59\xc4\x41\xd9\x9f\x8d\x3b\x77\xbc\xe5\x1a\x5f\xb2\xbe\x18\x6f\xdc\x3b\xa7\x63\xfd\x54\x80\x03\xcd\x98\x17\x10\x53\x2e\x20\x8b\x80\x26\xfe\x8e\x70\x10\x99\x6e\x9b\xe6\xa6\xb4\x63\x5f\xf4\x71\x31\xbd\xb3\xb5\x93\xae\x77\x59\xec\xa7\xbb\x63\xaa\x4d\x97\x25\xcd\x6c\xd8\x65\xf2\x7b\xe3\xac\x37\x20\x13\x51\x72\x0c\x82\x70\x01\x56\x21\xcf\x66\x93\x0f\xb3\xf1\x74\x0d\x36\x58\xbf\x43\xe2\xd3\x74\x50\x10\xc6\x69\x96\xca\x98\x55\x24\xda\x27\xae\x11\x65\x7e\xb6\x61\x56\xd3\x57\xc6\x52\x0a\x81\xa4\x05\x65\x59\x42\x52\x01\x85\xcf\xa8\xff\x10\x13\xae\x2b\xb1\x5d\x3b\x2b\x59\xcf\x87\x87\x38\xe2\xfb\x4a\xe8\x6a\xda\xab\xd9\xa5\x21\x58\x39\x18\xa6\xc4\xe2\x6a\x5e\xc7\xab\xe9\x1a\xde\xda\xa8\x53\x3b\x3d\x46\x75\x79\xe4\xf4\xc1\x3d\xea\x95\xea\x8d\x43\x3c\xaa\x7f\xb9\x13\x05\x28\x6a\x40\x8b\xbf\x0d\xae\x43\x7e\xa5\x41\xc0\x59\xdc\xb9\xab\xe5\x62\xee\x2c\x36\x97\x7b\x79\x8f\x7a\x97\xce\xab\x09\xd3\x95\xfd\x3f\x93\x28\xca\xfe\x2b\xd8\x70\x97\x7d\x3f\xb1\x2e\x0f\x8f\x13\xeb\x9c\x4b\x06\xd0\xa8\xda\x87\x40\x39\xe4\x29\x27\xa2\x5a\x86\x8a\x1c\x94\x03\x79\x22\x41\x2e\x48\x08\x34\x85\x2f\x39\x15\x04\x92\x2c\x24\x88\x46\xe4\x0b\x98\x86\x99\x31\xba\xa3\x69\x65\x06\x5f\x43\x9e\x86\x24\xa2\x29\x09\x31\xea\xb5\xd8\xf0\xca\x06\xeb\x0b\x22\x69\x48\x23\x84\xc6\xb3\xd9\xf2\x37\x67\xe2\xb9\x0b\x4f\x05\x28\xc7\x1a\x6c\x19\xf2\x6c\xbc\x98\x6e\xc7\x53\x47\x7e\x57\xf3\xaf\x1b\xa2\x59\x0d\x95\x78\xba\xac\x45\xf7\x95\xaf\x92\xb2\x0d\x51\x5b\xd7\xc7\x3d\xea\xb5\xe7\x12\x4e\x0f\x29\x9c\x65\x82\xac\x97\x20\x2c\x81\x20\x8b\x33\xc6\x61\x4f\xe2\x03\x61\x1c\x05\x01\x23\xa1\x0d\xf7\xe4\xf3\x4f\x37\x6f\x5e\x27\x28\x08\xbe\x91\x38\xce\xbe\x56\xa2\x37\x49\x09\xe1\x44\x28\x49\x22\x0d\x7d\x25\x40\x9e\x0e\x19\x13\x20\xf6\xa4\x9e\x3b\xb9\x89\x7c\xa9\x2b\x87\x92\xe7\x0f\x5c\x5c\x43\xf9\x87\x8a\x5c\x90\x0a\xca\x65\x27\xc4\x9e\xa0\x17\xd0\x2c\x37\x8e\x94\x3d\x84\xfc\x38\x1e\xe9\x7d\x86\x2a\x72\x29\x0e\xa1\xde\xad\xba\xf3\x20\x79\x0c\x29\x03\xeb\x00\x1d\x40\x83\x57\x0c\x51\x0a\xa4\xf0\x63\xd8\x38\xf3\x4f\xe5\xee\x6d\x5f\xdb\xc9\xa3\x20\xc9\x41\x99\x11\xc9\xa1\xde\xb9\x18\xa3\xde\x6d\xa9\xd6\xaf\xf2\x80\x97\x86\x19\x65\x8c\xf8\xc1\x1e\x8a\x6b\xc3\x3c\x49\x00\x7c\x7d\x6f\x18\x7f\x19\x66\x81\xff\xc1\x2f\xe1\xe7\x66\xc8\xd4\xd2\xbf\xc5\xf0\x0b\x18\x66\x1d\x0a\xee\x37\x09\x75\x89\x8e\xeb\xbc\x24\xf5\x30\x58\x02\x0c\x33\xf0\xe3\x18\xf2\x94\xf0\xc0\x3f\x10\x4f\xb1\xdc\x13\xfe\xee\x5a\x1a\xb6\xa2\x8e\x65\x18\xa0\xde\x2d\x4b\x3a\x32\x84\xe4\x0e\x1e\xc1\xdf\x50\xf8\x31\x2d\x9f\x2c\x52\x60\xa5\xbe\xa0\x85\xfe\x56\x17\x2e\x6a\xc9\x47\xcf\xef\x8a\xee\x72\xd1\x09\x54\x0f\x94\x26\xf0\x66\x67\x62\x48\xfc\xc7\x8e\x2f\x8b\xa6\x82\xb0\xd4\x8f\x55\x48\xda\xab\x8c\xac\xd3\xce\x8b\x9e\x2f\x5e\x61\xe7\xc3\x6a\xb6\x60\x3b\x2c\x15\xc0\xe9\xb0\x6a\xa9\x26\xe5\x51\x0e\xbd\xdb\x20\x04\x85\xbd\x51\x3b\xeb\x99\x67\x7d\x1d\x62\x18\x0c\x07\x83\x01\x42\xa5\x19\x99\x6d\xdb\x9e\xfe\xa1\xec\x5c\xb8\x82\xdb\x3a\xa3\xff\x50\xaf\x36\xd5\xce\x74\xe8\x74\x7a\xa8\x1d\xd8\x77\x7b\xd4\xdd\xe0\x6d\x8b\xc7\x01\x1c\xf5\xa2\xed\xe9\x4c\x00\x4d\x37\x8e\xea\xae\x9f\x15\x76\xbf\xac\xb8\xfe\x85\xfb\x50\x7b\xad\x9e\x22\xea\x66\xb0\xb2\x6e\x26\xfa\xb1\x09\x03\x69\x0c\xc9\xb7\x69\xb5\x85\x7a\xb7\x34\x82\xcf\x60\x98\x52\x18\x52\x2e\x37\x5d\x88\xe1\xcf\x1b\xb9\xc4\x52\xe9\xba\x47\x82\x7d\x06\x16\x81\xbe\x61\x96\xeb\x14\x3f\x03\x2b\x31\x27\x02\xf7\x6f\x94\xc2\x13\x15\xf0\xba\xfc\x8e\x28\x3a\xb1\x07\x36\xe3\x29\xbe\x38\xf4\xe7\x18\x52\xde\x9b\xbd\x1f\xd6\xc4\x78\x14\xfb\x92\xee\x27\x62\x90\xcf\xf6\x4b\xcf\xc1\x1f\xd3\xa8\x1d\xa0\x6a\xef\x8c\xda\x9a\xea\x6d\x66\xf1\xf0\x11\xc3\x43\x96\x09\x2e\x98\x7f\x00\xcb\x0a\xd9\x37\x8b\xe5\x29\x42\x41\x4c\xfc\xb4\xa5\x22\xff\xf3\x60\x51\xb7\x79\xff\x06\x00\x00\xff\xff\x6e\xc2\xbf\xbe\x95\x0d\x00\x00")

func makeRulesMkBytes() ([]byte, error) {
	return bindataRead(
		_makeRulesMk,
		"make/rules.mk",
	)
}

func makeRulesMk() (*asset, error) {
	bytes, err := makeRulesMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/rules.mk", size: 3477, mode: os.FileMode(420), modTime: time.Unix(1488389408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Makefile": makefile,
	"etc/Dockerfile.build.alpine": etcDockerfileBuildAlpine,
	"etc/Dockerfile.build.debian": etcDockerfileBuildDebian,
	"etc/run.sh": etcRunSh,
	"make/bootstrap.mk": makeBootstrapMk,
	"make/functions.mk": makeFunctionsMk,
	"make/rules.mk": makeRulesMk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"etc": &bintree{nil, map[string]*bintree{
		"Dockerfile.build.alpine": &bintree{etcDockerfileBuildAlpine, map[string]*bintree{}},
		"Dockerfile.build.debian": &bintree{etcDockerfileBuildDebian, map[string]*bintree{}},
		"run.sh": &bintree{etcRunSh, map[string]*bintree{}},
	}},
	"make": &bintree{nil, map[string]*bintree{
		"bootstrap.mk": &bintree{makeBootstrapMk, map[string]*bintree{}},
		"functions.mk": &bintree{makeFunctionsMk, map[string]*bintree{}},
		"rules.mk": &bintree{makeRulesMk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


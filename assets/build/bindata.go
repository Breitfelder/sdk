// Code generated by go-bindata.
// sources:
// etc/build/Makefile
// etc/build/etc/Dockerfile.build.debian
// etc/build/make/bootstrap.mk
// etc/build/make/functions.mk
// etc/build/make/rules.mk
// DO NOT EDIT!

package build

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x50\xbb\x6e\xdb\x40\x10\xec\xef\x2b\x06\xb0\x0a\x11\x30\x25\x20\x65\x80\x18\x30\xe0\xc0\x85\x93\x34\x4e\x7a\x1e\x79\x7b\xd6\x85\xf7\xca\xde\x52\xb1\xff\x3e\x38\x2a\x12\x99\x14\x56\xb9\x3b\xb3\xb3\x33\x73\x83\xef\x07\x57\xe0\x0a\xe4\x40\xa0\x28\xfc\x96\x93\x8b\x82\x64\xe7\x4d\xdf\x7b\x5b\x0e\x08\x7a\x24\x3c\x3f\x3c\xdd\xce\xcb\xe7\x87\x27\x94\x43\x9a\xbc\x41\x4f\x28\x92\x98\x0c\xb4\xa8\x1b\x74\xc5\x8c\x3e\x0d\x5a\x5c\x8a\xdd\x2d\x5e\x28\x12\x6b\x21\x03\x7a\xa5\x61\x12\x17\x5f\xd0\x9d\x24\xdb\x62\x46\x64\xa6\xac\x99\xda\x7e\x72\xde\x74\x3b\x7c\xd5\xf1\x0d\xc6\x59\x4b\x4c\xb1\xea\x1d\x35\x17\xe8\x82\xee\xcb\xfd\xb7\xc7\x1f\xf7\x8f\x9f\x3b\x68\x26\x30\xfd\x9a\x1c\x93\xa9\x76\x5c\xa9\x2c\xa7\x7b\x4f\x65\x06\xe9\x55\x58\x0f\xf3\x2f\xcb\x29\x54\xc7\xd5\x59\xd0\xd1\x59\x2a\xb2\x93\x14\x7c\x07\x2d\x73\x14\x4e\x49\xa0\xa3\x99\x87\xcc\xe9\x27\x0d\x02\x61\x1d\x8b\xd7\xb3\x84\x13\x48\x82\x3e\x35\xe0\xe2\xe0\x27\x53\xe5\xb4\x2c\x8a\x1d\xa6\xf2\x7f\xb2\x05\x93\x94\xfc\x4e\xa9\x73\x2b\xf8\x84\xcd\xb6\x1c\xc8\x7b\xe4\xdf\xa6\x51\xab\xc2\x66\xe8\x3c\x34\xfb\x5d\x31\xa3\x3a\xeb\x9c\xce\x16\x6e\xb3\xaf\x86\xf6\x97\x50\x61\x54\x12\xf2\xbf\x4f\xd6\x6c\x09\x59\x9d\xff\x86\xd1\x38\x46\x9b\xb1\xd9\xae\x6e\x9a\x46\xa9\x55\x80\x8f\x8b\xcf\x21\x85\x50\x2b\x6a\x8f\x58\x11\x3e\xdc\x61\x6f\xe8\xb8\x8f\x93\xf7\x8d\x72\xd6\x90\x5d\xc1\x0a\xc0\x45\x60\xb3\x5d\x80\xe6\x52\x0d\xda\x36\xb3\x8b\xd2\x52\x3c\xe2\x0e\x9b\xed\x19\x68\x1a\x45\xd1\x38\xab\xd4\xdf\xbe\xaf\x46\x7f\x8f\x67\xa7\x38\xd4\xb1\x5c\x23\xf6\x29\x49\x11\xd6\xf9\x1a\x91\x27\x4f\x55\xed\x4f\x00\x00\x00\xff\xff\x24\x9b\xb7\x29\x3c\x03\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 828, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcDockerfileBuildDebian = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x6b\x83\x30\x1c\xc5\xcf\xf3\x53\xfc\x11\xf1\x16\x73\x19\x13\x7a\x73\x35\x73\x32\x4d\x46\xaa\xee\x32\x08\x56\x69\x2a\x8b\xa6\x44\x85\xd2\xd2\xef\x3e\x16\xb7\x95\x42\x8f\xef\xf7\xf2\xf2\xde\xff\x85\xb3\x1c\xbc\x73\xcc\xd6\x6f\x84\x8b\xe7\x32\xcd\x62\x41\xa3\x22\xad\x88\x48\xf3\x28\x21\x17\xc7\x21\xb4\x82\x84\x65\x11\x4d\x44\xcc\x3e\x68\xc6\xa2\x58\x94\x3c\x83\xfd\x34\x1d\xc6\x15\xc6\x52\xab\x7a\x90\x81\x36\x12\xb7\x0a\x4b\xed\x9d\x79\x49\x8b\x34\x27\x22\x61\xa2\x22\x7c\x93\x32\x7a\x09\x54\x37\xcc\x47\x54\xf7\xed\xd3\x63\x30\xd5\x26\x90\x27\xc7\xe1\x25\x85\x66\x36\x0a\xd0\x6e\xdc\x64\xe0\x7a\x77\x6a\x5c\x40\x1a\x7e\x2b\x96\x1c\x7c\x3a\x0f\xbe\x0f\x53\x6d\x00\xad\x01\xcf\xa3\xc1\x4a\x37\xb5\x02\x74\x3c\xed\xee\x3e\x35\xfd\x2d\xfe\xbb\xe9\x3d\x2a\x5e\x01\x4b\x6d\xa5\x15\xde\x02\xf1\xb6\x1b\x56\xd7\x9f\xb1\xd4\x96\x78\x3f\xde\x32\xbb\xff\x6a\x3b\x03\xe8\x60\x47\xdb\xc8\x68\x1a\xf7\xaa\xb6\xdd\xe0\x82\xef\x43\xb3\xef\x75\x0b\x88\x43\x18\x86\xff\xae\xfb\x1d\x00\x00\xff\xff\x64\xa0\x99\x0d\x76\x01\x00\x00")

func etcDockerfileBuildDebianBytes() ([]byte, error) {
	return bindataRead(
		_etcDockerfileBuildDebian,
		"etc/Dockerfile.build.debian",
	)
}

func etcDockerfileBuildDebian() (*asset, error) {
	bytes, err := etcDockerfileBuildDebianBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/Dockerfile.build.debian", size: 374, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeBootstrapMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x51\x6b\xdb\x30\x14\x85\x9f\xeb\x5f\x71\x68\xf3\x60\x83\xbd\xb1\xa7\x41\xa1\x8c\xb4\xd1\x32\xb3\x36\x19\x6e\x1a\xf6\xe6\xca\xd6\x75\x7c\xa9\x23\x65\x92\xec\x32\xd8\x8f\x1f\x4e\xe2\x24\x4d\xc7\x5e\xa5\x7b\xce\xf9\x74\x8f\xae\xd0\x49\xcb\xb2\x68\xc8\xa1\x20\xd6\x2b\xb0\x2e\x9b\x56\x91\x42\x65\xcd\x1a\xbe\x26\x3c\xaf\xa5\xe6\x8a\x9c\xff\xb0\x7e\x79\x0e\xee\xc7\xb3\xe9\xd3\x78\x2a\xf0\xe5\x26\xc8\x9e\x66\x8b\xf4\x41\xe4\xb3\xf1\x22\x5d\x8a\x7c\x29\xb2\xc7\x74\x3e\x3b\xbd\x99\xce\x4f\x4f\x83\x2b\x98\x8d\x67\xa3\x65\x73\xcc\x0d\x26\x59\xba\x14\x59\x3e\x11\xcb\xfc\x47\x26\xbe\xa6\x3f\x71\x7d\x03\x45\xdd\x70\x71\x34\xc0\x28\x7c\x37\x1c\x25\xa3\xd0\xd5\xd4\x34\x58\xb1\x87\xa5\x2e\xd9\x48\xeb\x08\xdf\xc4\x78\x82\x3f\x28\x5b\x8f\xa4\xfc\x94\x7c\x8e\x82\x60\x32\xbf\xfb\x2e\xb2\x3c\x7d\xd8\xe1\xa3\x28\x9a\xca\xd5\x1f\x47\xe1\xf0\xa6\x28\x51\x96\x3b\xb2\x6f\x26\x87\x7c\x31\xd9\x11\x94\xb2\x69\x40\xae\x94\x1b\xca\x95\x29\x5f\xc8\xe6\x5e\xae\xe2\x51\x78\x2a\x8a\xae\x0f\xa8\x7b\x79\x14\x0d\xae\xb7\x4f\xe9\xfd\x64\xd8\xd9\x01\xe6\x4c\x9f\x14\x2d\x37\xea\xad\x64\x6f\xf8\x7f\x49\xf2\xca\xbe\x4e\x56\xa6\x5f\xb6\xa2\x8a\x35\x29\x14\x54\xcb\x8e\x4d\x6b\x51\x19\x8b\xed\x98\x03\x6b\xc7\x8a\xe0\xad\xec\xd8\x25\x25\x07\x5c\x69\xfa\x85\x70\x14\x1a\xcb\x2b\xd6\xb8\x4b\xa3\x18\xad\xde\x9b\x44\x01\x00\x5c\x81\x2b\xbc\x12\xa4\xa5\xc1\xe0\x2e\x8d\xd1\x91\x2d\x8c\x23\xb0\x03\xe9\xbe\x55\x85\xe2\x77\x1f\x2f\xdb\xc6\x07\x17\x4b\x91\xdd\xce\x1f\x45\xdf\xab\xb7\x2d\x05\xa4\x15\x57\x3d\x20\x57\x58\x64\xe3\x65\xfa\x98\x2f\xc6\xd3\x03\xee\x59\xef\xec\x60\x3a\xb2\x96\x15\xa9\x23\xe4\x51\x17\xc5\xd8\xc1\x9d\xe9\xae\xfb\x0d\x9d\x8c\xbd\x89\xdd\xbf\x41\x1b\x0f\xd6\xe8\x0b\xdc\xfe\xf5\x4d\xeb\xea\x3e\x50\xb1\xdb\x3e\x23\xe0\x6a\x17\x57\xb1\x75\xfe\xd5\x58\x85\x51\xe8\xda\xc2\x79\x24\x31\xe2\xf7\x25\x47\xf1\x3f\x3f\x69\x14\x5c\xf4\xd6\x83\x2d\x6e\x70\xb9\x8d\x3a\x1c\xf4\xc5\x28\xea\xa8\x31\x9b\x35\x69\xdf\x6f\xd4\xb1\xd1\xee\x72\x47\xfd\x37\x00\x00\xff\xff\x48\xf9\xe1\xba\xa8\x03\x00\x00")

func makeBootstrapMkBytes() ([]byte, error) {
	return bindataRead(
		_makeBootstrapMk,
		"make/bootstrap.mk",
	)
}

func makeBootstrapMk() (*asset, error) {
	bytes, err := makeBootstrapMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/bootstrap.mk", size: 936, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeFunctionsMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x4d\x0e\x82\x30\x10\xc5\xf1\x7d\x4f\xf1\x12\x58\x40\xd2\x2e\xdc\x72\x19\x32\xb4\x83\x12\xcb\x8c\xe9\x47\xbc\xbe\x51\x51\x49\x70\x3b\x79\xf9\xff\xa6\x01\x67\x4f\x37\x1e\x83\xfa\x2b\xa7\xb1\xd0\x79\xbb\xc0\x6b\x54\x81\xbf\x50\x42\x51\x50\x8c\x7a\x47\xcd\x0c\xc2\x7b\x8b\xe7\x96\x32\x52\x8d\x6c\x02\xcf\x8b\xf0\x31\x66\xda\x2e\xd7\x29\x17\x0c\xd6\x39\xdb\x76\xa7\xbe\x37\x2c\x81\x67\x63\x1a\x54\x39\xe2\x24\x5b\x24\xec\x99\xa2\x98\xf8\xa5\x2f\xf2\x7b\xc0\xeb\xba\x92\x84\x0f\xfe\x27\xf7\xe5\x9d\xb3\xc3\x9e\x7f\x04\x00\x00\xff\xff\xff\x00\xb3\xb9\xf8\x00\x00\x00")

func makeFunctionsMkBytes() ([]byte, error) {
	return bindataRead(
		_makeFunctionsMk,
		"make/functions.mk",
	)
}

func makeFunctionsMk() (*asset, error) {
	bytes, err := makeFunctionsMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/functions.mk", size: 248, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeRulesMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xdb\x6e\xdb\x46\x10\x7d\xd6\x7e\xc5\x40\xa1\x60\x2e\x62\x4a\x0d\xf2\x26\x57\xb5\x95\x88\x91\x85\xea\x62\xe8\xe2\xb6\x88\x0b\x82\x22\x87\xd2\xc2\x4b\x52\xe6\x2e\x15\x17\x6d\xff\xbd\x58\x2e\xaf\xb6\x2c\x14\x79\xc8\x93\xa8\xe1\x99\xcb\xce\x9c\x39\xdc\x4f\x9b\xc9\x74\xe4\x4c\x46\xd0\x1f\x80\x61\x8a\x3d\x72\x0e\xbe\x2b\x11\xde\xb7\x3b\xa1\xd5\xf1\xad\xce\x1f\x4e\xe7\xd6\xe9\xcc\x9c\xce\xaa\x4d\x89\x86\xdf\x0d\xd7\xb7\xda\x81\xc7\x9e\x2b\x59\x1c\xd1\xde\x36\x65\xdc\x27\xe4\x1d\xf8\xb1\xf7\x88\x09\x24\x69\x24\x59\x88\xe0\xc5\x61\xe8\x46\xbe\x20\xa3\xc5\xe7\x5f\xed\xa5\xf3\x79\x36\x82\xeb\x41\x8e\x2a\x8c\x59\x58\x65\x36\xcc\x0a\x46\x41\xc7\xcc\x2d\xcb\xcd\xfc\x35\x22\x49\x23\xb0\xac\x24\x2c\x40\xeb\xe1\xf8\x35\x48\xba\xbb\xe2\xfd\xdd\x66\x75\xfb\x1a\x70\x48\xc5\x9e\xe4\x67\xbb\x5f\x4c\x37\x33\xdb\x59\x0f\x97\x63\x7b\xad\xa0\xbd\xf8\x20\x7b\x7e\xc2\x8e\x98\xf4\x44\xe2\xf5\x9a\xb8\xac\x15\xd7\x8d\x56\x90\x22\xd9\x97\xc9\xd4\x76\xca\x4c\x93\xd9\x70\x6c\x3b\xf7\xf6\x72\x35\x59\xcc\xed\x11\x7d\xe1\xd5\x1b\x65\x1d\x09\x18\xc7\xd3\xfe\x3a\xed\x68\x39\xb9\x2f\x82\xe5\x21\x84\xff\x58\x45\x41\xe9\xd5\x22\x75\xb3\x0e\x76\x7d\xdc\x32\x37\x3a\x17\x76\x3e\x5c\x4f\xee\xed\x46\xd8\x53\x95\x75\xcb\x29\x73\x26\x24\xc4\x01\xb0\xd0\xdd\xa1\x00\x19\xe7\xc3\xca\xf9\xa4\xe2\x0c\xce\xe6\x38\x7b\xae\x37\x9b\xa6\x52\xef\x62\xee\x46\xbb\xd7\x04\x1b\x2f\x32\x72\x0d\x60\x17\xab\xe7\xb5\xbd\x5a\x83\x3a\x88\xb6\x53\x90\x28\x24\x58\x47\xf5\x6e\x3a\xfa\x32\x1d\x8e\x57\x30\x00\xeb\x77\x08\x5d\x16\x75\x8f\x98\x08\x16\x47\xaa\x66\x5d\x49\x9e\x93\x96\x88\xec\x7c\x03\xc3\x2c\x36\x86\x12\x55\x4c\x66\x05\x8c\x8e\x2c\x89\x43\x8c\x24\x1c\xdd\x84\xb9\x5b\x8e\x22\x6f\xc5\x66\x65\x2f\x55\x43\xb7\x5b\x1e\x88\x7d\x61\x9c\xe4\x6c\xd7\x0b\xc7\x7c\xb0\x52\x30\x4c\x85\xa5\xc5\x92\x0d\x97\xe3\x15\x5c\x0f\x48\xa3\x79\xf9\xf6\x94\xfd\x59\x6e\xe6\x14\x1e\x48\x2b\x73\xaf\x12\xd2\x7e\xf9\x6f\x32\xd2\x80\x63\x09\xa8\x31\xb7\xc2\x35\x68\x9f\x79\x9c\x9b\x5e\xb1\x2c\x79\xaf\x7e\x60\x55\x99\xc7\x78\xa1\x61\xbd\x5d\x7c\xa2\xd2\x06\x95\xd4\x8c\x58\x00\xf7\xf6\xf2\xd3\x62\x65\x03\x13\x90\x46\x02\x65\xa1\x52\x7a\x7c\x4c\x00\x3e\xa3\x97\x4a\xf4\x81\x45\xf0\x94\x32\x89\x10\xc6\x3e\x12\x16\xe0\x13\x98\x86\x19\x27\x6c\xc7\xa2\x22\x0c\xbd\x84\x34\xf2\x31\x60\x11\xfa\x94\xb4\x6a\xf3\x7a\x3f\x00\xeb\x89\x60\xe4\xb3\x80\x90\xe1\x74\xba\xf8\xcd\x1e\x39\x93\xb9\xa3\x0b\x54\x9b\x07\x03\x55\xf2\x74\x38\x1f\x6f\x86\x63\x5b\x3d\x2f\x37\xf3\xf5\x64\x66\x17\x1d\xce\x89\x07\x85\x79\xbc\x28\x4d\x0f\x45\xae\x8c\x54\x15\x95\x6a\xaa\xfc\x40\x5a\xf5\xd5\x81\xd3\x7b\x04\x6f\x8e\x56\xf5\x4b\x62\x12\x82\x17\xf3\x38\x11\xb0\x47\x7e\xc0\x44\x10\xcf\x4b\xd0\x1f\xc0\x03\x7e\xfd\xe9\xea\xe3\x87\x90\x78\xde\x5f\xc8\x79\xfc\xad\x30\x7d\x0c\x33\x88\x40\xa9\x2d\xa1\x0a\xf4\x0d\x01\x9f\x0f\x71\x22\x41\xee\xb1\xdc\x0c\x25\x16\xae\xf2\x55\x6b\x23\xd2\xad\x90\x97\x90\xfd\x30\x99\x4a\x2c\xa0\x42\x4d\x42\xee\x91\xbc\x83\x4a\x7f\x04\xd1\xf1\x08\x71\x39\xef\xe7\x92\x43\x0a\xb6\x68\x52\x90\x56\xf8\xe8\xb3\x04\xac\x03\x34\x5e\x54\x38\xcd\x8c\x3e\x69\xdd\x18\x26\x1e\x5d\x0e\x6b\x7b\x76\x97\xc9\x62\xfd\x2b\x18\x3e\x4a\x0c\x0f\x3a\x8c\x0c\x0f\xa5\x1c\x52\x4a\x5a\x37\x99\x5b\xbb\xa8\x1f\x2e\x0c\x33\x88\x13\x74\xbd\x3d\x1c\x2f\x0d\xf3\xe4\xe0\xe9\xe5\x83\x61\xfc\x6d\x98\x47\xfa\x2f\xbd\x80\x9f\xab\x6d\xd1\x7a\x7c\x43\xe1\x17\x30\xcc\xb2\x14\xda\x7e\x49\x6c\x5a\x9e\x47\x51\x8d\x82\x25\xc1\x30\x3d\x97\x73\x48\x23\x14\x9e\x7b\x40\x47\xb3\xda\x91\xee\xee\x52\x05\xb4\x82\x46\x44\xe8\x12\xa2\x44\xb0\x0f\xff\x64\x62\x68\x45\xae\x64\x47\xd4\xcf\xfa\x0b\x47\x6a\xf6\xfe\x4b\x8d\x6e\x4a\x40\xab\xa8\xa6\x92\x26\x0a\xa1\xfb\x88\xf5\xd8\x16\x8b\x24\x26\x91\xcb\x75\xe6\x3c\x8b\x2a\xe0\xbb\x3f\x0e\x55\xe2\x4a\x7d\xea\x89\x75\x8a\xd3\x89\x4b\x6b\xce\x9d\x57\x55\xb6\x3c\x1f\x34\xf4\x4a\x2b\x4b\xfe\x21\xa1\xd0\xed\x75\xbb\x5d\x42\xb4\x5b\xf6\xd5\x53\xa7\xd0\xfa\xf1\xf6\xe7\xaa\x1a\xe1\x7a\x38\xa6\x67\xe7\xf5\x56\x8c\x4c\xf6\x5a\xff\xdb\x93\xd2\x3e\x77\xd5\x91\xf3\x5a\xcb\x2a\x8b\x69\xeb\x3f\xf9\xb8\xeb\x6f\xfa\xcd\x7d\xf9\xde\xe9\x9f\x6e\x2c\xa9\xa7\xd5\xf3\x3f\x93\xab\x79\x1b\xa8\x47\x3c\x33\xfd\x7a\x86\x37\x12\x57\xf3\x3f\x39\xe9\xea\xd2\x09\x96\xc5\xfd\x80\xbb\x3b\xa1\x76\xbb\xba\x31\xd0\x0b\xb0\xe2\x66\xed\xf9\xdd\x10\xba\x2a\x0e\x51\x57\xc9\x82\x5c\x19\x4b\x48\xeb\x86\x05\xf0\x15\x0c\x53\xbd\xf2\x99\x50\x12\xe8\x53\xf8\xf3\x4a\xa9\x5b\x94\x0d\x17\xbd\x7d\x0c\x16\x42\xdb\x30\x33\x9d\xa5\x2f\xc0\xda\x2c\x50\xd2\xf6\x95\x76\x78\x66\x12\x3e\x64\xcf\x01\x23\x35\x96\xa9\xfb\xed\xb9\xeb\xd3\x79\x64\x45\x1d\x8f\xa3\x1b\xf5\x49\x2b\x09\xc1\x4a\x82\xe6\x81\xff\x0b\x00\x00\xff\xff\xc3\xcb\xeb\x57\x33\x0c\x00\x00")

func makeRulesMkBytes() ([]byte, error) {
	return bindataRead(
		_makeRulesMk,
		"make/rules.mk",
	)
}

func makeRulesMk() (*asset, error) {
	bytes, err := makeRulesMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/rules.mk", size: 3123, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Makefile": makefile,
	"etc/Dockerfile.build.debian": etcDockerfileBuildDebian,
	"make/bootstrap.mk": makeBootstrapMk,
	"make/functions.mk": makeFunctionsMk,
	"make/rules.mk": makeRulesMk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"etc": &bintree{nil, map[string]*bintree{
		"Dockerfile.build.debian": &bintree{etcDockerfileBuildDebian, map[string]*bintree{}},
	}},
	"make": &bintree{nil, map[string]*bintree{
		"bootstrap.mk": &bintree{makeBootstrapMk, map[string]*bintree{}},
		"functions.mk": &bintree{makeFunctionsMk, map[string]*bintree{}},
		"rules.mk": &bintree{makeRulesMk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


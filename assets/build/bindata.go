// Code generated by go-bindata.
// sources:
// etc/build/Makefile
// etc/build/etc/Dockerfile.build.debian
// etc/build/make/bootstrap.mk
// etc/build/make/functions.mk
// etc/build/make/rules.mk
// DO NOT EDIT!

package build

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x50\xbb\x6e\xdb\x40\x10\xec\xef\x2b\x06\xb0\x0a\x11\x30\x25\x20\x65\x80\x18\x30\xe0\xc0\x85\x93\x34\x4e\x7a\x1e\x79\x7b\xd6\x85\xf7\xca\xde\x52\xb1\xff\x3e\x38\x2a\x12\x99\x14\x56\xb9\x3b\xb3\xb3\x33\x73\x83\xef\x07\x57\xe0\x0a\xe4\x40\xa0\x28\xfc\x96\x93\x8b\x82\x64\xe7\x4d\xdf\x7b\x5b\x0e\x08\x7a\x24\x3c\x3f\x3c\xdd\xce\xcb\xe7\x87\x27\x94\x43\x9a\xbc\x41\x4f\x28\x92\x98\x0c\xb4\xa8\x1b\x74\xc5\x8c\x3e\x0d\x5a\x5c\x8a\xdd\x2d\x5e\x28\x12\x6b\x21\x03\x7a\xa5\x61\x12\x17\x5f\xd0\x9d\x24\xdb\x62\x46\x64\xa6\xac\x99\xda\x7e\x72\xde\x74\x3b\x7c\xd5\xf1\x0d\xc6\x59\x4b\x4c\xb1\xea\x1d\x35\x17\xe8\x82\xee\xcb\xfd\xb7\xc7\x1f\xf7\x8f\x9f\x3b\x68\x26\x30\xfd\x9a\x1c\x93\xa9\x76\x5c\xa9\x2c\xa7\x7b\x4f\x65\x06\xe9\x55\x58\x0f\xf3\x2f\xcb\x29\x54\xc7\xd5\x59\xd0\xd1\x59\x2a\xb2\x93\x14\x7c\x07\x2d\x73\x14\x4e\x49\xa0\xa3\x99\x87\xcc\xe9\x27\x0d\x02\x61\x1d\x8b\xd7\xb3\x84\x13\x48\x82\x3e\x35\xe0\xe2\xe0\x27\x53\xe5\xb4\x2c\x8a\x1d\xa6\xf2\x7f\xb2\x05\x93\x94\xfc\x4e\xa9\x73\x2b\xf8\x84\xcd\xb6\x1c\xc8\x7b\xe4\xdf\xa6\x51\xab\xc2\x66\xe8\x3c\x34\xfb\x5d\x31\xa3\x3a\xeb\x9c\xce\x16\x6e\xb3\xaf\x86\xf6\x97\x50\x61\x54\x12\xf2\xbf\x4f\xd6\x6c\x09\x59\x9d\xff\x86\xd1\x38\x46\x9b\xb1\xd9\xae\x6e\x9a\x46\xa9\x55\x80\x8f\x8b\xcf\x21\x85\x50\x2b\x6a\x8f\x58\x11\x3e\xdc\x61\x6f\xe8\xb8\x8f\x93\xf7\x8d\x72\xd6\x90\x5d\xc1\x0a\xc0\x45\x60\xb3\x5d\x80\xe6\x52\x0d\xda\x36\xb3\x8b\xd2\x52\x3c\xe2\x0e\x9b\xed\x19\x68\x1a\x45\xd1\x38\xab\xd4\xdf\xbe\xaf\x46\x7f\x8f\x67\xa7\x38\xd4\xb1\x5c\x23\xf6\x29\x49\x11\xd6\xf9\x1a\x91\x27\x4f\x55\xed\x4f\x00\x00\x00\xff\xff\x24\x9b\xb7\x29\x3c\x03\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 828, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcDockerfileBuildDebian = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x6b\x83\x30\x1c\xc5\xcf\xf3\x53\xfc\x11\xf1\x16\x73\x19\x13\x7a\x73\x35\x73\x32\x4d\x46\xaa\xee\x32\x08\x56\x69\x2a\x8b\xa6\x44\x85\xd2\xd2\xef\x3e\x16\xb7\x95\x42\x8f\xef\xf7\xf2\xf2\xde\xff\x85\xb3\x1c\xbc\x73\xcc\xd6\x6f\x84\x8b\xe7\x32\xcd\x62\x41\xa3\x22\xad\x88\x48\xf3\x28\x21\x17\xc7\x21\xb4\x82\x84\x65\x11\x4d\x44\xcc\x3e\x68\xc6\xa2\x58\x94\x3c\x83\xfd\x34\x1d\xc6\x15\xc6\x52\xab\x7a\x90\x81\x36\x12\xb7\x0a\x4b\xed\x9d\x79\x49\x8b\x34\x27\x22\x61\xa2\x22\x7c\x93\x32\x7a\x09\x54\x37\xcc\x47\x54\xf7\xed\xd3\x63\x30\xd5\x26\x90\x27\xc7\xe1\x25\x85\x66\x36\x0a\xd0\x6e\xdc\x64\xe0\x7a\x77\x6a\x5c\x40\x1a\x7e\x2b\x96\x1c\x7c\x3a\x0f\xbe\x0f\x53\x6d\x00\xad\x01\xcf\xa3\xc1\x4a\x37\xb5\x02\x74\x3c\xed\xee\x3e\x35\xfd\x2d\xfe\xbb\xe9\x3d\x2a\x5e\x01\x4b\x6d\xa5\x15\xde\x02\xf1\xb6\x1b\x56\xd7\x9f\xb1\xd4\x96\x78\x3f\xde\x32\xbb\xff\x6a\x3b\x03\xe8\x60\x47\xdb\xc8\x68\x1a\xf7\xaa\xb6\xdd\xe0\x82\xef\x43\xb3\xef\x75\x0b\x88\x43\x18\x86\xff\xae\xfb\x1d\x00\x00\xff\xff\x64\xa0\x99\x0d\x76\x01\x00\x00")

func etcDockerfileBuildDebianBytes() ([]byte, error) {
	return bindataRead(
		_etcDockerfileBuildDebian,
		"etc/Dockerfile.build.debian",
	)
}

func etcDockerfileBuildDebian() (*asset, error) {
	bytes, err := etcDockerfileBuildDebianBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/Dockerfile.build.debian", size: 374, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeBootstrapMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xdb\x30\x14\x7d\xae\x7f\xc5\xa1\xcd\x83\x0d\xf6\xc6\x9e\x06\x85\x32\xd2\x46\xcb\xcc\xda\x64\x38\x69\xd8\x9b\x2b\x5b\xd7\xf1\xa5\x8e\x94\x49\xb2\xcb\x60\x3f\x7e\x38\x89\x93\xb4\x1d\x7b\x94\x74\xcf\xc7\x3d\x47\x57\xe8\xa4\x65\x59\x34\xe4\x50\x10\xeb\x35\x58\x97\x4d\xab\x48\xa1\xb2\x66\x03\x5f\x13\x9e\x36\x52\x73\x45\xce\x7f\xd8\x3c\x3f\x05\xf7\xe3\xd9\xf4\x71\x3c\x15\xf8\x72\x13\x64\x8f\xb3\x65\xfa\x20\xf2\xf9\xe2\xfc\x34\x1b\x2f\xd3\x95\xc8\x57\x22\x5b\xa4\xf3\xd9\xf9\xcb\x74\x7e\x7e\x1b\x5c\xc1\x6c\x3d\x1b\x2d\x9b\x93\x8b\x60\x92\xa5\x2b\x91\xe5\x13\xb1\xca\x7f\x64\xe2\x6b\xfa\x13\xd7\x37\x50\xd4\x0d\x0f\x27\x02\x8c\xc2\x77\xc3\x51\x32\x0a\x5d\x4d\x4d\x83\x35\x7b\x58\xea\x92\xad\xb4\x8e\xf0\x4d\x8c\x27\xf8\x83\xb2\xf5\x48\xca\x4f\xc9\xe7\x28\x08\x26\xf3\xbb\xef\x22\xcb\xd3\x87\xfd\x32\x28\x8a\xa6\x72\xf5\xc7\x51\x38\x6c\x18\x25\xca\x72\x47\xf6\xd5\xe4\xa0\x2f\x26\x7b\x07\xa5\x6c\x1a\x90\x2b\xe5\x96\x72\x65\xca\x67\xb2\xb9\x97\xeb\x78\x14\x9e\x83\xa2\xeb\xa3\xd5\x03\x3c\x8a\x06\xd6\xdb\xc7\xf4\x7e\x32\x64\x76\x34\xf3\x06\x9f\x14\x2d\x37\xea\x35\xe4\x40\xf8\x7f\x48\xf2\xc2\xbe\x4e\xd6\xa6\x0f\x5b\x51\xc5\x9a\x14\x0a\xaa\x65\xc7\xa6\xb5\xa8\x8c\xc5\x6e\xcc\x81\xb5\x63\x45\xf0\x56\x76\xec\x92\x92\x03\xae\x34\xfd\x42\x38\x0a\x8d\xe5\x35\x6b\xdc\xa5\x51\x8c\x56\x1f\x48\xa2\x00\x00\xae\xc0\x15\x5e\x08\xd2\xd2\x40\x70\x97\xc6\xe8\xc8\x16\xc6\x11\xd8\x81\x74\xdf\xaa\x42\xf1\xbb\x97\x97\x6d\xe3\x83\x8b\x95\xc8\x6e\xe7\x0b\xd1\xf7\xea\x6d\x4b\x01\x69\xc5\x55\x6f\x90\x2b\x2c\xb3\xf1\x2a\x5d\xe4\xcb\xf1\xf4\x68\xf7\x4d\xef\xec\x60\x3a\xb2\x96\x15\xa9\x93\xc9\x13\x2e\x8a\xb1\x37\xf7\x06\x77\xdd\x27\x74\x36\xf6\x4a\xf6\xb0\x83\x36\x1e\xac\xd1\x17\xb8\xfb\xf9\xdb\xd6\xd5\xbd\xa0\x62\xb7\x5b\x23\xe0\x6a\x2f\x57\xb1\x75\xfe\xc5\x58\x85\x51\xe8\xda\xc2\x79\x24\x31\xe2\xf7\x25\x47\xf1\x3f\x3f\x69\x14\x5c\xf4\xd4\x03\x2d\x6e\x70\xb9\x93\x3a\x5e\xf4\xc5\x28\xea\xa8\x31\xdb\x0d\x69\xdf\x27\xea\xd8\x68\x77\xb9\x77\xfd\x37\x00\x00\xff\xff\x2b\x2b\x66\x5c\xb6\x03\x00\x00")

func makeBootstrapMkBytes() ([]byte, error) {
	return bindataRead(
		_makeBootstrapMk,
		"make/bootstrap.mk",
	)
}

func makeBootstrapMk() (*asset, error) {
	bytes, err := makeBootstrapMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/bootstrap.mk", size: 950, mode: os.FileMode(420), modTime: time.Unix(1488107348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeFunctionsMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x4d\x0e\x82\x30\x10\xc5\xf1\x7d\x4f\xf1\x12\x58\x40\xd2\x2e\xdc\x72\x19\x32\xb4\x83\x12\xcb\x8c\xe9\x47\xbc\xbe\x51\x51\x49\x70\x3b\x79\xf9\xff\xa6\x01\x67\x4f\x37\x1e\x83\xfa\x2b\xa7\xb1\xd0\x79\xbb\xc0\x6b\x54\x81\xbf\x50\x42\x51\x50\x8c\x7a\x47\xcd\x0c\xc2\x7b\x8b\xe7\x96\x32\x52\x8d\x6c\x02\xcf\x8b\xf0\x31\x66\xda\x2e\xd7\x29\x17\x0c\xd6\x39\xdb\x76\xa7\xbe\x37\x2c\x81\x67\x63\x1a\x54\x39\xe2\x24\x5b\x24\xec\x99\xa2\x98\xf8\xa5\x2f\xf2\x7b\xc0\xeb\xba\x92\x84\x0f\xfe\x27\xf7\xe5\x9d\xb3\xc3\x9e\x7f\x04\x00\x00\xff\xff\xff\x00\xb3\xb9\xf8\x00\x00\x00")

func makeFunctionsMkBytes() ([]byte, error) {
	return bindataRead(
		_makeFunctionsMk,
		"make/functions.mk",
	)
}

func makeFunctionsMk() (*asset, error) {
	bytes, err := makeFunctionsMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/functions.mk", size: 248, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeRulesMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x5b\x6f\xdb\x46\x13\x7d\xd6\xfe\x8a\x81\x42\x21\x5c\xc4\x94\xbe\x20\x6f\xf2\xa7\xda\x4a\xc4\xc8\x42\x75\x31\x74\x71\x5b\xc4\x05\x41\x93\x43\x69\x61\x5e\x64\xee\x52\x71\xd1\xf6\xbf\x17\xbb\xcb\xab\x2d\xb3\x79\xea\x93\xa8\xe1\x99\xcb\xce\x39\x33\xdc\xcf\xbb\xd9\x7c\xe2\xcc\x26\x30\x1c\x81\x61\xf2\x03\x86\x21\xf8\xae\x40\xf8\xd0\xed\x45\x56\xcf\xb7\x7a\xbf\x39\xbd\x1b\xa7\xb7\x70\x7a\x9b\x2e\x25\x1a\x7e\x3b\xde\xde\x68\x87\x30\xf1\x5c\xc1\x92\x98\x0e\x1e\x32\x16\xfa\x84\xbc\x03\x3f\xf1\x1e\x31\x85\x34\x8b\x05\x8b\x10\xbc\x24\x8a\xdc\xd8\xe7\x64\xb2\xfa\xf2\xb3\xbd\x76\xbe\x2c\x26\x70\x35\xca\x51\x85\x51\x85\x95\x66\xc3\xac\x60\x14\x74\xcc\xdc\xb2\xde\x2d\x5f\x23\xd2\x2c\x06\xcb\x4a\x23\xb0\x44\x81\xdb\x8e\xa7\xaf\x71\xc2\xdd\x17\xef\x6f\x77\x9b\x9b\xd7\x80\x63\xc6\x0f\x24\x3f\xde\xdd\x6a\xbe\x5b\xd8\xce\x76\xbc\x9e\xda\x5b\x09\x1d\x24\x47\x31\xf0\x53\x76\xc2\x74\xc0\x53\x6f\xd0\xc4\xa9\x6e\x5c\x35\xba\x41\x8a\x64\x5f\x67\x73\xdb\x29\x33\xcd\x16\xe3\xa9\xed\xdc\xd9\xeb\xcd\x6c\xb5\xb4\x27\xf4\x85\xd7\x60\xa2\x9a\x12\xb0\x10\xcf\xfb\xeb\xb4\x93\xf5\xec\xae\x08\x96\x87\xe0\xfe\x63\x15\x05\x85\x57\x8b\xd4\x57\x4d\xec\x1b\xe6\x7a\xb7\xdc\xce\x16\xb6\xb3\xda\xd0\xb6\xe8\xcb\xf1\x76\x76\x67\x37\xa2\x9f\x2b\xb0\x5f\xf2\x1d\x32\x2e\x20\x09\x80\x45\xee\x1e\x39\x88\x24\xa7\x2d\x57\x96\x8c\x33\x6a\xcd\xd1\x7a\xbc\x37\x7b\x27\x53\xef\x93\xd0\x8d\xf7\xaf\xa5\x36\x5d\x29\x99\x8d\x60\x9f\xc8\xe7\xad\xbd\xd9\x82\x3c\x88\xb6\x53\x10\xc8\x05\x58\x27\xf9\x6e\x3e\xf9\x3a\x1f\x4f\x37\x30\x02\xeb\x57\x88\x5c\x16\xf7\x4f\x98\x72\x96\xc4\xb2\x66\x5d\x49\x9e\x93\x96\x08\x75\xbe\x91\x61\x16\xb3\xa3\x6a\x51\x46\xc0\xf8\xc4\xd2\x24\xc2\x58\xc0\xc9\x4d\x99\xfb\x10\x22\xcf\x3b\xb1\xdb\xd8\x6b\xd9\xcf\x87\x87\x30\xe0\x87\xc2\x38\xcb\x65\xaf\x27\x8f\xf9\x60\x65\x60\x98\x12\x4b\x8b\x69\x1b\xaf\xa7\x1b\xb8\x1a\x91\x46\xef\xf2\x31\x2a\xdb\xb3\xde\x2d\x29\xdc\x93\x8e\x72\xaf\x12\xd2\x61\xf9\x6f\x36\xd1\x80\x53\x09\xa8\xe9\xb7\xc2\x35\xc4\xaf\x3c\xda\xc8\x2b\x46\x26\x6f\xd5\x7f\x58\x95\xf2\x98\xae\x34\x6c\xb0\x4f\xce\x54\xda\x50\x92\xe4\x88\x05\x70\x67\xaf\x3f\xaf\x36\x36\x30\x0e\x59\xcc\x51\x14\xeb\x4a\xd3\xc7\x38\xe0\x33\x7a\x99\x40\x1f\x58\x0c\x4f\x19\x13\x08\x51\xe2\x23\x61\x01\x3e\x81\x69\x98\x49\xca\xf6\x2c\x2e\xc2\xd0\x0b\xc8\x62\x1f\x03\x16\xa3\x4f\x49\xa7\xc6\xd7\x87\x11\x58\x4f\x04\x63\x9f\x05\x84\x8c\xe7\xf3\xd5\x2f\xf6\xc4\x99\x2d\x1d\x5d\xa0\x1c\x3c\x18\xc9\x92\xe7\xe3\xe5\x74\x37\x9e\xda\xf2\xb9\x98\xd0\xbc\xc3\xb9\xee\xa0\x30\x4f\x57\xa5\xe9\xbe\xc8\xa5\x44\x55\x49\xa9\xb6\x9e\xef\x49\xa7\x3e\x39\x70\x7e\x8c\xe0\x4d\x6a\x65\xbf\x04\xa6\x11\x78\x49\x98\xa4\x1c\x0e\x18\x1e\x31\xe5\xc4\xf3\x52\xf4\x47\x70\x8f\xdf\xfe\x77\xf9\xe9\x63\x44\x3c\xef\x0f\x0c\xc3\xe4\x7b\x61\xfa\x14\x29\x08\x47\xa1\x2d\x91\x0c\xf4\x1d\x01\x9f\x8f\x49\x2a\x40\x1c\xb0\x9c\x0c\xb9\x2b\x5c\xe9\x2b\xc7\x86\x67\x0f\x5c\x5c\x80\xfa\x61\x22\x13\x58\x40\xb9\x64\x42\x1c\x90\xbc\x83\x6a\xfd\x70\xa2\xe3\x11\xe2\x86\xe1\x30\xdf\x38\xa4\x50\x8b\x16\x05\xe9\x44\x8f\x3e\x4b\xc1\x3a\x42\xe3\x45\x85\xd3\xca\x18\x92\xce\xb5\x61\xe2\xc9\x0d\x61\x6b\x2f\x6e\xd5\x56\xac\x7f\x0e\xa3\x47\x81\xd1\x51\x87\x11\xd1\xb1\xdc\x86\x94\x92\xce\xb5\x72\xeb\x16\xf5\xc3\x7b\xc3\x0c\x92\x14\x5d\xef\x00\xa7\x0b\xc3\x3c\x4b\x3c\xbd\xb8\x37\x8c\x3f\x0d\xf3\x44\xff\xa6\xef\xe1\xff\xd5\xb4\xe8\x75\x7c\x4d\xe1\x27\x30\xcc\xb2\x14\xda\x7d\x29\x6c\x5a\x9e\x47\x4a\x8d\x82\x25\xc0\x30\x3d\x37\x0c\x21\x8b\x91\x7b\xee\x11\x1d\xad\x6a\x47\xb8\xfb\x0b\x19\xd0\x0a\x1a\x11\xa1\x4f\x88\xdc\x81\x43\xf8\x4b\xed\x42\x2b\x76\x05\x3b\xa1\x7e\xd6\xdf\x39\x52\xb3\x0f\x5f\xae\xe8\xe6\x0a\xe8\x14\xd5\x54\xab\x89\x42\xe4\x3e\x62\x3d\xb6\xc5\x62\x81\x69\xec\x86\x3a\x73\x9e\x45\x16\xd0\xe0\xa6\x35\x53\xeb\x97\xa2\x2a\xa3\xda\x45\xf5\x32\x74\xc2\xf3\x65\x94\xd6\x5c\x49\xaf\x6a\xee\x78\x3e\x68\xe8\xa5\xde\x33\xf9\x57\x85\x42\x7f\xd0\xef\xf7\x09\x51\x6e\xf2\x34\x75\xff\xfc\x8f\x76\x6c\xf9\x92\x55\xf4\x6e\xc7\x53\xda\xca\xe5\x5b\x31\xd4\x4a\xec\xfc\xb0\x27\xa5\xc3\xd0\x95\x0d\xc8\x2b\xaf\x11\xfd\xa3\x64\xb4\xd0\x7e\xbe\x87\xa4\xde\x8d\x7f\x25\xbe\x79\x0b\xa8\x47\x6c\x21\xba\x9e\xe1\x8d\xc4\x15\xd5\x67\x49\xad\xae\x9d\x60\x59\xa1\x1f\x84\xee\x9e\xcb\xa1\xae\x6e\x0a\xf4\x3d\x58\x49\xb3\xf6\xfc\x6a\x08\x7d\x19\x87\xc8\x9b\x64\xa1\x23\x75\x27\x22\x9d\x6b\x16\xc0\x37\x30\x4c\xf9\xca\x67\x5c\xee\x3e\x9f\xc2\xef\x97\x72\xad\xc5\x8a\x39\xf4\x0e\x09\x58\x08\x5d\xc3\x54\x0b\x96\xbe\x00\x6b\x33\x47\x41\xbb\x97\xda\xe1\x99\x09\xf8\xa8\x9e\x03\x46\x6a\x12\x92\xd7\xdb\xb6\x6b\x53\x3b\xb2\xd2\x85\x17\xa2\x1b\x0f\x49\x47\xde\xad\xd3\xa0\x79\xe0\x7f\x02\x00\x00\xff\xff\x0c\x76\x9e\xd0\x35\x0c\x00\x00")

func makeRulesMkBytes() ([]byte, error) {
	return bindataRead(
		_makeRulesMk,
		"make/rules.mk",
	)
}

func makeRulesMk() (*asset, error) {
	bytes, err := makeRulesMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/rules.mk", size: 3125, mode: os.FileMode(420), modTime: time.Unix(1488135751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Makefile": makefile,
	"etc/Dockerfile.build.debian": etcDockerfileBuildDebian,
	"make/bootstrap.mk": makeBootstrapMk,
	"make/functions.mk": makeFunctionsMk,
	"make/rules.mk": makeRulesMk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"etc": &bintree{nil, map[string]*bintree{
		"Dockerfile.build.debian": &bintree{etcDockerfileBuildDebian, map[string]*bintree{}},
	}},
	"make": &bintree{nil, map[string]*bintree{
		"bootstrap.mk": &bintree{makeBootstrapMk, map[string]*bintree{}},
		"functions.mk": &bintree{makeFunctionsMk, map[string]*bintree{}},
		"rules.mk": &bintree{makeRulesMk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


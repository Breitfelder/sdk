// Code generated by go-bindata.
// sources:
// etc/build/Makefile
// etc/build/etc/build/Dockerfile.build.alpine.tpl
// etc/build/etc/build/Dockerfile.build.debian.tpl
// etc/build/etc/run.sh
// etc/build/make/bootstrap.mk
// etc/build/make/functions.mk
// etc/build/make/rules.mk
// DO NOT EDIT!

package build

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x50\x3d\x6f\xdb\x30\x14\xdc\xf9\x2b\x0e\x88\x07\x0b\x88\x6d\xa0\x63\x81\x04\x08\x90\x22\x43\xda\x2e\x69\x77\x3d\x89\x8f\x31\x2b\x7e\xa8\xe4\xa3\x9b\xfc\xfb\x42\x74\x65\xa9\x1d\xea\xf1\x78\xc7\x7b\x77\x77\x83\x6f\x47\x9b\x61\x33\xe4\xc8\xe0\x20\xe9\x7d\x8c\x36\x08\xa2\xa9\x2f\x5d\xe7\x4c\x3e\xc2\xd3\xc0\x78\x79\x7c\xbe\xad\x8f\x2f\x8f\xcf\xc8\xc7\x58\x9c\x46\xc7\xc8\x12\x13\x6b\x90\xa8\x1b\xb4\x59\x0f\x2e\xf6\x24\x36\x86\xf6\x16\xaf\x1c\x38\x91\xb0\x06\xbf\x71\x5f\xc4\x86\x57\xb4\x67\xcb\x5d\xd6\x03\xc6\xc4\x23\x25\xde\x75\xc5\x3a\xdd\xee\xf1\x85\xc2\x3b\xb4\x35\x86\x13\x87\xc9\xef\x44\x29\x83\x32\xda\xcf\x0f\x5f\x9f\xbe\x3f\x3c\x7d\x6a\x41\x89\x91\xf8\x67\xb1\x89\xf5\x14\xc7\xe6\x49\x65\xa9\x73\x9c\x2b\xc9\x6f\x92\xa8\xaf\xb7\x4c\x8a\x7e\x4a\x3c\x25\xf3\x14\xac\xe1\x2c\x7b\x89\xde\xb5\x20\xa9\x55\x52\x8c\x02\x0a\xba\x82\x31\xc5\x1f\xdc\x0b\x24\x51\xc8\x8e\xaa\x85\x15\x48\x04\x9d\x17\xb0\xa1\x77\x45\x4f\x76\x24\x8b\x63\x8b\x92\xff\x6d\xb6\x70\x12\xa3\xdb\x2b\x35\xaf\x82\x3b\x6c\xb6\xf9\xc8\xce\x61\xfc\xa5\x1b\xb5\x1a\xac\x52\x33\x68\x0e\xfb\xac\x07\x35\xfb\x9c\xbf\x2d\xda\xe6\x30\x05\x3a\x5c\x4a\xf9\x41\x89\x1f\xff\x3e\xb2\x56\x8b\x1f\xd5\x7c\xd7\x0f\xda\x26\xec\x46\x6c\xb6\xab\x3f\x4d\xa3\xd4\xaa\xc0\xc7\x25\x67\x1f\xbd\x9f\x26\xda\x9d\xb0\x12\x7c\xb8\xc7\x41\xf3\xe9\x10\x8a\x73\x8d\xb2\x46\xb3\x59\xd1\x0a\xc0\xc5\x60\xb3\x5d\x88\xe6\x32\x0d\xee\xb1\xd9\xce\xa0\x69\x14\x07\x6d\x8d\x52\x7f\x36\xbe\x5a\xf7\x7f\x3a\x53\x42\x3f\xc1\x7c\x4d\xd8\xc5\x28\x59\x12\x8d\xd7\x84\xa9\x38\xae\x6e\x95\x22\xcd\x1a\x77\x90\x54\xf8\x77\x00\x00\x00\xff\xff\x9c\xaf\x60\x24\x41\x03\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 833, mode: os.FileMode(420), modTime: time.Unix(1488403243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcBuildDockerfileBuildAlpineTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x4f\xdb\x30\x14\x7d\x26\xbf\xe2\x2a\x8b\xd0\x36\xc9\x31\x14\xd6\x50\xa4\x3d\x04\x9a\x75\xd5\x20\x41\x21\xe5\x69\x52\xe4\xd8\xce\x87\xea\xc4\x99\xed\x40\x07\xe2\xbf\x4f\x49\x4a\x4b\x25\xb4\x27\xe7\xde\x73\xee\xb9\xf6\x39\xf9\x11\x47\xb7\xe0\xbc\xcc\xa3\xeb\x5f\x41\x9c\x5e\xad\x96\x37\xf3\x34\xf4\x93\xe5\x43\x90\x2e\x6f\xfd\x45\xf0\x6a\x59\x41\xf8\x00\x8b\xe8\xc6\x0f\x17\xe9\x7d\x7c\x9d\xae\xe2\x1b\x28\x8d\x69\xf5\x25\xc6\x85\x14\xa4\x29\x5c\xa9\x0a\xcc\x04\x2e\xa4\xf3\x12\xaf\xc2\x64\x79\x1b\xa4\x8b\x28\x7d\x08\xe2\xfb\x65\x14\xbe\xba\x5a\x51\xd7\x10\xe5\x16\xcf\x96\xf5\x09\x72\x25\xeb\xbd\x40\x65\xca\x2e\x73\xa9\xac\x31\x93\x74\xcd\x15\x12\x55\xa6\x88\xfa\xbb\x95\xc6\x99\x90\x19\xae\x89\x36\x5c\xe1\x53\xf7\x02\x13\xd1\x56\x0d\xc7\xf3\x81\x9c\x57\x82\x5b\x96\x3f\x9f\xef\xf4\x14\x79\x72\x47\xcd\x4e\x73\x45\x65\x63\x78\x63\xfe\x23\x7f\x7a\x36\xa1\xcc\x3b\xf1\xa6\x17\xfc\x2c\xa3\x93\xe9\x6c\x76\x32\xe1\xe7\xd4\xcb\xbe\x79\xb3\xc9\xc9\x59\x3e\x9d\x32\x3a\xcb\xa7\xe7\xef\x77\x37\x12\xb5\x15\x75\x5b\x62\x68\x09\xd8\xb2\xe2\x55\x08\x9a\x1b\x40\x7c\x03\xbf\xad\xa3\xe3\x63\x20\xed\x1a\x08\x63\x80\x50\x23\x11\x25\xb4\xe4\x80\xd0\x63\xa5\x4c\x47\x04\xb8\x59\x57\x09\x86\x18\x6f\x75\x4f\x3f\xca\x88\x2e\x87\x8f\x82\xd2\xe1\xac\x3b\x2d\x10\xe3\x8f\x43\x21\x5b\xde\x68\x2d\x46\x82\xec\x8f\x71\x05\xdf\xb4\x52\x19\x58\x44\x71\x14\x25\xe9\x55\x14\x25\xf7\x49\xec\xdf\x7d\xb7\x9d\xcf\x85\x04\xde\x3c\x6e\xa1\x2f\xf6\x7e\xe6\xa9\xe8\x6f\xf9\x07\x6c\xe7\x30\x4e\x1b\x50\x04\xdb\x28\xc7\x9c\xb6\xef\x30\x44\x01\xba\x06\xdc\x69\x85\x85\xa4\x44\x00\xda\x3c\xe7\x1f\x52\x55\xfd\x61\x9b\xb2\x77\xd3\xb8\x90\x58\x2b\xba\x85\x46\xff\x50\x3b\x01\x54\xc1\xa1\xa9\x23\xc1\xc5\x35\x59\x73\xf7\xcd\x9f\xdd\x1e\xa4\x72\xc0\x5f\x0f\xa8\xbd\xe1\x8c\x1f\x78\xfb\xf6\xdf\xde\xf9\xc9\x4f\xc0\x85\x1c\xca\xa1\x70\xc6\x26\xce\xaa\xe6\xf2\xf0\x72\x7d\xc7\xe9\xb1\x31\xd4\x7a\xcd\x2a\x05\xa8\x1d\x0c\x1b\x46\xb4\xa2\xf6\xbe\xca\xaa\xc6\x86\xfe\x91\x65\x2d\x19\xa0\x18\x3c\xcf\xdb\xa1\xf6\xbf\x00\x00\x00\xff\xff\xbb\xef\xcb\x99\x5a\x03\x00\x00")

func etcBuildDockerfileBuildAlpineTplBytes() ([]byte, error) {
	return bindataRead(
		_etcBuildDockerfileBuildAlpineTpl,
		"etc/build/Dockerfile.build.alpine.tpl",
	)
}

func etcBuildDockerfileBuildAlpineTpl() (*asset, error) {
	bytes, err := etcBuildDockerfileBuildAlpineTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/build/Dockerfile.build.alpine.tpl", size: 858, mode: os.FileMode(420), modTime: time.Unix(1488402688, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcBuildDockerfileBuildDebianTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x6b\x83\x30\x1c\xc5\xcf\xf3\x53\xfc\x11\xf1\x16\x73\x19\x13\x7a\x73\x35\x73\x32\x4d\x46\xaa\xee\x32\x08\x56\x69\x2a\x8b\xa6\x44\x85\xd2\xd2\xef\x3e\x16\xb7\x95\x42\x8f\xef\xf7\xf2\xf2\xde\xff\x85\xb3\x1c\xbc\x73\xcc\xd6\x6f\x84\x8b\xe7\x32\xcd\x62\x41\xa3\x22\xad\x88\x48\xf3\x28\x21\x17\xc7\x21\xb4\x82\x84\x65\x11\x4d\x44\xcc\x3e\x68\xc6\xa2\x58\x94\x3c\x83\xfd\x34\x1d\xc6\x15\xc6\x52\xab\x7a\x90\x81\x36\x12\xb7\x0a\x4b\xed\x9d\x79\x49\x8b\x34\x27\x22\x61\xa2\x22\x7c\x93\x32\x7a\x09\x54\x37\xcc\x47\x54\xf7\xed\xd3\x63\x30\xd5\x26\x90\x27\xc7\xe1\x25\x85\x66\x36\x0a\xd0\x6e\xdc\x64\xe0\x7a\x77\x6a\x5c\x40\x1a\x7e\x2b\x96\x1c\x7c\x3a\x0f\xbe\x0f\x53\x6d\x00\xad\x01\xcf\xa3\xc1\x4a\x37\xb5\x02\x74\x3c\xed\xee\x3e\x35\xfd\x2d\xfe\xbb\xe9\x3d\x2a\x5e\x01\x4b\x6d\xa5\x15\xde\x02\xf1\xb6\x1b\x56\xd7\x9f\xb1\xd4\x96\x78\x3f\xde\x32\xbb\xff\x6a\x3b\x03\xe8\x60\x47\xdb\xc8\x68\x1a\xf7\xaa\xb6\xdd\xe0\x82\xef\x43\xb3\xef\x75\x0b\x88\x43\x18\x86\xff\xae\xfb\x1d\x00\x00\xff\xff\x64\xa0\x99\x0d\x76\x01\x00\x00")

func etcBuildDockerfileBuildDebianTplBytes() ([]byte, error) {
	return bindataRead(
		_etcBuildDockerfileBuildDebianTpl,
		"etc/build/Dockerfile.build.debian.tpl",
	)
}

func etcBuildDockerfileBuildDebianTpl() (*asset, error) {
	bytes, err := etcBuildDockerfileBuildDebianTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/build/Dockerfile.build.debian.tpl", size: 374, mode: os.FileMode(420), modTime: time.Unix(1488402688, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcRunSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x4b\xc3\x40\x10\x46\xef\xf3\x2b\x3e\xe3\xe0\x1e\xa4\x74\x6b\x8e\x65\xb5\x0a\x4b\x11\x62\x16\x62\xc9\x65\xbb\xd0\x6d\xdd\x9a\x45\xb3\x85\x9a\x83\x42\x7f\xbc\x68\x13\x48\x8f\xf3\x98\x99\xf7\xae\xaf\xa6\xdb\x98\xa6\x5b\xff\xd5\xd0\x9b\x3f\x7e\xec\x7e\x7c\x52\x62\x2d\xf3\xdc\xca\x79\x3e\x6b\x05\xa5\xc3\xb1\xf5\x9f\x8a\xc5\x3a\x58\xd9\x0a\xa2\xb8\x87\x05\xeb\xb2\x7e\xae\x4c\xf9\xa2\xcb\x15\xdc\x1c\x5d\x13\x12\x01\xc0\x88\xab\xcc\x8e\xd7\x5c\x46\xfb\x48\x14\x76\xcd\x01\x93\x00\x1e\x74\xb7\x97\xcf\x78\xc1\x67\x25\x51\x61\x96\x6a\xc3\x0b\xdc\xdd\xdf\xcc\x36\x54\xe9\x55\xfd\x58\x28\x7e\xe8\x0b\xce\x33\x26\xef\x1d\x24\x1c\x4e\xa7\x3f\x58\xeb\xea\xc9\xbc\x6a\x38\x8c\x9a\xfe\x95\x19\x17\x66\xd9\x27\x7c\xc7\x6e\xb8\xff\x0d\x00\x00\xff\xff\x3a\xd1\x31\xa2\x01\x01\x00\x00")

func etcRunShBytes() ([]byte, error) {
	return bindataRead(
		_etcRunSh,
		"etc/run.sh",
	)
}

func etcRunSh() (*asset, error) {
	bytes, err := etcRunShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/run.sh", size: 257, mode: os.FileMode(493), modTime: time.Unix(1488402688, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeBootstrapMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xdb\x30\x14\x7d\xae\x7f\xc5\xa1\xcd\x83\x0d\xf6\xc6\x9e\x06\x85\x32\xd2\x46\xcb\xcc\xda\x64\x38\x69\xd8\x9b\x2b\x5b\xd7\xf1\xa5\x8e\x94\x49\xb2\xcb\x60\x3f\x7e\x38\x89\x93\xb4\x1d\x7b\x94\x74\xcf\xc7\x3d\x47\x57\xe8\xa4\x65\x59\x34\xe4\x50\x10\xeb\x35\x58\x97\x4d\xab\x48\xa1\xb2\x66\x03\x5f\x13\x9e\x36\x52\x73\x45\xce\x7f\xd8\x3c\x3f\x05\xf7\xe3\xd9\xf4\x71\x3c\x15\xf8\x72\x13\x64\x8f\xb3\x65\xfa\x20\xf2\xf9\xe2\xfc\x34\x1b\x2f\xd3\x95\xc8\x57\x22\x5b\xa4\xf3\xd9\xf9\xcb\x74\x7e\x7e\x1b\x5c\xc1\x6c\x3d\x1b\x2d\x9b\x93\x8b\x60\x92\xa5\x2b\x91\xe5\x13\xb1\xca\x7f\x64\xe2\x6b\xfa\x13\xd7\x37\x50\xd4\x0d\x0f\x27\x02\x8c\xc2\x77\xc3\x51\x32\x0a\x5d\x4d\x4d\x83\x35\x7b\x58\xea\x92\xad\xb4\x8e\xf0\x4d\x8c\x27\xf8\x83\xb2\xf5\x48\xca\x4f\xc9\xe7\x28\x08\x26\xf3\xbb\xef\x22\xcb\xd3\x87\xfd\x32\x28\x8a\xa6\x72\xf5\xc7\x51\x38\x6c\x18\x25\xca\x72\x47\xf6\xd5\xe4\xa0\x2f\x26\x7b\x07\xa5\x6c\x1a\x90\x2b\xe5\x96\x72\x65\xca\x67\xb2\xb9\x97\xeb\x78\x14\x9e\x83\xa2\xeb\xa3\xd5\x03\x3c\x8a\x06\xd6\xdb\xc7\xf4\x7e\x32\x64\x76\x34\xf3\x06\x9f\x14\x2d\x37\xea\x35\xe4\x40\xf8\x7f\x48\xf2\xc2\xbe\x4e\xd6\xa6\x0f\x5b\x51\xc5\x9a\x14\x0a\xaa\x65\xc7\xa6\xb5\xa8\x8c\xc5\x6e\xcc\x81\xb5\x63\x45\xf0\x56\x76\xec\x92\x92\x03\xae\x34\xfd\x42\x38\x0a\x8d\xe5\x35\x6b\xdc\xa5\x51\x8c\x56\x1f\x48\xa2\x00\x00\xae\xc0\x15\x5e\x08\xd2\xd2\x40\x70\x97\xc6\xe8\xc8\x16\xc6\x11\xd8\x81\x74\xdf\xaa\x42\xf1\xbb\x97\x97\x6d\xe3\x83\x8b\x95\xc8\x6e\xe7\x0b\xd1\xf7\xea\x6d\x4b\x01\x69\xc5\x55\x6f\x90\x2b\x2c\xb3\xf1\x2a\x5d\xe4\xcb\xf1\xf4\x68\xf7\x4d\xef\xec\x60\x3a\xb2\x96\x15\xa9\x93\xc9\x13\x2e\x8a\xb1\x37\xf7\x06\x77\xdd\x27\x74\x36\xf6\x4a\xf6\xb0\x83\x36\x1e\xac\xd1\x17\xb8\xfb\xf9\xdb\xd6\xd5\xbd\xa0\x62\xb7\x5b\x23\xe0\x6a\x2f\x57\xb1\x75\xfe\xc5\x58\x85\x51\xe8\xda\xc2\x79\x24\x31\xe2\xf7\x25\x47\xf1\x3f\x3f\x69\x14\x5c\xf4\xd4\x03\x2d\x6e\x70\xb9\x93\x3a\x5e\xf4\xc5\x28\xea\xa8\x31\xdb\x0d\x69\xdf\x27\xea\xd8\x68\x77\xb9\x77\xfd\x37\x00\x00\xff\xff\x2b\x2b\x66\x5c\xb6\x03\x00\x00")

func makeBootstrapMkBytes() ([]byte, error) {
	return bindataRead(
		_makeBootstrapMk,
		"make/bootstrap.mk",
	)
}

func makeBootstrapMk() (*asset, error) {
	bytes, err := makeBootstrapMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/bootstrap.mk", size: 950, mode: os.FileMode(420), modTime: time.Unix(1488402688, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeFunctionsMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x4d\x0e\x82\x30\x10\xc5\xf1\x7d\x4f\xf1\x12\x58\x40\xd2\x2e\xdc\x72\x19\x32\xb4\x83\x12\xcb\x8c\xe9\x47\xbc\xbe\x51\x51\x49\x70\x3b\x79\xf9\xff\xa6\x01\x67\x4f\x37\x1e\x83\xfa\x2b\xa7\xb1\xd0\x79\xbb\xc0\x6b\x54\x81\xbf\x50\x42\x51\x50\x8c\x7a\x47\xcd\x0c\xc2\x7b\x8b\xe7\x96\x32\x52\x8d\x6c\x02\xcf\x8b\xf0\x31\x66\xda\x2e\xd7\x29\x17\x0c\xd6\x39\xdb\x76\xa7\xbe\x37\x2c\x81\x67\x63\x1a\x54\x39\xe2\x24\x5b\x24\xec\x99\xa2\x98\xf8\xa5\x2f\xf2\x7b\xc0\xeb\xba\x92\x84\x0f\xfe\x27\xf7\xe5\x9d\xb3\xc3\x9e\x7f\x04\x00\x00\xff\xff\xff\x00\xb3\xb9\xf8\x00\x00\x00")

func makeFunctionsMkBytes() ([]byte, error) {
	return bindataRead(
		_makeFunctionsMk,
		"make/functions.mk",
	)
}

func makeFunctionsMk() (*asset, error) {
	bytes, err := makeFunctionsMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/functions.mk", size: 248, mode: os.FileMode(420), modTime: time.Unix(1488402688, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeRulesMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5b\x8f\xe2\x36\x14\x7e\xc6\xbf\xe2\x88\x0d\xda\x58\x3b\x01\xf5\x95\x2d\x1d\xd8\x25\xcb\x44\xe5\x32\xe2\x32\x6d\xd5\xa9\xa2\x40\x1c\xb0\x48\x1c\xc6\x71\xb2\x5b\xb5\xfd\xef\x95\x63\xe7\x36\x5c\x66\xfb\xd2\xa7\x09\xc7\xdf\xb9\x9f\xf3\xd9\xf3\x69\xe3\x4c\xc7\xae\x33\x86\xfe\x00\x0c\x33\x39\x90\x30\x04\xdf\x13\x04\x3e\xb4\x3b\x91\xd5\xf1\xad\xce\x6f\x6e\xe7\xc1\xed\xcc\xdc\xce\xaa\x8d\x91\x82\x3f\x8e\xd6\x0f\x4a\x21\x8c\x77\x9e\xa0\x31\xc3\xbd\x6d\x4a\x43\x1f\xa1\xe5\x66\xae\x4d\xf9\xc7\xea\x90\x88\x5d\x8f\xa7\xac\x9b\x1c\x24\xc0\x7d\xb2\x97\x9f\x16\x2b\x5b\x02\xf5\xe7\xe0\x07\x30\xcc\xe5\x66\x8e\x11\x7a\x07\x7e\xbc\x3b\x12\x0e\x3c\x65\x82\x46\x04\x76\x71\x14\x79\xcc\x4f\xd0\x78\xf1\xf9\x67\x7b\xe9\x7e\x9e\x8d\xe1\x7e\xa0\x51\x85\x30\x0f\x4c\x8a\x0d\xb3\x82\x61\x50\x51\x69\x89\x8c\xed\x0c\xc1\x53\x06\x96\xc5\x23\xb0\x44\x81\x5b\x8f\x26\xe7\x38\xe1\xed\x8b\xf3\xc7\xcd\xea\xe1\x1c\x70\x4a\x93\x03\xd2\x05\x7a\x5a\x4c\x37\x33\xdb\x5d\x8f\x96\x13\x7b\x2d\xa1\xbd\xf8\x24\x7a\x3e\xa7\x19\xe1\xbd\x84\xef\x7a\x4d\x5c\x5e\xcf\xfb\x46\x3d\x51\xe1\xec\x8b\x33\xb5\xdd\xd2\x93\x33\x1b\x4d\x6c\x59\xbf\x95\xb3\x98\xdb\x63\xfc\x4a\xab\x37\xce\x8b\x12\xd0\x90\x74\xc5\x29\xbc\x6c\x43\xb9\x1e\x2f\x9d\xa7\xc2\xa0\x36\x73\xd6\xb2\xbc\x7a\x75\x9b\xb9\xa0\x9b\x77\x6a\xed\xcc\x6c\x77\xb1\xc2\x6f\xf9\x99\x8f\xd6\xce\x93\xdd\xf0\x73\x31\x5c\x65\x5a\x1a\x43\xef\x20\xa4\x89\x80\x38\x00\x1a\x79\x7b\x92\x80\x88\x75\x23\xf5\xb4\x4a\x5b\x83\x9b\x7e\x6e\x26\x7b\xb5\x9a\xd2\xf5\x3e\x0e\x3d\xb6\x3f\x1f\xbe\xc9\x22\x1f\xbc\x01\xec\x63\xf9\xbd\xb6\x57\x6b\x90\xc9\x28\x39\x06\x41\x12\x01\x56\x26\xcf\xa6\xe3\x2f\xd3\xd1\x64\x05\x03\xb0\x7e\x85\xc8\xa3\xac\x9b\x11\x9e\xd0\x98\xc9\x98\x55\x24\xda\x27\x2e\x11\x79\x7e\x03\xc3\x2c\xf6\x31\x8f\x25\x17\x02\x61\x19\xe5\x71\x44\x98\x80\xcc\xe3\xd4\xdb\x86\x24\xd1\x95\xd8\xac\xec\xa5\xac\xe9\x76\x1b\x06\xc9\xa1\x10\x3a\x7a\x11\xd4\x36\x53\x1f\xac\x14\x0c\x53\x62\x71\xb1\xc1\xa3\xe5\x64\x05\xf7\x03\xd4\xa8\x9d\x5e\xac\xb2\x3c\x72\x1f\xe1\x19\xb5\x72\xf5\xca\x21\xee\x97\xbf\x9c\xb1\x02\x64\x25\xa0\x36\xd1\x15\xae\xb1\x0e\x4a\x83\x80\x3d\x7f\x72\x96\x8b\xf9\xcc\x9e\xaf\x6f\xf7\xf2\x19\xb5\x6e\x9d\x17\x3b\xa7\x2b\xfb\x7f\x26\x91\xe5\xfd\x57\xb0\xde\x3e\x7e\x3b\xb1\xe6\x1c\x9e\x27\xd6\x38\x97\x13\x40\x83\x82\x21\x81\x26\x90\xb2\x84\x88\x82\x1e\xd5\x70\xd0\x04\xc8\x37\xb2\x4b\x05\xf1\x81\x32\x78\x49\xa9\x20\x10\xc5\x3e\x41\x34\x20\x2f\x60\x1a\x66\xcc\xe9\x9e\xb2\xc2\x0c\xbe\x83\x94\xf9\x24\xa0\x8c\xf8\x18\xb5\x6a\xd3\xf0\x61\x00\xd6\x0b\x22\xcc\xa7\x01\x42\xa3\xe9\x74\xf1\x8b\x3d\x76\x9d\xb9\xab\x02\x94\xab\x0d\x03\x19\xf2\x74\x34\x9f\x6c\x46\x13\x5b\x7e\x17\x3c\xa0\x1b\xa2\xa7\x1a\x0a\xf1\x64\x51\x8a\x9e\x0b\x5f\xf9\xc8\x56\x83\x5a\xbb\x50\x9e\x51\xab\xbe\x97\x70\x79\x49\xe1\xea\x24\xc8\x7a\x7d\x25\x40\xbe\x9d\x62\x2e\x40\x1c\x48\xb9\x2e\x92\x40\xbc\x30\x8c\xbf\xca\x5d\x4a\xd2\x6d\x22\xee\x20\xff\x43\x45\x2a\x48\x01\x4d\x64\x01\xc5\x81\xa0\x77\x50\xf1\x52\x82\x94\x3d\x84\xbc\x30\xec\x6b\x1a\x42\xc5\x4c\xa8\xd6\xa3\xd6\x50\x5d\x5e\x10\x1d\x7d\xca\xc1\x3a\x41\x03\x50\xe1\x55\x63\x95\x02\xc9\xbc\x10\xd6\xf6\xec\x31\xa7\xcd\xfa\xfd\x1b\x1d\x05\x89\x4e\xca\x8c\x88\x4e\x25\x5d\x62\x8c\x5a\xc3\x5c\xad\x5d\xe4\x01\xef\x0d\x33\x88\x39\xf1\x76\x07\xc8\xee\x0c\xf3\x62\xdf\xf0\xdd\xb3\x61\xfc\x65\x98\x19\xfe\x07\xbf\x87\x1f\xab\xdd\x50\x7c\x3d\xc4\xf0\x13\x18\x66\x19\x0a\x6e\x57\x09\x35\xe7\x13\x97\x79\xc9\x89\xc1\x60\x09\x30\xcc\x9d\x17\x86\x90\x32\x92\xec\xbc\x13\x71\xd5\x70\xba\xc2\xdb\xdf\x49\xc3\x56\xd0\xb0\x0c\x5d\xd4\x1a\xf2\xa8\x21\x43\x48\x52\x67\x1f\xfe\x86\xcc\x0b\x69\xfe\xf6\x90\x02\x8b\x79\x82\x66\xfa\x5b\xdd\x9c\xa8\x26\xef\xbf\xa6\xf8\x26\x27\xe8\x04\x8a\x97\x46\x15\x78\x45\x75\x18\x22\xef\xd8\xf0\x65\x51\x26\x08\x67\x5e\xa8\x42\xd2\x5e\x65\x64\x8d\x76\xde\xf4\x7c\xf3\xe6\xb9\x1e\x56\x45\x5e\xf5\xb0\x54\x00\x97\xc3\x2a\xa5\x7a\x28\xcf\x72\x68\x0d\x77\x3e\x28\xec\x47\x45\x35\xaf\x3c\xeb\x5b\x0c\x43\xb7\xd7\xed\x76\x11\xca\xcd\xc8\x6c\xeb\xf6\xf4\x0f\x65\xe7\xc6\xcd\x59\xd7\xe9\xff\x87\x7a\xd5\x47\xed\x4a\x87\x2e\xa7\x87\xea\x81\xbd\xd9\xa3\x26\xf1\xd6\x2d\x9e\x07\x70\xd6\x8b\xba\xa7\x2b\x01\x54\xdd\x38\xab\xbb\x7e\x0d\x0c\xda\x79\xc5\xf5\x2f\xdc\x86\xd2\x6b\xf1\x82\x50\x84\x6e\xc5\xcd\x4c\xf4\xab\x11\xba\xd2\x18\x92\x8f\xcc\x82\x85\x5a\x43\x1a\xc0\xef\x60\x98\x52\xe8\xd3\x44\x32\x9d\x8f\xe1\x8f\x8f\x92\xc4\x98\x74\xdd\x32\x4c\xc2\x79\xcc\x5f\x63\x30\x6a\x05\x14\x5d\xd8\xf2\xf5\x68\x82\x6f\xae\xf4\xb5\xfe\x63\xed\xee\x3b\x35\x31\xee\x87\x9e\x1c\xe6\x0b\x31\xc8\xd7\xf5\xad\x37\xda\xf7\x69\x94\x0e\x50\xc1\x2a\xfd\xba\xa6\x7a\x30\x59\x89\x7f\xc4\xb0\x8d\x63\x91\x08\xee\x9d\xc0\xb2\x7c\xfe\xa7\xc5\x53\x86\xd0\x2e\x24\x1e\xab\xa9\xc8\x7f\x10\x78\xd0\x6c\xcd\xbf\x01\x00\x00\xff\xff\x4c\xd0\x5d\x62\x3c\x0d\x00\x00")

func makeRulesMkBytes() ([]byte, error) {
	return bindataRead(
		_makeRulesMk,
		"make/rules.mk",
	)
}

func makeRulesMk() (*asset, error) {
	bytes, err := makeRulesMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/rules.mk", size: 3388, mode: os.FileMode(420), modTime: time.Unix(1488402688, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Makefile": makefile,
	"etc/build/Dockerfile.build.alpine.tpl": etcBuildDockerfileBuildAlpineTpl,
	"etc/build/Dockerfile.build.debian.tpl": etcBuildDockerfileBuildDebianTpl,
	"etc/run.sh": etcRunSh,
	"make/bootstrap.mk": makeBootstrapMk,
	"make/functions.mk": makeFunctionsMk,
	"make/rules.mk": makeRulesMk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"etc": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"Dockerfile.build.alpine.tpl": &bintree{etcBuildDockerfileBuildAlpineTpl, map[string]*bintree{}},
			"Dockerfile.build.debian.tpl": &bintree{etcBuildDockerfileBuildDebianTpl, map[string]*bintree{}},
		}},
		"run.sh": &bintree{etcRunSh, map[string]*bintree{}},
	}},
	"make": &bintree{nil, map[string]*bintree{
		"bootstrap.mk": &bintree{makeBootstrapMk, map[string]*bintree{}},
		"functions.mk": &bintree{makeFunctionsMk, map[string]*bintree{}},
		"rules.mk": &bintree{makeRulesMk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


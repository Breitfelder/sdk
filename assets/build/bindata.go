// Code generated by go-bindata.
// sources:
// assets/build/Makefile
// assets/build/make/bootstrap.mk
// assets/build/make/rules.mk
// DO NOT EDIT!

package build

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x70\xce\xcf\x4b\xcb\x4c\xe7\xf2\x71\xf4\x73\x0f\x75\x74\x77\x55\xb0\xb7\xe5\xf2\x73\x0c\xf1\x0c\x73\x8d\x0f\x0a\xf5\x0b\xf1\xf4\x75\x8d\x0f\x73\x0d\x0a\xf6\xf4\xf7\x03\xc9\x70\x15\xa7\x64\xe7\xe4\x27\x27\x96\x64\xe6\xe7\x29\xd8\x2a\xe8\x15\xa7\x64\x73\x65\xe6\x25\xe7\x94\xa6\xa4\x2a\xa8\x68\x20\x49\x6a\xea\xe7\x26\x66\xa7\xea\x27\xe5\xe7\x97\x14\x97\x14\x25\x16\xe8\xe5\xe2\x57\x58\x54\x9a\x93\x5a\xac\x97\x9b\x0d\x08\x00\x00\xff\xff\x76\xc6\x4b\x61\x90\x00\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 144, mode: os.FileMode(420), modTime: time.Unix(1487808244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeBootstrapMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4b\x8b\xdb\x3e\x14\xc5\xd7\xa3\x4f\x71\x98\xf1\xc2\x02\x9b\x3f\xff\x55\x61\x20\x14\x4f\xa2\xa6\xa6\x33\x49\x71\x1e\x74\x17\xec\xe8\x3a\xb9\xe0\x4a\xa9\x24\x7b\x28\xf4\xc3\x17\xe5\x39\x9d\x76\x2b\x9d\x7b\x7e\xe7\x3e\x26\x55\xb9\x56\xd5\x66\xa2\xd6\x9b\xaf\x95\xfa\x54\x7e\xc3\xe3\x08\x9a\x06\x71\xfe\x58\xab\x6a\x51\xce\x67\xf8\x38\x42\x92\xfe\x25\x96\x79\x92\xfa\x3d\x75\x1d\x76\x1c\xe0\x68\xc8\x0f\xb5\xf3\x84\xcf\xaa\x98\xe0\x17\xb6\x7d\x40\xbe\xfd\x3f\xff\x20\xc5\x74\xbe\xa9\x56\xb3\x65\xf9\xa2\xae\x96\xd1\x71\x67\x31\x90\xf3\x6c\x8d\x14\x62\x32\x1f\x7f\x51\xd5\xa6\x7c\x29\xa6\x2a\x02\x9b\xa6\x6b\xfd\xfe\xbf\x24\x7d\x2e\x66\xd3\x55\x31\x55\x32\xd7\x8e\x07\x72\x17\xe5\xd3\xaa\x7c\x9e\xdc\xf4\x49\xfa\xd6\x41\xe6\x4d\xcf\x9d\x16\xe2\x01\x9a\x5a\x36\xa4\xd1\xd0\xbe\x1e\xd8\xf6\x0e\xad\x75\x38\x7e\x7b\xb0\xf1\xac\x09\xc1\xd5\x03\xfb\x7c\xcb\x82\x5b\x43\x3f\x90\x26\xa9\x75\xbc\x63\x83\x71\x29\x33\xf4\xe6\x6c\x22\x05\x00\x3c\x80\x5b\xbc\x12\x6a\x47\x17\x83\x71\x99\xc5\x5e\x1a\xeb\x09\xec\x41\xa6\x6e\xba\xc8\xfc\x19\xf1\x75\xdf\x05\x71\xb7\x56\xd5\xd3\x7c\xa1\xe2\x88\x83\xeb\x49\x90\xd1\xdc\xc6\x80\xdc\x62\x59\x15\xeb\x72\xb1\x59\x16\xd3\x6b\xdc\x77\x2b\x60\x0f\x3b\x90\x73\xac\x49\xdf\x42\xde\xea\x64\x86\x53\xb8\x77\x75\x8f\x71\x32\x6f\x64\x7f\x60\xcf\x3d\x18\x1b\xc0\x06\xa1\xde\x65\x08\x7b\xc2\xa1\xf7\xfb\x08\xd4\xec\x8f\x6d\x08\x6e\x4f\xb8\x96\x9d\x0f\xaf\xd6\x69\x24\xa9\xef\x1b\x1f\x90\x67\xc8\xae\xa7\x71\x66\x4a\x29\xb3\x7f\xde\x8b\x14\x77\xd1\xfa\x62\x8b\x11\xee\x8f\xa8\xeb\x43\x5c\x8c\xa6\x81\x3a\x7b\xf8\x4e\x26\x5c\xae\xc3\xdf\x9f\x52\xff\x0e\x00\x00\xff\xff\x04\xde\x38\x19\xaf\x02\x00\x00")

func makeBootstrapMkBytes() ([]byte, error) {
	return bindataRead(
		_makeBootstrapMk,
		"make/bootstrap.mk",
	)
}

func makeBootstrapMk() (*asset, error) {
	bytes, err := makeBootstrapMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/bootstrap.mk", size: 687, mode: os.FileMode(420), modTime: time.Unix(1487808244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeRulesMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x5b\x6f\xda\x30\x14\xc7\x9f\xf1\xa7\x38\x6a\xf3\x10\x6b\x4b\x59\xd5\x37\x10\x5a\x29\xf1\x58\x34\x2e\x55\x20\xbc\xb4\x13\x82\xf8\xa4\x58\xcd\x05\x62\x87\x76\xdf\x7e\x72\x2e\x24\x34\x4c\x53\xdf\xe0\x7f\x7e\xc7\xfe\x9f\x8b\x73\x0d\x76\xe2\xbf\x62\x4a\xec\xf9\xe8\x17\x73\xd7\xa3\xa9\x0d\xdf\x07\xc0\xcf\xc4\x07\xcf\x99\xe4\xb2\x61\xd6\x18\x85\x6d\x26\x42\x5e\x31\xae\x37\x6b\x13\x69\x16\x83\x65\xa5\x51\x05\x3d\x7a\x8b\x9f\x6d\x6a\x9f\xc9\x5d\x45\xfc\x70\x26\x4c\x13\x85\xab\x40\x84\xd8\x8c\xd4\x4e\xea\xf8\x4d\x61\x23\x8f\xac\x57\xf3\x89\x37\x65\xeb\xe5\xd0\x1d\xb3\xa5\xe6\xba\xc9\x5e\x75\x79\x2a\x8e\x98\x76\x65\xea\x77\xcf\xb9\xc7\xe1\xb2\xf4\x23\x77\x18\x86\xb0\x7f\xe3\x94\x90\x6b\x60\xf1\x51\xa4\x49\x84\xb1\x92\x65\x82\xb7\x60\xae\x26\xb7\xdb\x30\x90\xbb\x4a\x74\xec\x66\xb6\xe0\x60\x65\x60\x98\x9a\xa5\xb4\x64\x86\xee\x78\xa1\xa1\x67\xd2\xb1\xac\xdc\xaa\xb5\x49\x5f\xa0\x3e\x75\x60\x98\xf5\x1f\xfa\x0f\xce\xb1\x6b\xcc\xb1\x5b\xd4\x6c\xb8\x74\x56\x4c\xcf\x60\xe9\x4c\xd9\x7a\xc5\xdc\x85\x33\x9f\x0d\x0c\xf3\x72\xa0\xf2\x56\x0e\xfb\x34\x0d\xd7\x9b\x15\x47\xeb\x2a\x1a\xa6\x7a\xad\xbb\x8f\x27\xa0\xd1\xc9\x9a\x3b\x1b\x43\x9e\x71\xba\xa3\x00\x9c\xe9\x70\xcc\xf2\x56\x8b\x00\x56\xcc\x7d\x98\x2f\x18\x08\x09\x59\x2c\x51\x95\xdb\x57\xec\x97\x56\xf1\x1d\xfd\x4c\x21\x07\x11\xc3\x21\x13\x0a\x21\x4a\x38\x12\x11\xe0\x01\x4c\xc3\x4c\x52\xf1\x22\xe2\xea\x18\xfa\x15\xb2\x98\x63\x20\x62\xe4\x94\x74\x1a\x53\xf8\x32\x00\xeb\x40\x30\xe6\x22\xd0\x37\x8f\x92\x30\x49\x25\xf1\xfd\x14\xf9\x00\x9e\xf1\xe9\x5b\xff\xee\x36\x22\xbe\xff\x07\xc3\x30\x79\xab\xa4\xbb\x28\x47\x24\xaa\x42\x89\x08\xd9\x84\x61\xaf\xdc\x7e\x72\xb1\xb0\xde\xc7\x82\x29\x58\x41\xdd\xe7\x7a\x95\xe9\xa9\x8f\xda\x21\x05\x4b\x81\x71\x0f\x70\x43\x88\x42\xa9\x7a\x70\xb9\x6d\x9d\x2a\x29\x7f\x3e\xd1\xe6\x15\x41\xe3\x56\xbc\x51\xe2\x88\x84\xe4\xd6\x3e\x91\x5c\x2c\x52\x91\xdd\x6f\x4f\xab\x6d\xfe\x92\xed\x2a\x5e\x76\xc0\x30\x6d\xd7\x59\x31\xf7\xb4\x73\xba\x28\xfd\xd2\xab\xce\x75\xee\x45\x00\x4f\x60\x98\x5a\xe4\x42\x6e\xb6\x21\x72\x0a\xbf\xfb\xa0\x76\x18\x6b\x17\x1d\xf4\x77\x09\x58\x08\x57\x86\x99\x4f\x89\x7e\x80\x0b\x59\xa2\xa2\x57\xfd\x22\xe1\x5d\x28\xb8\xcd\x7f\x07\x82\x34\xea\xd0\x1f\x1e\xfa\x7f\x8f\x84\x90\xbf\x01\x00\x00\xff\xff\x26\x9d\x5b\x95\x11\x05\x00\x00")

func makeRulesMkBytes() ([]byte, error) {
	return bindataRead(
		_makeRulesMk,
		"make/rules.mk",
	)
}

func makeRulesMk() (*asset, error) {
	bytes, err := makeRulesMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/rules.mk", size: 1297, mode: os.FileMode(420), modTime: time.Unix(1487808244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Makefile": makefile,
	"make/bootstrap.mk": makeBootstrapMk,
	"make/rules.mk": makeRulesMk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"make": &bintree{nil, map[string]*bintree{
		"bootstrap.mk": &bintree{makeBootstrapMk, map[string]*bintree{}},
		"rules.mk": &bintree{makeRulesMk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


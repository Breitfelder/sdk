// Code generated by go-bindata.
// sources:
// etc/build/Makefile
// etc/build/etc/Dockerfile.build.debian
// etc/build/make/bootstrap.mk
// etc/build/make/functions.mk
// etc/build/make/rules.mk
// DO NOT EDIT!

package build

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x50\xbb\x6e\xdb\x40\x10\xec\xef\x2b\x06\xb0\x0a\x11\x30\x25\x20\x65\x80\x18\x30\xe0\xc0\x85\x93\x34\x4e\x7a\x1e\x79\x7b\xd6\x85\xf7\xca\xde\x52\xb1\xff\x3e\x38\x2a\x12\x99\x14\x56\xb9\x3b\xb3\xb3\x33\x73\x83\xef\x07\x57\xe0\x0a\xe4\x40\xa0\x28\xfc\x96\x93\x8b\x82\x64\xe7\x4d\xdf\x7b\x5b\x0e\x08\x7a\x24\x3c\x3f\x3c\xdd\xce\xcb\xe7\x87\x27\x94\x43\x9a\xbc\x41\x4f\x28\x92\x98\x0c\xb4\xa8\x1b\x74\xc5\x8c\x3e\x0d\x5a\x5c\x8a\xdd\x2d\x5e\x28\x12\x6b\x21\x03\x7a\xa5\x61\x12\x17\x5f\xd0\x9d\x24\xdb\x62\x46\x64\xa6\xac\x99\xda\x7e\x72\xde\x74\x3b\x7c\xd5\xf1\x0d\xc6\x59\x4b\x4c\xb1\xea\x1d\x35\x17\xe8\x82\xee\xcb\xfd\xb7\xc7\x1f\xf7\x8f\x9f\x3b\x68\x26\x30\xfd\x9a\x1c\x93\xa9\x76\x5c\xa9\x2c\xa7\x7b\x4f\x65\x06\xe9\x55\x58\x0f\xf3\x2f\xcb\x29\x54\xc7\xd5\x59\xd0\xd1\x59\x2a\xb2\x93\x14\x7c\x07\x2d\x73\x14\x4e\x49\xa0\xa3\x99\x87\xcc\xe9\x27\x0d\x02\x61\x1d\x8b\xd7\xb3\x84\x13\x48\x82\x3e\x35\xe0\xe2\xe0\x27\x53\xe5\xb4\x2c\x8a\x1d\xa6\xf2\x7f\xb2\x05\x93\x94\xfc\x4e\xa9\x73\x2b\xf8\x84\xcd\xb6\x1c\xc8\x7b\xe4\xdf\xa6\x51\xab\xc2\x66\xe8\x3c\x34\xfb\x5d\x31\xa3\x3a\xeb\x9c\xce\x16\x6e\xb3\xaf\x86\xf6\x97\x50\x61\x54\x12\xf2\xbf\x4f\xd6\x6c\x09\x59\x9d\xff\x86\xd1\x38\x46\x9b\xb1\xd9\xae\x6e\x9a\x46\xa9\x55\x80\x8f\x8b\xcf\x21\x85\x50\x2b\x6a\x8f\x58\x11\x3e\xdc\x61\x6f\xe8\xb8\x8f\x93\xf7\x8d\x72\xd6\x90\x5d\xc1\x0a\xc0\x45\x60\xb3\x5d\x80\xe6\x52\x0d\xda\x36\xb3\x8b\xd2\x52\x3c\xe2\x0e\x9b\xed\x19\x68\x1a\x45\xd1\x38\xab\xd4\xdf\xbe\xaf\x46\x7f\x8f\x67\xa7\x38\xd4\xb1\x5c\x23\xf6\x29\x49\x11\xd6\xf9\x1a\x91\x27\x4f\x55\xed\x4f\x00\x00\x00\xff\xff\x24\x9b\xb7\x29\x3c\x03\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 828, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcDockerfileBuildDebian = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x6b\x83\x30\x1c\xc5\xcf\xf3\x53\xfc\x11\xf1\x16\x73\x19\x13\x7a\x73\x35\x73\x32\x4d\x46\xaa\xee\x32\x08\x56\x69\x2a\x8b\xa6\x44\x85\xd2\xd2\xef\x3e\x16\xb7\x95\x42\x8f\xef\xf7\xf2\xf2\xde\xff\x85\xb3\x1c\xbc\x73\xcc\xd6\x6f\x84\x8b\xe7\x32\xcd\x62\x41\xa3\x22\xad\x88\x48\xf3\x28\x21\x17\xc7\x21\xb4\x82\x84\x65\x11\x4d\x44\xcc\x3e\x68\xc6\xa2\x58\x94\x3c\x83\xfd\x34\x1d\xc6\x15\xc6\x52\xab\x7a\x90\x81\x36\x12\xb7\x0a\x4b\xed\x9d\x79\x49\x8b\x34\x27\x22\x61\xa2\x22\x7c\x93\x32\x7a\x09\x54\x37\xcc\x47\x54\xf7\xed\xd3\x63\x30\xd5\x26\x90\x27\xc7\xe1\x25\x85\x66\x36\x0a\xd0\x6e\xdc\x64\xe0\x7a\x77\x6a\x5c\x40\x1a\x7e\x2b\x96\x1c\x7c\x3a\x0f\xbe\x0f\x53\x6d\x00\xad\x01\xcf\xa3\xc1\x4a\x37\xb5\x02\x74\x3c\xed\xee\x3e\x35\xfd\x2d\xfe\xbb\xe9\x3d\x2a\x5e\x01\x4b\x6d\xa5\x15\xde\x02\xf1\xb6\x1b\x56\xd7\x9f\xb1\xd4\x96\x78\x3f\xde\x32\xbb\xff\x6a\x3b\x03\xe8\x60\x47\xdb\xc8\x68\x1a\xf7\xaa\xb6\xdd\xe0\x82\xef\x43\xb3\xef\x75\x0b\x88\x43\x18\x86\xff\xae\xfb\x1d\x00\x00\xff\xff\x64\xa0\x99\x0d\x76\x01\x00\x00")

func etcDockerfileBuildDebianBytes() ([]byte, error) {
	return bindataRead(
		_etcDockerfileBuildDebian,
		"etc/Dockerfile.build.debian",
	)
}

func etcDockerfileBuildDebian() (*asset, error) {
	bytes, err := etcDockerfileBuildDebianBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/Dockerfile.build.debian", size: 374, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeBootstrapMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xdb\x30\x14\x7d\xae\x7f\xc5\xa1\xcd\x83\x0d\xf6\xc6\x9e\x06\x85\x32\xd2\x46\xcb\xcc\xda\x64\x38\x69\xd8\x9b\x2b\x5b\xd7\xf1\xa5\x8e\x94\x49\xb2\xcb\x60\x3f\x7e\x38\x89\x93\xb4\x1d\x7b\x94\x74\xcf\xc7\x3d\x47\x57\xe8\xa4\x65\x59\x34\xe4\x50\x10\xeb\x35\x58\x97\x4d\xab\x48\xa1\xb2\x66\x03\x5f\x13\x9e\x36\x52\x73\x45\xce\x7f\xd8\x3c\x3f\x05\xf7\xe3\xd9\xf4\x71\x3c\x15\xf8\x72\x13\x64\x8f\xb3\x65\xfa\x20\xf2\xf9\xe2\xfc\x34\x1b\x2f\xd3\x95\xc8\x57\x22\x5b\xa4\xf3\xd9\xf9\xcb\x74\x7e\x7e\x1b\x5c\xc1\x6c\x3d\x1b\x2d\x9b\x93\x8b\x60\x92\xa5\x2b\x91\xe5\x13\xb1\xca\x7f\x64\xe2\x6b\xfa\x13\xd7\x37\x50\xd4\x0d\x0f\x27\x02\x8c\xc2\x77\xc3\x51\x32\x0a\x5d\x4d\x4d\x83\x35\x7b\x58\xea\x92\xad\xb4\x8e\xf0\x4d\x8c\x27\xf8\x83\xb2\xf5\x48\xca\x4f\xc9\xe7\x28\x08\x26\xf3\xbb\xef\x22\xcb\xd3\x87\xfd\x32\x28\x8a\xa6\x72\xf5\xc7\x51\x38\x6c\x18\x25\xca\x72\x47\xf6\xd5\xe4\xa0\x2f\x26\x7b\x07\xa5\x6c\x1a\x90\x2b\xe5\x96\x72\x65\xca\x67\xb2\xb9\x97\xeb\x78\x14\x9e\x83\xa2\xeb\xa3\xd5\x03\x3c\x8a\x06\xd6\xdb\xc7\xf4\x7e\x32\x64\x76\x34\xf3\x06\x9f\x14\x2d\x37\xea\x35\xe4\x40\xf8\x7f\x48\xf2\xc2\xbe\x4e\xd6\xa6\x0f\x5b\x51\xc5\x9a\x14\x0a\xaa\x65\xc7\xa6\xb5\xa8\x8c\xc5\x6e\xcc\x81\xb5\x63\x45\xf0\x56\x76\xec\x92\x92\x03\xae\x34\xfd\x42\x38\x0a\x8d\xe5\x35\x6b\xdc\xa5\x51\x8c\x56\x1f\x48\xa2\x00\x00\xae\xc0\x15\x5e\x08\xd2\xd2\x40\x70\x97\xc6\xe8\xc8\x16\xc6\x11\xd8\x81\x74\xdf\xaa\x42\xf1\xbb\x97\x97\x6d\xe3\x83\x8b\x95\xc8\x6e\xe7\x0b\xd1\xf7\xea\x6d\x4b\x01\x69\xc5\x55\x6f\x90\x2b\x2c\xb3\xf1\x2a\x5d\xe4\xcb\xf1\xf4\x68\xf7\x4d\xef\xec\x60\x3a\xb2\x96\x15\xa9\x93\xc9\x13\x2e\x8a\xb1\x37\xf7\x06\x77\xdd\x27\x74\x36\xf6\x4a\xf6\xb0\x83\x36\x1e\xac\xd1\x17\xb8\xfb\xf9\xdb\xd6\xd5\xbd\xa0\x62\xb7\x5b\x23\xe0\x6a\x2f\x57\xb1\x75\xfe\xc5\x58\x85\x51\xe8\xda\xc2\x79\x24\x31\xe2\xf7\x25\x47\xf1\x3f\x3f\x69\x14\x5c\xf4\xd4\x03\x2d\x6e\x70\xb9\x93\x3a\x5e\xf4\xc5\x28\xea\xa8\x31\xdb\x0d\x69\xdf\x27\xea\xd8\x68\x77\xb9\x77\xfd\x37\x00\x00\xff\xff\x2b\x2b\x66\x5c\xb6\x03\x00\x00")

func makeBootstrapMkBytes() ([]byte, error) {
	return bindataRead(
		_makeBootstrapMk,
		"make/bootstrap.mk",
	)
}

func makeBootstrapMk() (*asset, error) {
	bytes, err := makeBootstrapMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/bootstrap.mk", size: 950, mode: os.FileMode(420), modTime: time.Unix(1488107348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeFunctionsMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x4d\x0e\x82\x30\x10\xc5\xf1\x7d\x4f\xf1\x12\x58\x40\xd2\x2e\xdc\x72\x19\x32\xb4\x83\x12\xcb\x8c\xe9\x47\xbc\xbe\x51\x51\x49\x70\x3b\x79\xf9\xff\xa6\x01\x67\x4f\x37\x1e\x83\xfa\x2b\xa7\xb1\xd0\x79\xbb\xc0\x6b\x54\x81\xbf\x50\x42\x51\x50\x8c\x7a\x47\xcd\x0c\xc2\x7b\x8b\xe7\x96\x32\x52\x8d\x6c\x02\xcf\x8b\xf0\x31\x66\xda\x2e\xd7\x29\x17\x0c\xd6\x39\xdb\x76\xa7\xbe\x37\x2c\x81\x67\x63\x1a\x54\x39\xe2\x24\x5b\x24\xec\x99\xa2\x98\xf8\xa5\x2f\xf2\x7b\xc0\xeb\xba\x92\x84\x0f\xfe\x27\xf7\xe5\x9d\xb3\xc3\x9e\x7f\x04\x00\x00\xff\xff\xff\x00\xb3\xb9\xf8\x00\x00\x00")

func makeFunctionsMkBytes() ([]byte, error) {
	return bindataRead(
		_makeFunctionsMk,
		"make/functions.mk",
	)
}

func makeFunctionsMk() (*asset, error) {
	bytes, err := makeFunctionsMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/functions.mk", size: 248, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeRulesMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x5b\x6f\xdb\x46\x13\x7d\xd6\xfe\x8a\x81\x42\x21\x5c\xc4\x94\xbe\x20\x6f\xf2\xa7\xc6\x4a\xc4\x28\x42\x75\x09\x74\x71\x5b\xc4\x05\x41\x93\x43\x69\xe1\x25\xa9\x70\x97\x8a\x8b\xb6\xff\xbd\xd8\x5d\x5e\x6d\x59\x28\xf2\xd0\x27\x51\xc3\x33\x97\x9d\x39\x73\xb8\x1f\x76\xb3\xf9\xc4\x9b\x4d\x60\x38\x02\xcb\x16\x07\xe4\x1c\x42\x5f\x22\xbc\xe9\xf6\x62\xa7\x17\x3a\xbd\xdf\xbc\xde\x67\xaf\xb7\xf0\x7a\x9b\x2e\x25\x06\xfe\x65\xbc\xfd\x6c\x1c\x78\x1a\xf8\x92\xa5\x09\x1d\xdc\xe7\x8c\x87\x84\xbc\x82\x30\x0d\x1e\x30\x83\x2c\x4f\x24\x8b\x11\x82\x34\x8e\xfd\x24\x14\x64\xb2\xfa\xf8\xb3\xbb\xf6\x3e\x2e\x26\xf0\x7e\x54\xa0\x4a\xa3\x0e\xab\xcc\x96\x5d\xc3\x28\x98\x98\x85\x65\xbd\x5b\x3e\x47\x64\x79\x02\x8e\x93\xc5\x25\x68\x3b\x9e\x3e\x07\x49\x7f\x5f\xbe\xff\xb2\xdb\x7c\x7e\x0e\x38\xe6\xe2\x40\x8a\xb3\xdd\xae\xe6\xbb\x85\xeb\x6d\xc7\xeb\xa9\xbb\x55\xd0\x41\x7a\x94\x83\x30\x63\x27\xcc\x06\x22\x0b\x06\x6d\x9c\x6e\xc5\xfb\x56\x2b\x48\x99\xec\xd3\x6c\xee\x7a\x55\xa6\xd9\x62\x3c\x75\xbd\x5b\x77\xbd\x99\xad\x96\xee\x84\x3e\xf1\x1a\x4c\x74\x47\x22\xc6\xf1\xbc\xbf\x49\x3b\x59\xcf\x6e\xcb\x60\x45\x08\x11\x3e\xd4\x51\x50\x06\x8d\x48\x7d\xdd\xc1\xbe\x65\xaf\x77\xcb\xed\x6c\xe1\x7a\xab\x0d\xbd\x14\x7d\x39\xde\xce\x6e\xdd\x56\xf4\x73\x05\xf6\xab\x61\x73\x26\x24\xa4\x11\xb0\xd8\xdf\xa3\x00\x99\x16\x33\x2b\x68\xa5\xe2\x8c\x2e\xe6\xb8\x78\xbc\x17\x7b\xa7\x52\xef\x53\xee\x27\xfb\xe7\x3c\x9b\xae\x34\xc7\x46\xb0\x4f\xd5\xf3\xd6\xdd\x6c\x41\x1d\xc4\xd8\x29\x48\x14\x12\x9c\x93\x7a\x37\x9f\x7c\x9a\x8f\xa7\x1b\x18\x81\xf3\x2b\xc4\x3e\x4b\xfa\x27\xcc\x04\x4b\x13\x55\xb3\xa9\xa4\xc8\x49\x2b\x84\x3e\xdf\xc8\xb2\xcb\xc5\xd1\xb5\x68\x23\x60\x72\x62\x59\x1a\x63\x22\xe1\xe4\x67\xcc\xbf\xe7\x28\x8a\x4e\xec\x36\xee\x5a\xf5\xf3\xfe\x9e\x47\xe2\x50\x1a\x67\x05\xe7\xcd\xda\xb1\x10\x9c\x1c\x2c\x5b\x61\x69\xb9\x6a\xe3\xf5\x74\x03\xef\x47\xa4\xd5\xbb\x62\x87\xaa\xf6\xac\x77\x4b\x0a\x77\xa4\xa3\xdd\xeb\x84\x74\x58\xfd\x9b\x4d\x0c\xe0\x54\x01\x1a\xfc\xad\x71\x2d\xf2\x6b\x8f\x4b\xc3\x2b\x57\xa6\x68\xd5\x7f\x58\x95\xf6\x98\xae\x0c\x6c\xb0\x4f\xcf\x54\xda\x62\x92\x9a\x11\x8b\xe0\xd6\x5d\x7f\x58\x6d\x5c\x60\x02\xf2\x44\xa0\x2c\xb5\xca\x8c\x8f\x09\xc0\x47\x0c\x72\x89\x21\xb0\x04\xbe\xe5\x4c\x22\xc4\x69\x88\x84\x45\xf8\x0d\x6c\xcb\x4e\x33\xb6\x67\x49\x19\x86\x5e\x41\x9e\x84\x18\xb1\x04\x43\x4a\x3a\x8d\x79\xbd\x19\x81\xf3\x8d\x60\x12\xb2\x88\x90\xf1\x7c\xbe\xfa\xc5\x9d\x78\xb3\xa5\x67\x0a\x54\x8b\x07\x23\x55\xf2\x7c\xbc\x9c\xee\xc6\x53\x57\x3d\x97\x1b\x5a\x74\xb8\xe0\x1d\x94\xe6\xe9\xaa\x32\xdd\x95\xb9\x34\xa9\x6a\x2a\x35\xb4\xf9\x8e\x74\x9a\x9b\x03\xe7\xd7\x08\x5e\x1c\xad\xea\x97\xc4\x2c\x86\x20\xe5\x69\x26\xe0\x80\xfc\x88\x99\x20\x41\x90\x61\x38\x82\x3b\xfc\xfa\xbf\xeb\x77\x6f\x63\x12\x04\x7f\x20\xe7\xe9\xf7\xd2\xf4\x2e\xd6\x10\x81\xd2\x58\x62\x15\xe8\x3b\x02\x3e\x1e\xd3\x4c\x82\x3c\x60\xb5\x19\x4a\x2b\x7c\xe5\xab\xd6\x46\xe4\xf7\x42\x5e\x81\xfe\x61\x32\x97\x58\x42\x85\x9a\x84\x3c\x20\x79\x05\xb5\xfc\x08\x62\xe2\x11\xe2\x73\x3e\x2c\x14\x87\x94\x6c\x31\xa4\x20\x9d\xf8\x21\x64\x19\x38\x47\x68\xbd\xa8\x71\x86\x19\x43\xd2\xb9\xb1\x6c\x3c\xf9\x1c\xb6\xee\xe2\x8b\x56\xc5\xe6\xb7\x30\x7e\x90\x18\x1f\x4d\x18\x19\x1f\x2b\x35\xa4\x94\x74\x6e\xb4\x5b\xb7\xac\x1f\x5e\x5b\x76\x94\x66\xe8\x07\x07\x38\x5d\x59\xf6\xd9\xc1\xd3\xab\x3b\xcb\xfa\xd3\xb2\x4f\xf4\x6f\xfa\x1a\xfe\x5f\x6f\x8b\x91\xe3\x1b\x0a\x3f\x81\x65\x57\xa5\xd0\xee\x53\x62\xd3\xea\x3c\x8a\x6a\x14\x1c\x09\x96\x1d\xf8\x9c\x43\x9e\xa0\x08\xfc\x23\x7a\x86\xd5\x9e\xf4\xf7\x57\x2a\xa0\x13\xb5\x22\x42\x9f\x10\xa5\x81\x43\xf8\x4b\x6b\xa1\x93\xf8\x92\x9d\xd0\x3c\x9b\xef\x1c\x69\xd8\x87\x4f\x25\xba\x2d\x01\x9d\xb2\x9a\x5a\x9a\x28\xc4\xfe\x03\x36\x63\x3b\x2c\x91\x98\x25\x3e\x37\x99\x8b\x2c\xaa\x80\x1f\xfe\x36\xd4\x89\x6b\xf5\x69\x26\x36\x29\xce\x27\xae\xac\x05\x77\x9e\x55\xd9\x09\x42\x30\xd0\x6b\xa3\x2c\xc5\x77\x84\x42\x7f\xd0\xef\xf7\x09\x31\x6e\xfa\xa3\xa7\x4e\x61\xf4\xe3\xe5\xaf\x55\x3d\xc2\xed\x78\x4a\x2f\xce\xeb\xa5\x18\x5a\xf6\x3a\xff\xda\x93\xd2\x21\xf7\xd5\x91\x8b\x5a\xab\x2a\xcb\x69\x9b\x3f\xc5\xb8\x9b\x6f\x86\xed\x7d\xf9\xd1\xe9\x9f\x6f\x2c\x69\xa6\x35\xf3\xbf\x90\xab\x7d\x19\x68\x46\xbc\x30\xfd\x66\x86\x17\x12\xd7\xf3\x3f\x3b\xe9\xfa\xea\x09\x8e\xc3\xc3\x88\xfb\x7b\xa1\x76\xbb\xbe\x30\xd0\xd7\xe0\xa4\xed\xda\x8b\x1b\x22\xf4\x55\x1c\xa2\x2e\x94\x25\xb9\x34\x4b\x48\xe7\x86\x45\xf0\x15\x2c\x5b\xbd\x0a\x99\x50\x12\x18\x52\xf8\xfd\x5a\xa9\x5b\xa2\x87\x8b\xc1\x21\x05\x07\xa1\x6b\xd9\x5a\x67\xe9\x13\xb0\x31\x0b\x94\xb4\x7b\x6d\x1c\x1e\x99\x84\xb7\xfa\x39\x62\xa4\xc1\x32\x75\xcb\xbd\x74\x7b\xba\x8c\xac\xa9\x13\x70\xf4\x93\x21\xe9\x64\x31\x38\x59\xd4\x3e\xf0\x3f\x01\x00\x00\xff\xff\xbe\xa4\xa5\xe7\x39\x0c\x00\x00")

func makeRulesMkBytes() ([]byte, error) {
	return bindataRead(
		_makeRulesMk,
		"make/rules.mk",
	)
}

func makeRulesMk() (*asset, error) {
	bytes, err := makeRulesMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/rules.mk", size: 3129, mode: os.FileMode(420), modTime: time.Unix(1488107451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Makefile": makefile,
	"etc/Dockerfile.build.debian": etcDockerfileBuildDebian,
	"make/bootstrap.mk": makeBootstrapMk,
	"make/functions.mk": makeFunctionsMk,
	"make/rules.mk": makeRulesMk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"etc": &bintree{nil, map[string]*bintree{
		"Dockerfile.build.debian": &bintree{etcDockerfileBuildDebian, map[string]*bintree{}},
	}},
	"make": &bintree{nil, map[string]*bintree{
		"bootstrap.mk": &bintree{makeBootstrapMk, map[string]*bintree{}},
		"functions.mk": &bintree{makeFunctionsMk, map[string]*bintree{}},
		"rules.mk": &bintree{makeRulesMk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


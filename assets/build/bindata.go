// Code generated by go-bindata.
// sources:
// etc/build/Makefile
// etc/build/etc/Dockerfile.build.debian
// etc/build/make/bootstrap.mk
// etc/build/make/functions.mk
// etc/build/make/rules.mk
// DO NOT EDIT!

package build

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x50\xbb\x6e\xdb\x40\x10\xec\xef\x2b\x06\xb0\x0a\x11\x30\x25\x20\x65\x80\x18\x30\xe0\xc0\x85\x93\x34\x4e\x7a\x1e\x79\x7b\xd6\x85\xf7\xca\xde\x52\xb1\xff\x3e\x38\x2a\x12\x99\x14\x56\xb9\x3b\xb3\xb3\x33\x73\x83\xef\x07\x57\xe0\x0a\xe4\x40\xa0\x28\xfc\x96\x93\x8b\x82\x64\xe7\x4d\xdf\x7b\x5b\x0e\x08\x7a\x24\x3c\x3f\x3c\xdd\xce\xcb\xe7\x87\x27\x94\x43\x9a\xbc\x41\x4f\x28\x92\x98\x0c\xb4\xa8\x1b\x74\xc5\x8c\x3e\x0d\x5a\x5c\x8a\xdd\x2d\x5e\x28\x12\x6b\x21\x03\x7a\xa5\x61\x12\x17\x5f\xd0\x9d\x24\xdb\x62\x46\x64\xa6\xac\x99\xda\x7e\x72\xde\x74\x3b\x7c\xd5\xf1\x0d\xc6\x59\x4b\x4c\xb1\xea\x1d\x35\x17\xe8\x82\xee\xcb\xfd\xb7\xc7\x1f\xf7\x8f\x9f\x3b\x68\x26\x30\xfd\x9a\x1c\x93\xa9\x76\x5c\xa9\x2c\xa7\x7b\x4f\x65\x06\xe9\x55\x58\x0f\xf3\x2f\xcb\x29\x54\xc7\xd5\x59\xd0\xd1\x59\x2a\xb2\x93\x14\x7c\x07\x2d\x73\x14\x4e\x49\xa0\xa3\x99\x87\xcc\xe9\x27\x0d\x02\x61\x1d\x8b\xd7\xb3\x84\x13\x48\x82\x3e\x35\xe0\xe2\xe0\x27\x53\xe5\xb4\x2c\x8a\x1d\xa6\xf2\x7f\xb2\x05\x93\x94\xfc\x4e\xa9\x73\x2b\xf8\x84\xcd\xb6\x1c\xc8\x7b\xe4\xdf\xa6\x51\xab\xc2\x66\xe8\x3c\x34\xfb\x5d\x31\xa3\x3a\xeb\x9c\xce\x16\x6e\xb3\xaf\x86\xf6\x97\x50\x61\x54\x12\xf2\xbf\x4f\xd6\x6c\x09\x59\x9d\xff\x86\xd1\x38\x46\x9b\xb1\xd9\xae\x6e\x9a\x46\xa9\x55\x80\x8f\x8b\xcf\x21\x85\x50\x2b\x6a\x8f\x58\x11\x3e\xdc\x61\x6f\xe8\xb8\x8f\x93\xf7\x8d\x72\xd6\x90\x5d\xc1\x0a\xc0\x45\x60\xb3\x5d\x80\xe6\x52\x0d\xda\x36\xb3\x8b\xd2\x52\x3c\xe2\x0e\x9b\xed\x19\x68\x1a\x45\xd1\x38\xab\xd4\xdf\xbe\xaf\x46\x7f\x8f\x67\xa7\x38\xd4\xb1\x5c\x23\xf6\x29\x49\x11\xd6\xf9\x1a\x91\x27\x4f\x55\xed\x4f\x00\x00\x00\xff\xff\x24\x9b\xb7\x29\x3c\x03\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 828, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcDockerfileBuildDebian = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x6b\x83\x30\x1c\xc5\xcf\xf3\x53\xfc\x11\xf1\x16\x73\x19\x13\x7a\x73\x35\x73\x32\x4d\x46\xaa\xee\x32\x08\x56\x69\x2a\x8b\xa6\x44\x85\xd2\xd2\xef\x3e\x16\xb7\x95\x42\x8f\xef\xf7\xf2\xf2\xde\xff\x85\xb3\x1c\xbc\x73\xcc\xd6\x6f\x84\x8b\xe7\x32\xcd\x62\x41\xa3\x22\xad\x88\x48\xf3\x28\x21\x17\xc7\x21\xb4\x82\x84\x65\x11\x4d\x44\xcc\x3e\x68\xc6\xa2\x58\x94\x3c\x83\xfd\x34\x1d\xc6\x15\xc6\x52\xab\x7a\x90\x81\x36\x12\xb7\x0a\x4b\xed\x9d\x79\x49\x8b\x34\x27\x22\x61\xa2\x22\x7c\x93\x32\x7a\x09\x54\x37\xcc\x47\x54\xf7\xed\xd3\x63\x30\xd5\x26\x90\x27\xc7\xe1\x25\x85\x66\x36\x0a\xd0\x6e\xdc\x64\xe0\x7a\x77\x6a\x5c\x40\x1a\x7e\x2b\x96\x1c\x7c\x3a\x0f\xbe\x0f\x53\x6d\x00\xad\x01\xcf\xa3\xc1\x4a\x37\xb5\x02\x74\x3c\xed\xee\x3e\x35\xfd\x2d\xfe\xbb\xe9\x3d\x2a\x5e\x01\x4b\x6d\xa5\x15\xde\x02\xf1\xb6\x1b\x56\xd7\x9f\xb1\xd4\x96\x78\x3f\xde\x32\xbb\xff\x6a\x3b\x03\xe8\x60\x47\xdb\xc8\x68\x1a\xf7\xaa\xb6\xdd\xe0\x82\xef\x43\xb3\xef\x75\x0b\x88\x43\x18\x86\xff\xae\xfb\x1d\x00\x00\xff\xff\x64\xa0\x99\x0d\x76\x01\x00\x00")

func etcDockerfileBuildDebianBytes() ([]byte, error) {
	return bindataRead(
		_etcDockerfileBuildDebian,
		"etc/Dockerfile.build.debian",
	)
}

func etcDockerfileBuildDebian() (*asset, error) {
	bytes, err := etcDockerfileBuildDebianBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/Dockerfile.build.debian", size: 374, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeBootstrapMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xdb\x30\x14\x7d\xae\x7f\xc5\xa1\xcd\x83\x0d\xf6\xc6\x9e\x06\x85\x32\xd2\x46\xcb\xcc\xda\x64\x38\x69\xd8\x9b\x2b\x5b\xd7\xf1\xa5\x8e\x94\x49\xb2\xcb\x60\x3f\x7e\x38\x89\x93\xb4\x1d\x7b\x94\x74\xcf\xc7\x3d\x47\x57\xe8\xa4\x65\x59\x34\xe4\x50\x10\xeb\x35\x58\x97\x4d\xab\x48\xa1\xb2\x66\x03\x5f\x13\x9e\x36\x52\x73\x45\xce\x7f\xd8\x3c\x3f\x05\xf7\xe3\xd9\xf4\x71\x3c\x15\xf8\x72\x13\x64\x8f\xb3\x65\xfa\x20\xf2\xf9\xe2\xfc\x34\x1b\x2f\xd3\x95\xc8\x57\x22\x5b\xa4\xf3\xd9\xf9\xcb\x74\x7e\x7e\x1b\x5c\xc1\x6c\x3d\x1b\x2d\x9b\x93\x8b\x60\x92\xa5\x2b\x91\xe5\x13\xb1\xca\x7f\x64\xe2\x6b\xfa\x13\xd7\x37\x50\xd4\x0d\x0f\x27\x02\x8c\xc2\x77\xc3\x51\x32\x0a\x5d\x4d\x4d\x83\x35\x7b\x58\xea\x92\xad\xb4\x8e\xf0\x4d\x8c\x27\xf8\x83\xb2\xf5\x48\xca\x4f\xc9\xe7\x28\x08\x26\xf3\xbb\xef\x22\xcb\xd3\x87\xfd\x32\x28\x8a\xa6\x72\xf5\xc7\x51\x38\x6c\x18\x25\xca\x72\x47\xf6\xd5\xe4\xa0\x2f\x26\x7b\x07\xa5\x6c\x1a\x90\x2b\xe5\x96\x72\x65\xca\x67\xb2\xb9\x97\xeb\x78\x14\x9e\x83\xa2\xeb\xa3\xd5\x03\x3c\x8a\x06\xd6\xdb\xc7\xf4\x7e\x32\x64\x76\x34\xf3\x06\x9f\x14\x2d\x37\xea\x35\xe4\x40\xf8\x7f\x48\xf2\xc2\xbe\x4e\xd6\xa6\x0f\x5b\x51\xc5\x9a\x14\x0a\xaa\x65\xc7\xa6\xb5\xa8\x8c\xc5\x6e\xcc\x81\xb5\x63\x45\xf0\x56\x76\xec\x92\x92\x03\xae\x34\xfd\x42\x38\x0a\x8d\xe5\x35\x6b\xdc\xa5\x51\x8c\x56\x1f\x48\xa2\x00\x00\xae\xc0\x15\x5e\x08\xd2\xd2\x40\x70\x97\xc6\xe8\xc8\x16\xc6\x11\xd8\x81\x74\xdf\xaa\x42\xf1\xbb\x97\x97\x6d\xe3\x83\x8b\x95\xc8\x6e\xe7\x0b\xd1\xf7\xea\x6d\x4b\x01\x69\xc5\x55\x6f\x90\x2b\x2c\xb3\xf1\x2a\x5d\xe4\xcb\xf1\xf4\x68\xf7\x4d\xef\xec\x60\x3a\xb2\x96\x15\xa9\x93\xc9\x13\x2e\x8a\xb1\x37\xf7\x06\x77\xdd\x27\x74\x36\xf6\x4a\xf6\xb0\x83\x36\x1e\xac\xd1\x17\xb8\xfb\xf9\xdb\xd6\xd5\xbd\xa0\x62\xb7\x5b\x23\xe0\x6a\x2f\x57\xb1\x75\xfe\xc5\x58\x85\x51\xe8\xda\xc2\x79\x24\x31\xe2\xf7\x25\x47\xf1\x3f\x3f\x69\x14\x5c\xf4\xd4\x03\x2d\x6e\x70\xb9\x93\x3a\x5e\xf4\xc5\x28\xea\xa8\x31\xdb\x0d\x69\xdf\x27\xea\xd8\x68\x77\xb9\x77\xfd\x37\x00\x00\xff\xff\x2b\x2b\x66\x5c\xb6\x03\x00\x00")

func makeBootstrapMkBytes() ([]byte, error) {
	return bindataRead(
		_makeBootstrapMk,
		"make/bootstrap.mk",
	)
}

func makeBootstrapMk() (*asset, error) {
	bytes, err := makeBootstrapMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/bootstrap.mk", size: 950, mode: os.FileMode(420), modTime: time.Unix(1488107348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeFunctionsMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x4d\x0e\x82\x30\x10\xc5\xf1\x7d\x4f\xf1\x12\x58\x40\xd2\x2e\xdc\x72\x19\x32\xb4\x83\x12\xcb\x8c\xe9\x47\xbc\xbe\x51\x51\x49\x70\x3b\x79\xf9\xff\xa6\x01\x67\x4f\x37\x1e\x83\xfa\x2b\xa7\xb1\xd0\x79\xbb\xc0\x6b\x54\x81\xbf\x50\x42\x51\x50\x8c\x7a\x47\xcd\x0c\xc2\x7b\x8b\xe7\x96\x32\x52\x8d\x6c\x02\xcf\x8b\xf0\x31\x66\xda\x2e\xd7\x29\x17\x0c\xd6\x39\xdb\x76\xa7\xbe\x37\x2c\x81\x67\x63\x1a\x54\x39\xe2\x24\x5b\x24\xec\x99\xa2\x98\xf8\xa5\x2f\xf2\x7b\xc0\xeb\xba\x92\x84\x0f\xfe\x27\xf7\xe5\x9d\xb3\xc3\x9e\x7f\x04\x00\x00\xff\xff\xff\x00\xb3\xb9\xf8\x00\x00\x00")

func makeFunctionsMkBytes() ([]byte, error) {
	return bindataRead(
		_makeFunctionsMk,
		"make/functions.mk",
	)
}

func makeFunctionsMk() (*asset, error) {
	bytes, err := makeFunctionsMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/functions.mk", size: 248, mode: os.FileMode(420), modTime: time.Unix(1488075079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeRulesMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x5b\x6f\xdb\x46\x13\x7d\xd6\xfe\x8a\x81\x42\x21\x5c\xc4\x94\xbe\x20\x6f\xf2\xa7\xc6\x4a\xc4\x28\x42\x75\x09\x74\x71\x5b\xc4\x05\x41\x93\x43\x69\xe1\x25\xa9\x70\x97\x8a\x8b\xb6\xff\xbd\xd8\x5d\x5e\x6d\x59\x28\xf2\xd0\x27\x51\xc3\x33\x17\xce\x9c\x39\xbb\x1f\x76\xb3\xf9\xc4\x9b\x4d\x60\x38\x02\xcb\x16\x07\xe4\x1c\x42\x5f\x22\xbc\xe9\xf6\x62\xa7\x17\x3a\xbd\xdf\xbc\xde\x67\xaf\xb7\xf0\x7a\x9b\x2e\x25\x06\xfe\x65\xbc\xfd\x6c\x1c\x78\x1a\xf8\x92\xa5\x09\x1d\xdc\xe7\x8c\x87\x84\xbc\x82\x30\x0d\x1e\x30\x83\x2c\x4f\x24\x8b\x11\x82\x34\x8e\xfd\x24\x14\x64\xb2\xfa\xf8\xb3\xbb\xf6\x3e\x2e\x26\xf0\x7e\x54\xa0\x4a\xa3\x0e\xab\xcc\x96\x5d\xc3\x28\x98\x98\x85\x65\xbd\x5b\x3e\x47\x64\x79\x02\x8e\x93\xc5\x25\x68\x3b\x9e\x3e\x07\x49\x7f\x5f\xbe\xff\xb2\xdb\x7c\x7e\x0e\x38\xe6\xe2\x40\x8a\x6f\xbb\x5d\xcd\x77\x0b\xd7\xdb\x8e\xd7\x53\x77\xab\xa0\x83\xf4\x28\x07\x61\xc6\x4e\x98\x0d\x44\x16\x0c\xda\x38\xdd\x8a\xf7\xad\x56\x90\x32\xd9\xa7\xd9\xdc\xf5\xaa\x4c\xb3\xc5\x78\xea\x7a\xb7\xee\x7a\x33\x5b\x2d\xdd\x09\x7d\xe2\x35\x98\xe8\x8e\x44\x8c\xe3\x79\x7f\x93\x76\xb2\x9e\xdd\x96\xc1\x8a\x10\x22\x7c\xa8\xa3\xa0\x0c\x1a\x91\xfa\xba\x83\x7d\xcb\x5e\xef\x96\xdb\xd9\xc2\xf5\x56\x1b\x7a\x29\xfa\x72\xbc\x9d\xdd\xba\xad\xe8\xe7\x0a\xec\x57\xc3\xe6\x4c\x48\x48\x23\x60\xb1\xbf\x47\x01\x32\x2d\x66\x56\xd0\x4a\xc5\x19\x5d\xcc\x71\xf1\xf3\x5e\xec\x9d\x4a\xbd\x4f\xb9\x9f\xec\x9f\xf3\x6c\xba\xd2\x1c\x1b\xc1\x3e\x55\xcf\x5b\x77\xb3\x05\xf5\x21\xc6\x4e\x41\xa2\x90\xe0\x9c\xd4\xbb\xf9\xe4\xd3\x7c\x3c\xdd\xc0\x08\x9c\x5f\x21\xf6\x59\xd2\x3f\x61\x26\x58\x9a\xa8\x9a\x4d\x25\x45\x4e\x5a\x21\xf4\xf7\x8d\x2c\xbb\x5c\x1c\x5d\x8b\x36\x02\x26\x27\x96\xa5\x31\x26\x12\x4e\x7e\xc6\xfc\x7b\x8e\xa2\xe8\xc4\x6e\xe3\xae\x55\x3f\xef\xef\x79\x24\x0e\xa5\x71\x56\x70\xde\xac\x1d\x0b\xc1\xc9\xc1\xb2\x15\x96\x96\xab\x36\x5e\x4f\x37\xf0\x7e\x44\x5a\xbd\x2b\x76\xa8\x6a\xcf\x7a\xb7\xa4\x70\x47\x3a\xda\xbd\x4e\x48\x87\xd5\xbf\xd9\xc4\x00\x4e\x15\xa0\xc1\xdf\x1a\xd7\x22\xbf\xf6\xb8\x34\xbc\x72\x65\x8a\x56\xfd\x87\x55\x69\x8f\xe9\xca\xc0\x06\xfb\xf4\x4c\xa5\x2d\x26\xa9\x19\xb1\x08\x6e\xdd\xf5\x87\xd5\xc6\x05\x26\x20\x4f\x04\xca\x52\xab\xcc\xf8\x98\x00\x7c\xc4\x20\x97\x18\x02\x4b\xe0\x5b\xce\x24\x42\x9c\x86\x48\x58\x84\xdf\xc0\xb6\xec\x34\x63\x7b\x96\x94\x61\xe8\x15\xe4\x49\x88\x11\x4b\x30\xa4\xa4\xd3\x98\xd7\x9b\x11\x38\xdf\x08\x26\x21\x8b\x08\x19\xcf\xe7\xab\x5f\xdc\x89\x37\x5b\x7a\xa6\x40\xb5\x78\x30\x52\x25\xcf\xc7\xcb\xe9\x6e\x3c\x75\xd5\x73\xb9\xa1\x45\x87\x0b\xde\x41\x69\x9e\xae\x2a\xd3\x5d\x99\x4b\x93\xaa\xa6\x52\x43\x9b\xef\x48\xa7\xb9\x39\x70\x7e\x8d\xe0\xc5\xd1\xaa\x7e\x49\xcc\x62\x08\x52\x9e\x66\x02\x0e\xc8\x8f\x98\x09\x12\x04\x19\x86\x23\xb8\xc3\xaf\xff\xbb\x7e\xf7\x36\x26\x41\xf0\x07\x72\x9e\x7e\x2f\x4d\xef\x62\x0d\x11\x28\x8d\x25\x56\x81\xbe\x23\xe0\xe3\x31\xcd\x24\xc8\x03\x56\x9b\xa1\xb4\xc2\x57\xbe\x6a\x6d\x44\x7e\x2f\xe4\x15\xe8\x1f\x26\x73\x89\x25\x54\xa8\x49\xc8\x03\x92\x57\x50\xcb\x8f\x20\x26\x1e\x21\x3e\xe7\xc3\x42\x71\x48\xc9\x16\x43\x0a\xd2\x89\x1f\x42\x96\x81\x73\x84\xd6\x8b\x1a\x67\x98\x31\x24\x9d\x1b\xcb\xc6\x93\xcf\x61\xeb\x2e\xbe\x68\x55\x6c\x9e\x85\xf1\x83\xc4\xf8\x68\xc2\xc8\xf8\x58\xa9\x21\xa5\xa4\x73\xa3\xdd\xba\x65\xfd\xf0\xda\xb2\xa3\x34\x43\x3f\x38\xc0\xe9\xca\xb2\xcf\x0e\x9e\x5e\xdd\x59\xd6\x9f\x96\x7d\xa2\x7f\xd3\xd7\xf0\xff\x7a\x5b\x8c\x1c\xdf\x50\xf8\x09\x2c\xbb\x2a\x85\x76\x9f\x12\x9b\x56\xdf\xa3\xa8\x46\xc1\x91\x60\xd9\x81\xcf\x39\xe4\x09\x8a\xc0\x3f\xa2\x67\x58\xed\x49\x7f\x7f\xa5\x02\x3a\x51\x2b\x22\xf4\x09\x51\x1a\x38\x84\xbf\xb4\x16\x3a\x89\x2f\xd9\x09\xcd\xb3\x39\xe7\x48\xc3\x3e\x7c\x2a\xd1\x6d\x09\xe8\x94\xd5\xd4\xd2\x44\x21\xf6\x1f\xb0\x19\xdb\x61\x89\xc4\x2c\xf1\xb9\xc9\x5c\x64\x51\x05\xfc\xf0\xd9\x50\x27\xae\xd5\xa7\x99\xd8\xa4\x38\x9f\xb8\xb2\x16\xdc\x79\x56\x65\x27\x08\xc1\x40\xaf\x8d\xb2\x14\xe7\x08\x85\xfe\xa0\xdf\xef\x13\xa2\xdd\x54\xfd\x4d\xff\xe2\x8f\x71\xbc\x70\x76\xd5\x03\xdd\x8e\xa7\xf4\xe2\xf4\x5e\x8a\xa1\x45\xb0\xf3\xaf\x3d\x29\x1d\x72\x5f\x35\xa0\xa8\xbc\x31\xda\xc6\x6a\xfc\xe8\xa0\xcf\xf7\x90\x34\xbb\x61\x46\x7d\x21\x57\xfb\xdc\x6f\x46\xbc\x30\xe8\x66\x86\x17\x12\xd7\xa3\x3e\x3b\xd4\xfa\x96\x09\x8e\xc3\xc3\x88\xfb\x7b\xa1\xd6\xb8\xbe\x1b\xd0\xd7\xe0\xa4\xed\xda\x8b\xcb\x20\xf4\x55\x1c\xa2\xee\x8e\x25\x8f\xf4\x2d\x88\x74\x6e\x58\x04\x5f\xc1\xb2\xd5\xab\x90\x09\xa5\x76\x21\x85\xdf\xaf\x95\x90\x25\x7a\x72\x18\x1c\x52\x70\x10\xba\x96\xad\x25\x95\x3e\x01\x1b\xb3\x40\x49\xbb\xd7\xc6\xe1\x91\x49\x78\xab\x9f\x23\x46\x1a\x14\x52\x17\xda\x4b\x17\xa5\xcb\xc8\x9a\x17\x01\x47\x3f\x19\x92\x4e\x16\x83\x93\x45\xed\x0f\xfe\x27\x00\x00\xff\xff\x6a\x28\xc3\x09\x24\x0c\x00\x00")

func makeRulesMkBytes() ([]byte, error) {
	return bindataRead(
		_makeRulesMk,
		"make/rules.mk",
	)
}

func makeRulesMk() (*asset, error) {
	bytes, err := makeRulesMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/rules.mk", size: 3108, mode: os.FileMode(420), modTime: time.Unix(1488124800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Makefile": makefile,
	"etc/Dockerfile.build.debian": etcDockerfileBuildDebian,
	"make/bootstrap.mk": makeBootstrapMk,
	"make/functions.mk": makeFunctionsMk,
	"make/rules.mk": makeRulesMk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"etc": &bintree{nil, map[string]*bintree{
		"Dockerfile.build.debian": &bintree{etcDockerfileBuildDebian, map[string]*bintree{}},
	}},
	"make": &bintree{nil, map[string]*bintree{
		"bootstrap.mk": &bintree{makeBootstrapMk, map[string]*bintree{}},
		"functions.mk": &bintree{makeFunctionsMk, map[string]*bintree{}},
		"rules.mk": &bintree{makeRulesMk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


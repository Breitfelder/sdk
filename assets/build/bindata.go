// Code generated by go-bindata.
// sources:
// etc/build/Makefile
// etc/build/etc/build/Dockerfile.build.alpine.tpl
// etc/build/etc/build/Dockerfile.build.debian.tpl
// etc/build/etc/run.sh
// etc/build/make/bootstrap.mk
// etc/build/make/functions.mk
// etc/build/make/help.mk
// etc/build/make/manifest.mk
// etc/build/make/rules.mk
// DO NOT EDIT!

package build

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6b\xdc\x3e\x10\xc5\xef\xfa\x14\x0f\xb2\x87\x15\x64\x77\xe1\x7f\xfc\x43\x02\x81\x94\x14\xd2\x96\x42\xd2\xbb\x65\x6b\x1c\xab\x96\x25\x67\x34\xde\x26\xdf\xbe\x48\x5b\xef\xba\x81\x66\xdb\xe3\x68\x9e\xde\xfc\xe6\x49\x17\x78\xec\x5c\x82\x4b\x90\x8e\x40\x41\xf8\x75\x8c\x2e\x08\x62\x5b\x4e\xea\xda\xb7\xa9\xc3\x60\x7a\xc2\xc3\xed\xfd\x65\x39\x7c\xb8\xbd\x47\xea\xe2\xe4\x2d\x6a\x42\x92\xc8\x64\x61\x44\x5d\xa0\x4a\xb6\xf7\xb1\x31\xe2\x62\xa8\x2e\xf1\x44\x81\xd8\x08\x59\xd0\x0b\x35\x93\xb8\xf0\x84\xea\x60\xb9\x49\xb6\xc7\xc8\x34\x1a\xa6\x4d\x3d\x39\x6f\xab\x2d\x3e\x9b\xf0\x0a\xeb\xda\x96\x98\x42\xf6\xdb\x1b\x4e\x30\x09\xd5\xa7\x9b\x2f\x77\xdf\x6e\xee\x3e\x54\x30\x4c\x60\x7a\x9e\x1c\x93\xcd\x38\x2e\x65\x95\x33\xb5\xa7\x54\x9a\xf4\x22\x6c\x9a\x32\xab\xe5\x38\x64\xe2\x4c\x36\x98\xe0\x5a\x4a\xb2\x95\x38\xf8\x0a\x46\xca\x2a\x1c\xa3\xc0\x04\x5b\x8a\x91\xe3\x77\x6a\x04\xc2\x26\x24\x6f\x8a\x85\x13\x48\x84\x39\x24\xe0\x42\xe3\x27\x9b\xed\x8c\x9c\x1c\x2b\x4c\xe9\xed\x66\xa7\x9e\xc4\xe8\xb7\x4a\xcd\xa9\xe0\x0a\xab\x75\xea\xc8\x7b\x8c\x3f\xac\x56\x8b\xc0\x4a\x6b\x2e\xf4\x6e\x9b\x6c\xaf\x66\x9f\xc3\xb5\x93\x56\xef\x32\xd0\xee\xb8\xd4\xd0\x2b\x19\xc6\xdf\x87\x2c\xd5\x32\x8c\x6a\x9e\x3b\xf4\xd6\x31\x36\x23\x56\xeb\xc5\x1d\xad\x95\x5a\x2c\xf0\xff\x89\xb3\x89\xc3\x90\x23\xda\xec\xb1\x10\xfc\x77\x8d\x9d\xa5\xfd\x2e\x4c\xde\x6b\xe5\x5a\x7a\xc6\x7a\xb5\x4e\xc2\x2e\x1b\x9f\x84\x5a\x5f\x6a\x05\x00\xab\x35\x31\x47\x5e\xc6\x54\x2d\xbe\x91\xd9\x1b\xe7\xf3\x2b\x1e\x5f\x0d\x5f\x6f\x1e\x3f\x6a\x45\xc1\xba\xf6\xc8\x96\xe3\x4c\xef\xd3\x1d\x24\x7f\xc5\x57\xa4\x7f\x24\x2c\xdd\x7f\x61\x9c\x99\xde\xf8\x1f\x7f\x03\xae\xb1\x5a\xcf\x85\xd6\xea\xd7\x7f\x3a\xfb\xb4\xef\xe9\xda\x29\x34\xb9\x4c\xe7\x84\x75\x8c\x92\x84\xcd\x78\x4e\xd8\x91\x3f\xab\xe1\xc9\x53\x99\x58\x5a\xc6\x92\xc5\x15\x84\x27\xfa\x19\x00\x00\xff\xff\x70\xfb\xa7\xb7\x51\x04\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 1105, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcBuildDockerfileBuildAlpineTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x4f\xdb\x30\x14\x7d\x26\xbf\xe2\x2a\x8b\xd0\x36\xc9\x31\x14\xd6\x50\xa4\x3d\x04\x9a\x75\xd5\x20\x41\x21\xe5\x69\x52\xe4\xd8\xce\x87\xea\xc4\x99\xed\x40\x07\xe2\xbf\x4f\x49\x4a\x4b\x25\xb4\x27\xe7\xde\x73\xee\xb9\xf6\x39\xf9\x11\x47\xb7\xe0\xbc\xcc\xa3\xeb\x5f\x41\x9c\x5e\xad\x96\x37\xf3\x34\xf4\x93\xe5\x43\x90\x2e\x6f\xfd\x45\xf0\x6a\x59\x41\xf8\x00\x8b\xe8\xc6\x0f\x17\xe9\x7d\x7c\x9d\xae\xe2\x1b\x28\x8d\x69\xf5\x25\xc6\x85\x14\xa4\x29\x5c\xa9\x0a\xcc\x04\x2e\xa4\xf3\x12\xaf\xc2\x64\x79\x1b\xa4\x8b\x28\x7d\x08\xe2\xfb\x65\x14\xbe\xba\x5a\x51\xd7\x10\xe5\x16\xcf\x96\xf5\x09\x72\x25\xeb\xbd\x40\x65\xca\x2e\x73\xa9\xac\x31\x93\x74\xcd\x15\x12\x55\xa6\x88\xfa\xbb\x95\xc6\x99\x90\x19\xae\x89\x36\x5c\xe1\x53\xf7\x02\x13\xd1\x56\x0d\xc7\xf3\x81\x9c\x57\x82\x5b\x96\x3f\x9f\xef\xf4\x14\x79\x72\x47\xcd\x4e\x73\x45\x65\x63\x78\x63\xfe\x23\x7f\x7a\x36\xa1\xcc\x3b\xf1\xa6\x17\xfc\x2c\xa3\x93\xe9\x6c\x76\x32\xe1\xe7\xd4\xcb\xbe\x79\xb3\xc9\xc9\x59\x3e\x9d\x32\x3a\xcb\xa7\xe7\xef\x77\x37\x12\xb5\x15\x75\x5b\x62\x68\x09\xd8\xb2\xe2\x55\x08\x9a\x1b\x40\x7c\x03\xbf\xad\xa3\xe3\x63\x20\xed\x1a\x08\x63\x80\x50\x23\x11\x25\xb4\xe4\x80\xd0\x63\xa5\x4c\x47\x04\xb8\x59\x57\x09\x86\x18\x6f\x75\x4f\x3f\xca\x88\x2e\x87\x8f\x82\xd2\xe1\xac\x3b\x2d\x10\xe3\x8f\x43\x21\x5b\xde\x68\x2d\x46\x82\xec\x8f\x71\x05\xdf\xb4\x52\x19\x58\x44\x71\x14\x25\xe9\x55\x14\x25\xf7\x49\xec\xdf\x7d\xb7\x9d\xcf\x85\x04\xde\x3c\x6e\xa1\x2f\xf6\x7e\xe6\xa9\xe8\x6f\xf9\x07\x6c\xe7\x30\x4e\x1b\x50\x04\xdb\x28\xc7\x9c\xb6\xef\x30\x44\x01\xba\x06\xdc\x69\x85\x85\xa4\x44\x00\xda\x3c\xe7\x1f\x52\x55\xfd\x61\x9b\xb2\x77\xd3\xb8\x90\x58\x2b\xba\x85\x46\xff\x50\x3b\x01\x54\xc1\xa1\xa9\x23\xc1\xc5\x35\x59\x73\xf7\xcd\x9f\xdd\x1e\xa4\x72\xc0\x5f\x0f\xa8\xbd\xe1\x8c\x1f\x78\xfb\xf6\xdf\xde\xf9\xc9\x4f\xc0\x85\x1c\xca\xa1\x70\xc6\x26\xce\xaa\xe6\xf2\xf0\x72\x7d\xc7\xe9\xb1\x31\xd4\x7a\xcd\x2a\x05\xa8\x1d\x0c\x1b\x46\xb4\xa2\xf6\xbe\xca\xaa\xc6\x86\xfe\x91\x65\x2d\x19\xa0\x18\x3c\xcf\xdb\xa1\xf6\xbf\x00\x00\x00\xff\xff\xbb\xef\xcb\x99\x5a\x03\x00\x00")

func etcBuildDockerfileBuildAlpineTplBytes() ([]byte, error) {
	return bindataRead(
		_etcBuildDockerfileBuildAlpineTpl,
		"etc/build/Dockerfile.build.alpine.tpl",
	)
}

func etcBuildDockerfileBuildAlpineTpl() (*asset, error) {
	bytes, err := etcBuildDockerfileBuildAlpineTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/build/Dockerfile.build.alpine.tpl", size: 858, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcBuildDockerfileBuildDebianTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x6b\x83\x30\x1c\xc5\xcf\xf3\x53\xfc\x11\xf1\x16\x73\x19\x13\x7a\x73\x35\x73\x32\x4d\x46\xaa\xee\x32\x08\x56\x69\x2a\x8b\xa6\x44\x85\xd2\xd2\xef\x3e\x16\xb7\x95\x42\x8f\xef\xf7\xf2\xf2\xde\xff\x85\xb3\x1c\xbc\x73\xcc\xd6\x6f\x84\x8b\xe7\x32\xcd\x62\x41\xa3\x22\xad\x88\x48\xf3\x28\x21\x17\xc7\x21\xb4\x82\x84\x65\x11\x4d\x44\xcc\x3e\x68\xc6\xa2\x58\x94\x3c\x83\xfd\x34\x1d\xc6\x15\xc6\x52\xab\x7a\x90\x81\x36\x12\xb7\x0a\x4b\xed\x9d\x79\x49\x8b\x34\x27\x22\x61\xa2\x22\x7c\x93\x32\x7a\x09\x54\x37\xcc\x47\x54\xf7\xed\xd3\x63\x30\xd5\x26\x90\x27\xc7\xe1\x25\x85\x66\x36\x0a\xd0\x6e\xdc\x64\xe0\x7a\x77\x6a\x5c\x40\x1a\x7e\x2b\x96\x1c\x7c\x3a\x0f\xbe\x0f\x53\x6d\x00\xad\x01\xcf\xa3\xc1\x4a\x37\xb5\x02\x74\x3c\xed\xee\x3e\x35\xfd\x2d\xfe\xbb\xe9\x3d\x2a\x5e\x01\x4b\x6d\xa5\x15\xde\x02\xf1\xb6\x1b\x56\xd7\x9f\xb1\xd4\x96\x78\x3f\xde\x32\xbb\xff\x6a\x3b\x03\xe8\x60\x47\xdb\xc8\x68\x1a\xf7\xaa\xb6\xdd\xe0\x82\xef\x43\xb3\xef\x75\x0b\x88\x43\x18\x86\xff\xae\xfb\x1d\x00\x00\xff\xff\x64\xa0\x99\x0d\x76\x01\x00\x00")

func etcBuildDockerfileBuildDebianTplBytes() ([]byte, error) {
	return bindataRead(
		_etcBuildDockerfileBuildDebianTpl,
		"etc/build/Dockerfile.build.debian.tpl",
	)
}

func etcBuildDockerfileBuildDebianTpl() (*asset, error) {
	bytes, err := etcBuildDockerfileBuildDebianTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/build/Dockerfile.build.debian.tpl", size: 374, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcRunSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x4b\xc3\x40\x10\x46\xef\xf3\x2b\x3e\xe3\xe0\x1e\xa4\x74\x6b\x8e\x65\xb5\x0a\x4b\x11\x62\x16\x62\xc9\x65\xbb\xd0\x6d\xdd\x9a\x45\xb3\x85\x9a\x83\x42\x7f\xbc\x68\x13\x48\x8f\xf3\x98\x99\xf7\xae\xaf\xa6\xdb\x98\xa6\x5b\xff\xd5\xd0\x9b\x3f\x7e\xec\x7e\x7c\x52\x62\x2d\xf3\xdc\xca\x79\x3e\x6b\x05\xa5\xc3\xb1\xf5\x9f\x8a\xc5\x3a\x58\xd9\x0a\xa2\xb8\x87\x05\xeb\xb2\x7e\xae\x4c\xf9\xa2\xcb\x15\xdc\x1c\x5d\x13\x12\x01\xc0\x88\xab\xcc\x8e\xd7\x5c\x46\xfb\x48\x14\x76\xcd\x01\x93\x00\x1e\x74\xb7\x97\xcf\x78\xc1\x67\x25\x51\x61\x96\x6a\xc3\x0b\xdc\xdd\xdf\xcc\x36\x54\xe9\x55\xfd\x58\x28\x7e\xe8\x0b\xce\x33\x26\xef\x1d\x24\x1c\x4e\xa7\x3f\x58\xeb\xea\xc9\xbc\x6a\x38\x8c\x9a\xfe\x95\x19\x17\x66\xd9\x27\x7c\xc7\x6e\xb8\xff\x0d\x00\x00\xff\xff\x3a\xd1\x31\xa2\x01\x01\x00\x00")

func etcRunShBytes() ([]byte, error) {
	return bindataRead(
		_etcRunSh,
		"etc/run.sh",
	)
}

func etcRunSh() (*asset, error) {
	bytes, err := etcRunShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/run.sh", size: 257, mode: os.FileMode(448), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeBootstrapMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xdb\x30\x14\x7d\xae\x7f\xc5\xa1\xcd\x83\x0d\xf6\xc6\x9e\x06\x85\x32\xd2\x46\xcb\xcc\xda\x64\x38\x69\xd8\x9b\x2b\x5b\xd7\xf1\xa5\x8e\x94\x49\xb2\xcb\x60\x3f\x7e\x38\x89\x93\xb4\x1d\x7b\x94\x74\xcf\xc7\x3d\x47\x57\xe8\xa4\x65\x59\x34\xe4\x50\x10\xeb\x35\x58\x97\x4d\xab\x48\xa1\xb2\x66\x03\x5f\x13\x9e\x36\x52\x73\x45\xce\x7f\xd8\x3c\x3f\x05\xf7\xe3\xd9\xf4\x71\x3c\x15\xf8\x72\x13\x64\x8f\xb3\x65\xfa\x20\xf2\xf9\xe2\xfc\x34\x1b\x2f\xd3\x95\xc8\x57\x22\x5b\xa4\xf3\xd9\xf9\xcb\x74\x7e\x7e\x1b\x5c\xc1\x6c\x3d\x1b\x2d\x9b\x93\x8b\x60\x92\xa5\x2b\x91\xe5\x13\xb1\xca\x7f\x64\xe2\x6b\xfa\x13\xd7\x37\x50\xd4\x0d\x0f\x27\x02\x8c\xc2\x77\xc3\x51\x32\x0a\x5d\x4d\x4d\x83\x35\x7b\x58\xea\x92\xad\xb4\x8e\xf0\x4d\x8c\x27\xf8\x83\xb2\xf5\x48\xca\x4f\xc9\xe7\x28\x08\x26\xf3\xbb\xef\x22\xcb\xd3\x87\xfd\x32\x28\x8a\xa6\x72\xf5\xc7\x51\x38\x6c\x18\x25\xca\x72\x47\xf6\xd5\xe4\xa0\x2f\x26\x7b\x07\xa5\x6c\x1a\x90\x2b\xe5\x96\x72\x65\xca\x67\xb2\xb9\x97\xeb\x78\x14\x9e\x83\xa2\xeb\xa3\xd5\x03\x3c\x8a\x06\xd6\xdb\xc7\xf4\x7e\x32\x64\x76\x34\xf3\x06\x9f\x14\x2d\x37\xea\x35\xe4\x40\xf8\x7f\x48\xf2\xc2\xbe\x4e\xd6\xa6\x0f\x5b\x51\xc5\x9a\x14\x0a\xaa\x65\xc7\xa6\xb5\xa8\x8c\xc5\x6e\xcc\x81\xb5\x63\x45\xf0\x56\x76\xec\x92\x92\x03\xae\x34\xfd\x42\x38\x0a\x8d\xe5\x35\x6b\xdc\xa5\x51\x8c\x56\x1f\x48\xa2\x00\x00\xae\xc0\x15\x5e\x08\xd2\xd2\x40\x70\x97\xc6\xe8\xc8\x16\xc6\x11\xd8\x81\x74\xdf\xaa\x42\xf1\xbb\x97\x97\x6d\xe3\x83\x8b\x95\xc8\x6e\xe7\x0b\xd1\xf7\xea\x6d\x4b\x01\x69\xc5\x55\x6f\x90\x2b\x2c\xb3\xf1\x2a\x5d\xe4\xcb\xf1\xf4\x68\xf7\x4d\xef\xec\x60\x3a\xb2\x96\x15\xa9\x93\xc9\x13\x2e\x8a\xb1\x37\xf7\x06\x77\xdd\x27\x74\x36\xf6\x4a\xf6\xb0\x83\x36\x1e\xac\xd1\x17\xb8\xfb\xf9\xdb\xd6\xd5\xbd\xa0\x62\xb7\x5b\x23\xe0\x6a\x2f\x57\xb1\x75\xfe\xc5\x58\x85\x51\xe8\xda\xc2\x79\x24\x31\xe2\xf7\x25\x47\xf1\x3f\x3f\x69\x14\x5c\xf4\xd4\x03\x2d\x6e\x70\xb9\x93\x3a\x5e\xf4\xc5\x28\xea\xa8\x31\xdb\x0d\x69\xdf\x27\xea\xd8\x68\x77\xb9\x77\xfd\x37\x00\x00\xff\xff\x2b\x2b\x66\x5c\xb6\x03\x00\x00")

func makeBootstrapMkBytes() ([]byte, error) {
	return bindataRead(
		_makeBootstrapMk,
		"make/bootstrap.mk",
	)
}

func makeBootstrapMk() (*asset, error) {
	bytes, err := makeBootstrapMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/bootstrap.mk", size: 950, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeFunctionsMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x4d\x0e\x82\x30\x10\xc5\xf1\x7d\x4f\xf1\x12\x58\x40\xd2\x2e\xdc\x72\x19\x32\xb4\x83\x12\xcb\x8c\xe9\x47\xbc\xbe\x51\x51\x49\x70\x3b\x79\xf9\xff\xa6\x01\x67\x4f\x37\x1e\x83\xfa\x2b\xa7\xb1\xd0\x79\xbb\xc0\x6b\x54\x81\xbf\x50\x42\x51\x50\x8c\x7a\x47\xcd\x0c\xc2\x7b\x8b\xe7\x96\x32\x52\x8d\x6c\x02\xcf\x8b\xf0\x31\x66\xda\x2e\xd7\x29\x17\x0c\xd6\x39\xdb\x76\xa7\xbe\x37\x2c\x81\x67\x63\x1a\x54\x39\xe2\x24\x5b\x24\xec\x99\xa2\x98\xf8\xa5\x2f\xf2\x7b\xc0\xeb\xba\x92\x84\x0f\xfe\x27\xf7\xe5\x9d\xb3\xc3\x9e\x7f\x04\x00\x00\xff\xff\xff\x00\xb3\xb9\xf8\x00\x00\x00")

func makeFunctionsMkBytes() ([]byte, error) {
	return bindataRead(
		_makeFunctionsMk,
		"make/functions.mk",
	)
}

func makeFunctionsMk() (*asset, error) {
	bytes, err := makeFunctionsMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/functions.mk", size: 248, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeHelpMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4b\x8f\xdb\x36\x10\x3e\x97\xbf\x62\x10\x04\xe8\xc5\xeb\xdc\x17\x28\xd0\x57\x0e\x0b\xa4\x39\xa4\xee\x7d\xb9\xe4\xc8\x9a\x2c\x45\xaa\xc3\x91\x13\x17\xfd\xf1\x01\x5f\x96\xbc\x2b\xad\x79\xb1\xf9\x98\x6f\x5e\xdf\xcc\xc8\x62\x47\x1e\xa1\x47\x37\x0a\x7e\x17\xf5\xf4\xe4\xba\xd8\xdf\x45\xfb\x0c\x4f\x13\x39\x0b\xf1\x1c\x05\x07\xf5\xcb\xfa\x52\xea\xd0\x23\x14\xa1\x2b\x81\x8c\x18\x41\x02\x9c\xc3\x94\x7e\xca\xa5\xf6\x16\x04\xa3\x80\x6e\x42\x96\xe9\x84\xbc\x87\x07\x51\x26\x78\xd1\xe4\x23\x44\x3c\x21\x6b\x07\x3c\x39\x8c\xb3\xb0\x0d\xe6\x19\x19\xea\x33\xe4\xb8\x03\xfc\x8e\x66\x12\xcc\x98\x71\x07\x27\xed\xc8\x6a\x41\x25\x3d\x56\xe4\x1d\xa0\x98\xbd\x52\x5f\xfe\xf9\xf4\xf1\x6f\x35\xe8\x67\xac\x68\x97\x95\xb7\xb1\x3e\xff\x39\x36\x35\x34\xe8\x23\xee\xc0\x84\x61\x24\x47\xfe\x08\x09\xd3\x07\x1e\xb4\xa3\xff\x90\x15\xac\xac\xf4\x38\x78\xf4\x52\x1c\x4d\x02\x5a\xe8\x84\x8b\x0b\xea\xc0\x23\x5a\xb4\x60\xb4\x6b\xb8\xab\x60\xd9\xfb\xfb\x62\xde\x5d\xc5\x49\xb0\xe5\xa0\xc5\xed\xf7\x62\x7d\xd2\xc5\xf8\xef\x44\x8c\x76\x15\x6d\xe9\x55\x8e\xa9\x0d\x20\x3d\xc5\xbd\x5a\x04\xa5\xa9\x81\xea\x36\xc6\x1b\x4e\xec\x80\x3c\x90\x17\xe4\x91\x51\x36\x54\x3b\xed\x8f\x53\x56\x1b\xbc\x3b\xc3\xc8\x38\x6a\xae\xd0\xd1\x30\x8d\x92\x0d\xba\xe4\x72\x23\x1e\x17\xf5\x7b\x38\x04\x18\x91\xbb\xc0\x43\xf6\x01\x28\x36\xe9\x08\xd9\x9b\x5b\xb1\x1d\x99\x4e\x5a\x30\xc7\xf8\x1e\x1e\x97\xce\xdf\x65\x77\xbc\x76\x8f\x50\x8a\xc3\x26\x1f\xb7\x80\xfe\xd2\xcf\xd8\x91\xc3\xfa\x06\x38\x04\x81\xd0\xe5\xff\x23\x87\xaf\x68\x04\xc8\x47\xb2\xd8\x4e\xb3\xae\x0d\x07\x2b\xb1\xaf\x73\x52\x32\xfd\x2a\x27\x17\x26\x2e\x02\x53\xe5\x72\x85\xcd\xab\x05\x56\x3b\x97\x45\x27\x4f\x52\x2a\xa6\xd9\x74\x41\x88\xd7\xc6\xae\x9a\x59\xca\x67\xae\xc2\x54\xbb\xf5\x30\x97\xdd\x15\xd1\x2a\x53\x80\xae\x8c\x9b\x79\xb6\xcc\xfa\x6c\x18\x74\x81\x57\x99\xb7\x4c\xfd\xaa\x71\x2f\xe8\xf0\x8a\x0d\xd7\x99\x5f\x85\x78\x5c\x58\xb8\x49\x86\xd5\xc4\xaf\xc2\xdd\x26\xc3\xeb\xc4\x67\x0b\x2e\x79\xbf\x15\xa3\x37\x98\x30\x4e\xb1\x5f\xd2\x3e\x6d\xe7\xde\xf8\xa2\xd9\xa5\x22\x4c\x97\x7f\x96\x33\xc6\x23\x45\xe1\xf3\x1e\x0e\x3d\xc5\xcd\x16\x05\x46\x7b\x78\xc2\x52\xdb\xd5\x52\xbb\x70\x53\xc3\x81\xf5\x89\xe2\xdd\x1f\x0f\x80\xfe\x44\x1c\xfc\x80\x7e\x3d\x56\xa9\xbd\x7d\x9d\xa2\xc0\xb7\x1e\x7d\x4a\x23\x4f\xde\xa7\xcc\x25\x5f\x35\x88\x3e\x36\xc7\x5a\xa7\xaf\x82\x6d\x5b\x6a\xc3\x4c\xcc\xa9\x4d\xd5\x1e\x59\x45\x8c\x43\xed\x67\x5d\x79\x1b\x2f\x45\x51\x47\x0c\x31\x1a\x09\x4c\x98\x1a\xe3\xc3\xe7\xc3\xc7\x2f\x9f\x7f\xfb\x04\x65\x78\x1c\xbe\x05\x68\x7c\xa8\xb3\x49\xf3\xdc\x76\x53\xf8\x78\x2a\x6c\x28\x33\xae\xce\x80\x02\x3d\x68\xf2\xb5\xa7\xab\x0d\x8a\x25\x81\x8d\x5e\x54\x92\xb0\xd0\xfa\xa2\x37\xbd\xd5\x87\xda\x20\x94\x1e\xcf\x8d\x6b\xf9\xa2\x35\x66\x88\x23\x1a\xea\xc8\x24\x02\x0d\xda\xdb\xa8\x5e\x14\x20\x4f\x5e\x68\xc0\xbd\x52\x87\x00\xdd\xc4\xd2\x23\x27\xee\x4c\x29\x95\x5a\x28\x78\x18\x1d\xea\x88\x70\x0c\x29\x0e\xbd\xc8\x18\xef\x3f\x7c\xb0\xc1\xec\xd3\xa0\xdf\xc7\x5e\xa1\xb7\xd8\x29\x95\x3e\x0c\xee\xd5\x4f\xbf\xa2\xe9\x03\xbc\x7b\xff\xbe\x7d\x7a\xbc\x83\xff\x61\x08\x8c\xea\x47\x00\x00\x00\xff\xff\x03\x57\xdf\xd9\x93\x08\x00\x00")

func makeHelpMkBytes() ([]byte, error) {
	return bindataRead(
		_makeHelpMk,
		"make/help.mk",
	)
}

func makeHelpMk() (*asset, error) {
	bytes, err := makeHelpMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/help.mk", size: 2195, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeManifestMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x71\xf4\x73\x0f\x75\x74\x77\xb5\x2d\x2a\x2d\x2e\xe1\x0a\x0a\xf5\x0b\xf1\xf4\x75\x8d\xf7\x0f\xb6\x4d\x49\x4d\xca\x4c\xcc\x83\x8b\xf8\x39\x86\x78\x86\xb9\xc6\x87\xb9\x06\x05\x7b\xfa\xfb\xd9\xe6\x65\xa6\x67\x94\xe4\x54\xea\x1a\x19\x18\x9a\xeb\x1a\x18\xe9\x1a\x19\xc0\x55\xba\xfb\xc3\x55\x19\xea\x59\x70\x01\x02\x00\x00\xff\xff\x3c\x36\x04\x90\x61\x00\x00\x00")

func makeManifestMkBytes() ([]byte, error) {
	return bindataRead(
		_makeManifestMk,
		"make/manifest.mk",
	)
}

func makeManifestMk() (*asset, error) {
	bytes, err := makeManifestMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/manifest.mk", size: 97, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makeRulesMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5b\x6f\xdb\x36\x14\x7e\x36\x7f\xc5\x81\x2b\xa3\x22\x1a\xd9\xd8\xab\x3b\xaf\x76\x6b\xd5\x15\xe6\x4b\xe0\x4b\xb6\x61\x19\x04\x45\xa2\x6c\xc2\x12\xe5\x50\x94\xda\x61\xdb\x7f\x1f\x28\x52\xb7\xf8\x92\xee\x65\x4f\x91\x0f\xbf\x73\x3f\xe7\x23\xf3\x71\xe7\xcc\xa7\xae\x33\x85\xe1\x08\x0c\x33\x3d\x90\x28\x82\xc0\x13\x04\xde\x75\x7b\xb1\xd5\x0b\xac\xde\x6f\x6e\xef\x8b\xdb\x5b\xb8\xbd\x4d\x17\x23\x05\xbf\x9f\x6c\xbf\x28\x85\x28\xf1\x3d\x41\x13\x86\x07\x4f\x19\x8d\x02\x84\xd6\xbb\xa5\x36\x15\x1c\xeb\x43\x22\xfc\x01\xcf\x58\x3f\x3d\x48\x80\xfb\x60\xaf\x3f\xae\x36\xb6\x04\xea\xcf\xd1\x0f\x60\x98\xeb\xdd\x12\x23\xf4\x06\x82\xc4\x3f\x12\x0e\x3c\x63\x82\xc6\x04\xfc\x24\x8e\x3d\x16\xa4\x68\xba\xfa\xf4\xb3\xbd\x76\x3f\x2d\xa6\xf0\x61\xa4\x51\xa5\xb0\x08\x4c\x8a\x0d\xb3\x86\x61\x50\x51\x69\x89\x8c\xed\x0c\xc1\x33\x06\x96\xc5\x63\xb0\x44\x89\xdb\x4e\x66\xe7\x38\xe1\xed\xcb\xf3\xfb\xdd\xe6\xcb\x39\xe0\x94\xa5\x07\xa4\x0b\xf4\xb0\x9a\xef\x16\xb6\xbb\x9d\xac\x67\xf6\x56\x42\x07\xc9\x49\x0c\x02\x4e\x73\xc2\x07\x29\xf7\x07\x6d\x5c\x51\xcf\x0f\xad\x7a\xa2\xd2\xd9\x67\x67\x6e\xbb\x95\x27\x67\x31\x99\xd9\xb2\x7e\x1b\x67\xb5\xb4\xa7\xf8\x85\xd6\x60\x5a\x14\x25\xa4\x11\xe9\x8b\x53\x74\xd9\x86\x72\x3d\x5d\x3b\x0f\xa5\x41\x6d\xe6\xac\x65\x45\xf5\x9a\x36\x0b\x41\xbf\xe8\xd4\xd6\x59\xd8\xee\x6a\x83\x5f\xf3\xb3\x9c\x6c\x9d\x07\xbb\xe5\xe7\x62\xb8\xca\xb4\x34\x86\xde\x40\x44\x53\x01\x49\x08\x34\xf6\xf6\x24\x05\x91\xe8\x46\xea\x69\x95\xb6\x46\x37\xfd\xdc\x4c\xf6\x6a\x35\xa5\xeb\x7d\x12\x79\x6c\x7f\x3e\x7c\xb3\x55\x31\x78\x23\xd8\x27\xf2\x7b\x6b\x6f\xb6\x20\x93\x51\x72\x0c\x82\xa4\x02\xac\x5c\x9e\xcd\xa7\x9f\xe7\x93\xd9\x06\x46\x60\xfd\x0a\xb1\x47\x59\x3f\x27\x3c\xa5\x09\x93\x31\xab\x48\xb4\x4f\x5c\x21\x8a\xfc\x46\x86\x59\xee\x63\x11\x4b\x21\x04\xc2\x72\xca\x93\x98\x30\x01\xb9\xc7\xa9\xf7\x14\x91\x54\x57\x62\xb7\xb1\xd7\xb2\xa6\x4f\x4f\x51\x98\x1e\x4a\xa1\xa3\x17\x41\x6d\x33\x0d\xc0\xca\xc0\x30\x25\x16\x97\x1b\x3c\x59\xcf\x36\xf0\x61\x84\x5a\xb5\xd3\x8b\x55\x95\x47\xee\x23\x3c\xa2\x4e\xa1\x5e\x3b\xc4\xc3\xea\x97\x33\x55\x80\xbc\x02\x34\x26\xba\xc6\xb5\xd6\x41\x69\x10\xb0\x97\x0f\xce\x7a\xb5\x5c\xd8\xcb\xed\xed\x5e\x3e\xa2\xce\xad\xf3\x72\xe7\x74\x65\xff\xcf\x24\xf2\xa2\xff\x0a\x36\xd8\x27\xaf\x27\xd6\x9e\xc3\xf3\xc4\x5a\xe7\x72\x02\x68\x58\x32\x24\xd0\x14\x32\x96\x12\x51\xd2\xa3\x1a\x0e\x9a\x02\xf9\x46\xfc\x4c\x90\x00\x28\x83\xe7\x8c\x0a\x02\x71\x12\x10\x44\x43\xf2\x0c\xa6\x61\x26\x9c\xee\x29\x2b\xcd\xe0\x3b\xc8\x58\x40\x42\xca\x48\x80\x51\xa7\x31\x0d\xef\x46\x60\x3d\x23\xc2\x02\x1a\x22\x34\x99\xcf\x57\xbf\xd8\x53\xd7\x59\xba\x2a\x40\xb9\xda\x30\x92\x21\xcf\x27\xcb\xd9\x6e\x32\xb3\xe5\x77\xc9\x03\xba\x21\x7a\xaa\xa1\x14\xcf\x56\x95\xe8\xb1\xf4\x55\x8c\x6c\x3d\xa8\x8d\x0b\xe5\x11\x75\x9a\x7b\x09\x97\x97\x14\xae\x4e\x82\xac\xd7\x57\x02\xe4\xdb\x29\xe1\x02\xc4\x81\x54\xeb\x22\x09\xc4\x8b\xa2\xe4\xab\xdc\xa5\x34\x7b\x4a\xc5\x1d\x14\x7f\xa8\xc8\x04\x29\xa1\xa9\x2c\xa0\x38\x10\xf4\x06\x6a\x5e\x4a\x91\xb2\x87\x90\x17\x45\x43\x4d\x43\xa8\x9c\x09\xd5\x7a\xd4\x19\xab\xcb\x0b\xe2\x63\x40\x39\x58\x27\x68\x01\x6a\xbc\x6a\xac\x52\x20\xb9\x17\xc1\xd6\x5e\xdc\x17\xb4\xd9\xbc\x7f\xe3\xa3\x20\xf1\x49\x99\x11\xf1\xa9\xa2\x4b\x8c\x51\x67\x5c\xa8\x75\xcb\x3c\xe0\xad\x61\x86\x09\x27\x9e\x7f\x80\xfc\xce\x30\x2f\xf6\x0d\xdf\x3d\x1a\xc6\x5f\x86\x99\xe3\x7f\xf0\x5b\xf8\xb1\xde\x0d\xc5\xd7\x63\x0c\x3f\x81\x61\x56\xa1\xe0\x6e\x9d\x50\x7b\x3e\x71\x95\x97\x9c\x18\x0c\x96\x00\xc3\xf4\xbd\x28\x82\x8c\x91\xd4\xf7\x4e\xc4\x55\xc3\xe9\x0a\x6f\x7f\x27\x0d\x5b\x61\xcb\x32\xf4\x51\x67\xcc\xe3\x96\x0c\x21\x49\x9d\x43\xf8\x1b\x72\x2f\xa2\xc5\xdb\x43\x0a\x2c\xe6\x09\x9a\xeb\x6f\x75\x73\xa2\x86\x7c\xf8\x92\xe2\xdb\x9c\xa0\x13\x28\x5f\x1a\x75\xe0\x35\xd5\x61\x88\xbd\x63\xcb\x97\x45\x99\x20\x9c\x79\x91\x0a\x49\x7b\x95\x91\xb5\xda\x79\xd3\xf3\xcd\x9b\xe7\x7a\x58\x35\x79\x35\xc3\x52\x01\x5c\x0e\xab\x92\xea\xa1\x3c\xcb\xa1\x33\xf6\x03\x50\xd8\xf7\x8a\x6a\x5e\x78\xd6\xb7\x18\x86\xfe\xa0\xdf\xef\x23\x54\x98\x91\xd9\x36\xed\xe9\x1f\xca\xce\x8d\x9b\xb3\xa9\x33\xfc\x0f\xf5\x6a\x8e\xda\x95\x0e\x5d\x4e\x0f\x35\x03\x7b\xb5\x47\x6d\xe2\x6d\x5a\x3c\x0f\xe0\xac\x17\x4d\x4f\x57\x02\xa8\xbb\x71\x56\x77\xfd\x1a\x18\x75\x8b\x8a\xeb\x5f\xb8\x0b\x95\xd7\xf2\x05\xa1\x08\xdd\x4a\xda\x99\xe8\x57\x23\xf4\xa5\x31\x24\x1f\x99\x25\x0b\x75\xc6\x34\x84\xdf\xc1\x30\xa5\x30\xa0\xa9\x64\xba\x00\xc3\x1f\xef\x25\x89\x31\xe9\xba\x63\x98\x84\xf3\x84\xbf\xc4\x60\xd4\x09\x29\xba\xb0\xe5\xdb\xc9\x0c\xdf\x5c\xe9\x6b\xfd\xc7\xda\xdd\x77\x6a\x62\x3c\x8c\x3c\x39\xcc\x17\x62\x90\xaf\xeb\x5b\x6f\xb4\xef\xd3\xa8\x1c\xa0\x92\x55\x86\x4d\x4d\xf5\x60\xb2\xd2\xe0\x88\x21\x3b\x15\xa4\x63\x59\x01\xff\xd3\xe2\x19\x43\xc8\x8f\x88\xc7\x1a\x78\xf9\xdf\x01\x0f\xdb\x7d\xf9\x37\x00\x00\xff\xff\xa9\xb3\x90\x4e\x39\x0d\x00\x00")

func makeRulesMkBytes() ([]byte, error) {
	return bindataRead(
		_makeRulesMk,
		"make/rules.mk",
	)
}

func makeRulesMk() (*asset, error) {
	bytes, err := makeRulesMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "make/rules.mk", size: 3385, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Makefile": makefile,
	"etc/build/Dockerfile.build.alpine.tpl": etcBuildDockerfileBuildAlpineTpl,
	"etc/build/Dockerfile.build.debian.tpl": etcBuildDockerfileBuildDebianTpl,
	"etc/run.sh": etcRunSh,
	"make/bootstrap.mk": makeBootstrapMk,
	"make/functions.mk": makeFunctionsMk,
	"make/help.mk": makeHelpMk,
	"make/manifest.mk": makeManifestMk,
	"make/rules.mk": makeRulesMk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"etc": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"Dockerfile.build.alpine.tpl": &bintree{etcBuildDockerfileBuildAlpineTpl, map[string]*bintree{}},
			"Dockerfile.build.debian.tpl": &bintree{etcBuildDockerfileBuildDebianTpl, map[string]*bintree{}},
		}},
		"run.sh": &bintree{etcRunSh, map[string]*bintree{}},
	}},
	"make": &bintree{nil, map[string]*bintree{
		"bootstrap.mk": &bintree{makeBootstrapMk, map[string]*bintree{}},
		"functions.mk": &bintree{makeFunctionsMk, map[string]*bintree{}},
		"help.mk": &bintree{makeHelpMk, map[string]*bintree{}},
		"manifest.mk": &bintree{makeManifestMk, map[string]*bintree{}},
		"rules.mk": &bintree{makeRulesMk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


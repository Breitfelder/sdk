// Copyright 2017 Sourced Technologies SL
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy
// of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gopkg.in/bblfsh/sdk.v1/uast/generated.proto

/*
	Package uast is a generated protocol buffer package.

	It is generated from these files:
		gopkg.in/bblfsh/sdk.v1/uast/generated.proto

	It has these top-level messages:
		Node
		Position
*/
package uast

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Role is the main UAST annotation. It indicates that a node in an AST can
// be interpreted as acting with certain language-independent role.
//
// go:generate stringer -type=Role
var Role_name = map[int32]string{
	0:   "INVALID",
	1:   "IDENTIFIER",
	2:   "QUALIFIED",
	3:   "OPERATOR",
	4:   "BINARY",
	5:   "UNARY",
	6:   "LEFT",
	7:   "RIGHT",
	8:   "INFIX",
	9:   "POSTFIX",
	10:  "BITWISE",
	11:  "BOOLEAN",
	12:  "UNSIGNED",
	13:  "LEFT_SHIFT",
	14:  "RIGHT_SHIFT",
	15:  "OR",
	16:  "XOR",
	17:  "AND",
	18:  "EXPRESSION",
	19:  "STATEMENT",
	20:  "EQUAL",
	21:  "NOT",
	22:  "LESS_THAN",
	23:  "LESS_THAN_OR_EQUAL",
	24:  "GREATER_THAN",
	25:  "GREATER_THAN_OR_EQUAL",
	26:  "IDENTICAL",
	27:  "CONTAINS",
	28:  "INCREMENT",
	29:  "DECREMENT",
	30:  "NEGATIVE",
	31:  "POSITIVE",
	32:  "DEREFERENCE",
	33:  "TAKE_ADDRESS",
	34:  "FILE",
	35:  "ADD",
	36:  "SUBSTRACT",
	37:  "MULTIPLY",
	38:  "DIVIDE",
	39:  "MODULO",
	40:  "PACKAGE",
	41:  "DECLARATION",
	42:  "IMPORT",
	43:  "PATHNAME",
	44:  "ALIAS",
	45:  "FUNCTION",
	46:  "BODY",
	47:  "NAME",
	48:  "RECEIVER",
	49:  "ARGUMENT",
	50:  "VALUE",
	51:  "ARGS_LIST",
	52:  "BASE",
	53:  "IMPLEMENTS",
	54:  "INSTANCE",
	55:  "SUBTYPE",
	56:  "SUBPACKAGE",
	57:  "MODULE",
	58:  "FRIEND",
	59:  "WORLD",
	60:  "IF",
	61:  "CONDITION",
	62:  "THEN",
	63:  "ELSE",
	64:  "SWITCH",
	65:  "CASE",
	66:  "DEFAULT",
	67:  "FOR",
	68:  "INITIALIZATION",
	69:  "UPDATE",
	70:  "ITERATOR",
	71:  "WHILE",
	72:  "DO_WHILE",
	73:  "BREAK",
	74:  "CONTINUE",
	75:  "GOTO",
	76:  "BLOCK",
	77:  "SCOPE",
	78:  "RETURN",
	79:  "TRY",
	80:  "CATCH",
	81:  "FINALLY",
	82:  "THROW",
	83:  "ASSERT",
	84:  "CALL",
	85:  "CALLEE",
	86:  "POSITIONAL",
	87:  "NOOP",
	88:  "LITERAL",
	89:  "BYTE",
	90:  "BYTE_STRING",
	91:  "CHARACTER",
	92:  "LIST",
	93:  "MAP",
	94:  "NULL",
	95:  "NUMBER",
	96:  "REGEXP",
	97:  "SET",
	98:  "STRING",
	99:  "TUPLE",
	100: "TYPE",
	101: "ENTRY",
	102: "KEY",
	103: "PRIMITIVE",
	104: "ASSIGNMENT",
	105: "THIS",
	106: "COMMENT",
	107: "DOCUMENTATION",
	108: "WHITESPACE",
	109: "INCOMPLETE",
	110: "UNANNOTATED",
}
var Role_value = map[string]int32{
	"INVALID":               0,
	"IDENTIFIER":            1,
	"QUALIFIED":             2,
	"OPERATOR":              3,
	"BINARY":                4,
	"UNARY":                 5,
	"LEFT":                  6,
	"RIGHT":                 7,
	"INFIX":                 8,
	"POSTFIX":               9,
	"BITWISE":               10,
	"BOOLEAN":               11,
	"UNSIGNED":              12,
	"LEFT_SHIFT":            13,
	"RIGHT_SHIFT":           14,
	"OR":                    15,
	"XOR":                   16,
	"AND":                   17,
	"EXPRESSION":            18,
	"STATEMENT":             19,
	"EQUAL":                 20,
	"NOT":                   21,
	"LESS_THAN":             22,
	"LESS_THAN_OR_EQUAL":    23,
	"GREATER_THAN":          24,
	"GREATER_THAN_OR_EQUAL": 25,
	"IDENTICAL":             26,
	"CONTAINS":              27,
	"INCREMENT":             28,
	"DECREMENT":             29,
	"NEGATIVE":              30,
	"POSITIVE":              31,
	"DEREFERENCE":           32,
	"TAKE_ADDRESS":          33,
	"FILE":                  34,
	"ADD":                   35,
	"SUBSTRACT":             36,
	"MULTIPLY":              37,
	"DIVIDE":                38,
	"MODULO":                39,
	"PACKAGE":               40,
	"DECLARATION":           41,
	"IMPORT":                42,
	"PATHNAME":              43,
	"ALIAS":                 44,
	"FUNCTION":              45,
	"BODY":                  46,
	"NAME":                  47,
	"RECEIVER":              48,
	"ARGUMENT":              49,
	"VALUE":                 50,
	"ARGS_LIST":             51,
	"BASE":                  52,
	"IMPLEMENTS":            53,
	"INSTANCE":              54,
	"SUBTYPE":               55,
	"SUBPACKAGE":            56,
	"MODULE":                57,
	"FRIEND":                58,
	"WORLD":                 59,
	"IF":                    60,
	"CONDITION":             61,
	"THEN":                  62,
	"ELSE":                  63,
	"SWITCH":                64,
	"CASE":                  65,
	"DEFAULT":               66,
	"FOR":                   67,
	"INITIALIZATION":        68,
	"UPDATE":                69,
	"ITERATOR":              70,
	"WHILE":                 71,
	"DO_WHILE":              72,
	"BREAK":                 73,
	"CONTINUE":              74,
	"GOTO":                  75,
	"BLOCK":                 76,
	"SCOPE":                 77,
	"RETURN":                78,
	"TRY":                   79,
	"CATCH":                 80,
	"FINALLY":               81,
	"THROW":                 82,
	"ASSERT":                83,
	"CALL":                  84,
	"CALLEE":                85,
	"POSITIONAL":            86,
	"NOOP":                  87,
	"LITERAL":               88,
	"BYTE":                  89,
	"BYTE_STRING":           90,
	"CHARACTER":             91,
	"LIST":                  92,
	"MAP":                   93,
	"NULL":                  94,
	"NUMBER":                95,
	"REGEXP":                96,
	"SET":                   97,
	"STRING":                98,
	"TUPLE":                 99,
	"TYPE":                  100,
	"ENTRY":                 101,
	"KEY":                   102,
	"PRIMITIVE":             103,
	"ASSIGNMENT":            104,
	"THIS":                  105,
	"COMMENT":               106,
	"DOCUMENTATION":         107,
	"WHITESPACE":            108,
	"INCOMPLETE":            109,
	"UNANNOTATED":           110,
}

func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{0} }

func (m *Node) Reset()                    { *m = Node{} }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{0} }

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{1} }

func init() {
	proto.RegisterType((*Node)(nil), "gopkg.in.bblfsh.sdk.v1.uast.Node")
	proto.RegisterType((*Position)(nil), "gopkg.in.bblfsh.sdk.v1.uast.Position")
	proto.RegisterEnum("gopkg.in.bblfsh.sdk.v1.uast.Role", Role_name, Role_value)
}
func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InternalType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.InternalType)))
		i += copy(dAtA[i:], m.InternalType)
	}
	if len(m.Properties) > 0 {
		for k, _ := range m.Properties {
			dAtA[i] = 0x12
			i++
			v := m.Properties[k]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Children) > 0 {
		for _, msg := range m.Children {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.StartPosition != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.StartPosition.ProtoSize()))
		n1, err := m.StartPosition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.EndPosition != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.EndPosition.ProtoSize()))
		n2, err := m.EndPosition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Roles) > 0 {
		dAtA4 := make([]byte, len(m.Roles)*10)
		var j3 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Offset))
	}
	if m.Line != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Line))
	}
	if m.Col != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Col))
	}
	return i, nil
}

func encodeFixed64Generated(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Generated(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Node) ProtoSize() (n int) {
	var l int
	_ = l
	l = len(m.InternalType)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.ProtoSize()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StartPosition != nil {
		l = m.StartPosition.ProtoSize()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EndPosition != nil {
		l = m.EndPosition.ProtoSize()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovGenerated(uint64(e))
		}
		n += 1 + sovGenerated(uint64(l)) + l
	}
	return n
}

func (m *Position) ProtoSize() (n int) {
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovGenerated(uint64(m.Offset))
	}
	if m.Line != 0 {
		n += 1 + sovGenerated(uint64(m.Line))
	}
	if m.Col != 0 {
		n += 1 + sovGenerated(uint64(m.Col))
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &Node{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartPosition == nil {
				m.StartPosition = &Position{}
			}
			if err := m.StartPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndPosition == nil {
				m.EndPosition = &Position{}
			}
			if err := m.EndPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v Role
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Role(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenerated
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Role
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Role(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			m.Line = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Line |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			m.Col = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Col |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gopkg.in/bblfsh/sdk.v1/uast/generated.proto", fileDescriptorGenerated)
}

var fileDescriptorGenerated = []byte{
	// 2081 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xdb, 0x92, 0xdb, 0xc6,
	0x11, 0xdd, 0xfb, 0x65, 0xf6, 0xa2, 0x31, 0x6c, 0x2b, 0x34, 0x2d, 0x53, 0xb4, 0x7c, 0x89, 0x62,
	0xc5, 0xbb, 0x91, 0x9c, 0xc4, 0x8e, 0x12, 0x25, 0x19, 0x02, 0x43, 0x72, 0xb2, 0x20, 0x00, 0x0d,
	0x06, 0x7b, 0x51, 0x2e, 0x1b, 0x2c, 0x31, 0x24, 0x91, 0xc5, 0x02, 0x0c, 0x00, 0xae, 0xb4, 0xf9,
	0x02, 0x15, 0xbf, 0xc0, 0x2f, 0xac, 0x52, 0x2a, 0x7e, 0xc8, 0x57, 0xa4, 0xf2, 0x98, 0xc7, 0x7c,
	0x42, 0x4a, 0xfe, 0x81, 0xe4, 0x0f, 0x52, 0x33, 0x0d, 0xae, 0x54, 0x79, 0xb0, 0x2b, 0x6f, 0x44,
	0x77, 0xcf, 0x99, 0xee, 0x3e, 0xdd, 0x3d, 0x4d, 0x74, 0x6f, 0x98, 0x8d, 0xcf, 0x87, 0x7b, 0x71,
	0xba, 0x7f, 0x76, 0x96, 0x0c, 0x8a, 0xd1, 0x7e, 0x11, 0x9d, 0xef, 0x5d, 0xde, 0xdf, 0x9f, 0x84,
	0x45, 0xb9, 0x3f, 0x94, 0xa9, 0xcc, 0xc3, 0x52, 0x46, 0x7b, 0xe3, 0x3c, 0x2b, 0x33, 0xe3, 0xdd,
	0xb9, 0xf1, 0x1e, 0x18, 0xef, 0x81, 0xf1, 0x9e, 0x32, 0xae, 0x7f, 0x3a, 0x8c, 0xcb, 0xd1, 0xe4,
	0x6c, 0xaf, 0x9f, 0x5d, 0xec, 0x0f, 0xb3, 0x61, 0xb6, 0xaf, 0xcf, 0x9c, 0x4d, 0x06, 0xfa, 0x4b,
	0x7f, 0xe8, 0x5f, 0x80, 0x75, 0xe7, 0x3f, 0xcb, 0x68, 0xc5, 0xc9, 0x22, 0x69, 0x7c, 0x80, 0x76,
	0xe2, 0xb4, 0x94, 0x79, 0x1a, 0x26, 0xa7, 0xe5, 0xd5, 0x58, 0xd6, 0x16, 0x9b, 0x8b, 0x77, 0x37,
	0xf9, 0xf6, 0x5c, 0x28, 0xae, 0xc6, 0xd2, 0x78, 0x8c, 0xd0, 0x38, 0xcf, 0xc6, 0x32, 0x2f, 0x63,
	0x59, 0xd4, 0x96, 0x9a, 0xcb, 0x77, 0xb7, 0x1e, 0xdc, 0xdf, 0xfb, 0x06, 0x77, 0xf6, 0x14, 0xf6,
	0x9e, 0x77, 0x7d, 0x86, 0xa6, 0x65, 0x7e, 0xc5, 0x5f, 0x03, 0x31, 0x1e, 0xa1, 0x8d, 0xfe, 0x28,
	0x4e, 0xa2, 0x5c, 0xa6, 0xb5, 0x65, 0x0d, 0xf8, 0xfe, 0xb7, 0x02, 0xf2, 0xeb, 0x23, 0xc6, 0x5b,
	0x68, 0xb5, 0xcc, 0xce, 0x65, 0x5a, 0x5b, 0xd1, 0xee, 0xc2, 0x87, 0x61, 0xa3, 0xdd, 0xa2, 0x0c,
	0xf3, 0xf2, 0x74, 0x9c, 0x15, 0x71, 0x19, 0x67, 0x69, 0x6d, 0xb5, 0xb9, 0x78, 0x77, 0xeb, 0xc1,
	0x47, 0xdf, 0x08, 0xed, 0x55, 0xc6, 0x7c, 0x47, 0x1f, 0x9e, 0x7f, 0x1a, 0x5d, 0xb4, 0x2d, 0xd3,
	0xe8, 0x15, 0xd6, 0xda, 0xff, 0x83, 0xb5, 0x25, 0xd3, 0xe8, 0x1a, 0xe9, 0x73, 0xb4, 0x9a, 0x67,
	0x89, 0x2c, 0x6a, 0xeb, 0xcd, 0xe5, 0xbb, 0xbb, 0xdf, 0x12, 0x29, 0xcf, 0x12, 0xc9, 0xc1, 0xbe,
	0xfe, 0x08, 0xdd, 0xf8, 0x9f, 0x24, 0x1a, 0x18, 0x2d, 0x9f, 0xcb, 0xab, 0x8a, 0x26, 0xf5, 0x53,
	0xe5, 0xe2, 0x32, 0x4c, 0x26, 0xb2, 0xb6, 0x04, 0xb9, 0xd0, 0x1f, 0x0f, 0x97, 0xbe, 0x58, 0x7c,
	0xb8, 0xfd, 0xfc, 0xc5, 0xed, 0x85, 0x2f, 0x5f, 0xdc, 0x5e, 0xf8, 0xf7, 0x9f, 0x6f, 0x2f, 0xdc,
	0xe1, 0x68, 0xe3, 0xda, 0xa3, 0x9b, 0x68, 0x2d, 0x1b, 0x0c, 0x0a, 0x59, 0x6a, 0xa0, 0x1d, 0x5e,
	0x7d, 0x19, 0x06, 0x5a, 0x49, 0xe2, 0x14, 0xa0, 0x76, 0xb8, 0xfe, 0xad, 0x6e, 0xec, 0x67, 0x49,
	0x6d, 0x59, 0x8b, 0xd4, 0xcf, 0x87, 0x1b, 0xcf, 0x2b, 0xcc, 0x4f, 0xfe, 0x76, 0x13, 0xad, 0x28,
	0x87, 0x8d, 0x1a, 0x5a, 0x67, 0xce, 0x21, 0xb1, 0x99, 0x85, 0x17, 0xea, 0x5b, 0xd3, 0x59, 0x73,
	0x9d, 0xa5, 0x97, 0x61, 0x12, 0x47, 0x46, 0x03, 0x21, 0x66, 0x51, 0x47, 0xb0, 0x36, 0xa3, 0x1c,
	0x2f, 0xd6, 0x77, 0xa7, 0xb3, 0x26, 0x62, 0x91, 0x4c, 0xcb, 0x78, 0x10, 0xcb, 0xdc, 0xb8, 0x85,
	0x36, 0x1f, 0x07, 0xc4, 0x56, 0x6a, 0x0b, 0x2f, 0xd5, 0x77, 0xa6, 0xb3, 0xe6, 0xe6, 0xe3, 0x49,
	0x98, 0x28, 0x6d, 0x64, 0xd4, 0xd1, 0x86, 0xeb, 0x51, 0x4e, 0x84, 0xcb, 0xf1, 0x72, 0x7d, 0x7b,
	0x3a, 0x6b, 0x6e, 0xb8, 0x63, 0xd5, 0x16, 0x59, 0xae, 0x82, 0x68, 0x31, 0x87, 0xf0, 0x13, 0xbc,
	0x52, 0x47, 0xd3, 0x59, 0x73, 0xad, 0x15, 0xa7, 0x61, 0xae, 0x13, 0x12, 0x68, 0xf1, 0x6a, 0x7d,
	0x73, 0x3a, 0x6b, 0xae, 0x06, 0x5a, 0x6a, 0xa0, 0x15, 0x9b, 0xb6, 0x05, 0x5e, 0xab, 0x6f, 0x4c,
	0x67, 0xcd, 0x15, 0x5b, 0x0e, 0x4a, 0x65, 0xc9, 0x59, 0xa7, 0x2b, 0xf0, 0x3a, 0x58, 0xf2, 0x78,
	0x38, 0xd2, 0x52, 0xe6, 0xb4, 0xd9, 0x31, 0xde, 0x00, 0x29, 0x4b, 0x07, 0xf1, 0x33, 0x15, 0xa1,
	0xe7, 0xfa, 0x42, 0xc9, 0x37, 0x21, 0x42, 0x2f, 0x2b, 0xca, 0x4a, 0xd3, 0x62, 0xe2, 0x88, 0xf9,
	0x14, 0x23, 0xd0, 0xb4, 0xe2, 0xf2, 0x69, 0x5c, 0xe8, 0xac, 0xb4, 0x5c, 0xd7, 0xa6, 0xc4, 0xc1,
	0x5b, 0x95, 0x26, 0xcb, 0x12, 0x19, 0xa6, 0x2a, 0xae, 0xc0, 0xf1, 0x59, 0xc7, 0xa1, 0x16, 0xde,
	0x86, 0xb8, 0x82, 0xb4, 0x88, 0x87, 0xa9, 0x8c, 0x8c, 0xf7, 0x10, 0x52, 0x9e, 0x9e, 0xfa, 0x5d,
	0xd6, 0x16, 0x78, 0x07, 0x52, 0xa2, 0xfc, 0xf5, 0x47, 0xf1, 0xa0, 0x34, 0x6e, 0xa3, 0x2d, 0xed,
	0x74, 0xa5, 0xdf, 0x85, 0x8c, 0x6a, 0xd7, 0xc1, 0x60, 0x17, 0x2d, 0xb9, 0x1c, 0xdf, 0xa8, 0xaf,
	0x4d, 0x67, 0xcd, 0x25, 0x37, 0x57, 0x04, 0x1e, 0xbb, 0x1c, 0xe3, 0xfa, 0xfa, 0x74, 0xd6, 0x5c,
	0x3e, 0xce, 0xb4, 0x84, 0x38, 0x16, 0x7e, 0x03, 0x24, 0x24, 0xd5, 0x2c, 0xd1, 0x63, 0x8f, 0x53,
	0xdf, 0x67, 0xae, 0x83, 0x0d, 0xc0, 0xa4, 0xcf, 0xc6, 0xb9, 0x2c, 0x0a, 0x55, 0x30, 0xb7, 0xd0,
	0xa6, 0x2f, 0x88, 0xa0, 0x3d, 0xea, 0x08, 0xfc, 0x26, 0xb8, 0xe4, 0x97, 0x61, 0x29, 0x2f, 0x64,
	0xaa, 0x33, 0x46, 0x15, 0x89, 0xf8, 0x2d, 0xc8, 0x18, 0xfd, 0xe3, 0x24, 0x4c, 0xd4, 0x2d, 0x8e,
	0x2b, 0xf0, 0xdb, 0x70, 0x8b, 0x93, 0x95, 0xc6, 0xbb, 0x68, 0xd3, 0xa6, 0xbe, 0x7f, 0x2a, 0xba,
	0xc4, 0xc1, 0x37, 0x21, 0x6c, 0x5b, 0x16, 0x85, 0x18, 0x85, 0xa9, 0x71, 0x0f, 0x19, 0xd7, 0xca,
	0x53, 0x97, 0x9f, 0x02, 0xe2, 0x77, 0xea, 0x6f, 0x4e, 0x67, 0xcd, 0x1b, 0x73, 0x2b, 0x37, 0x07,
	0xec, 0xf7, 0xd1, 0x76, 0x87, 0x53, 0x22, 0x28, 0x07, 0xb0, 0x5a, 0xfd, 0xc6, 0x74, 0xd6, 0xdc,
	0xea, 0xe4, 0x32, 0x2c, 0x65, 0xae, 0xf1, 0xee, 0xa3, 0xb7, 0x5f, 0x37, 0x79, 0x05, 0xf9, 0x4e,
	0xfd, 0xe6, 0x74, 0xd6, 0x34, 0x5e, 0xb3, 0x9d, 0xa3, 0xde, 0x42, 0x9b, 0x50, 0xab, 0x26, 0xb1,
	0x71, 0x1d, 0xa2, 0x84, 0x52, 0xed, 0x87, 0x89, 0xe2, 0xcc, 0x74, 0x1d, 0x41, 0x98, 0xe3, 0xe3,
	0x77, 0xc1, 0x79, 0x33, 0x4b, 0xcb, 0x30, 0x4e, 0x0b, 0x7d, 0xd2, 0x31, 0x39, 0xe4, 0xe7, 0x56,
	0x75, 0x32, 0xed, 0xe7, 0x90, 0x9f, 0x5b, 0x68, 0xd3, 0xa2, 0x73, 0xed, 0x7b, 0xa0, 0xb5, 0xe4,
	0x5c, 0x5b, 0x47, 0x1b, 0x0e, 0xed, 0x10, 0xc1, 0x0e, 0x29, 0x6e, 0x00, 0xae, 0x23, 0x87, 0x61,
	0x19, 0x5f, 0x4a, 0xa5, 0xf3, 0x5c, 0x9f, 0x69, 0xdd, 0x6d, 0xd0, 0x41, 0x13, 0x5f, 0x4a, 0xa3,
	0x89, 0xb6, 0x2c, 0xca, 0x69, 0x9b, 0x72, 0xea, 0x98, 0x14, 0x37, 0x21, 0x05, 0x96, 0xcc, 0xe5,
	0x40, 0xe6, 0x32, 0xed, 0x4b, 0x95, 0x25, 0x41, 0x0e, 0xe8, 0x29, 0xb1, 0x2c, 0x45, 0x2d, 0x7e,
	0x1f, 0x4c, 0x44, 0x78, 0x2e, 0x49, 0x14, 0x29, 0x6e, 0x55, 0x5b, 0xb4, 0x99, 0x4d, 0xf1, 0x1d,
	0x68, 0x8b, 0x76, 0x9c, 0xe8, 0x8e, 0x27, 0x96, 0x85, 0x3f, 0xa8, 0xca, 0x23, 0x8a, 0x34, 0xfd,
	0x41, 0xcb, 0x17, 0x9c, 0x98, 0x02, 0x7f, 0x58, 0xd1, 0x3f, 0x39, 0x2b, 0xca, 0x3c, 0xec, 0xeb,
	0x00, 0x7a, 0x81, 0x2d, 0x98, 0x67, 0x9f, 0xe0, 0x8f, 0xc0, 0xc9, 0xde, 0x24, 0x29, 0xe3, 0x71,
	0x72, 0xa5, 0x9a, 0xd4, 0x62, 0x87, 0xcc, 0xa2, 0xf8, 0x63, 0x68, 0x52, 0x2b, 0xbe, 0x8c, 0x23,
	0xa9, 0xe4, 0x3d, 0xd7, 0x0a, 0x6c, 0x17, 0x7f, 0x17, 0xe4, 0xbd, 0x2c, 0x9a, 0x24, 0x99, 0x6e,
	0x33, 0x62, 0x1e, 0x90, 0x0e, 0xc5, 0x77, 0xab, 0x36, 0x0b, 0xfb, 0xe7, 0xe1, 0xb0, 0x0a, 0xd7,
	0xb4, 0x09, 0x27, 0x42, 0xd5, 0xe8, 0xf7, 0xe6, 0xe1, 0xf6, 0x93, 0x30, 0x0f, 0xe7, 0x53, 0x8d,
	0xf5, 0x3c, 0x97, 0x0b, 0xfc, 0x09, 0x60, 0xb2, 0x8b, 0x71, 0x96, 0x6b, 0xff, 0x3c, 0x22, 0xba,
	0x0e, 0xe9, 0x51, 0x7c, 0xaf, 0x4a, 0x62, 0x58, 0x8e, 0xd2, 0xf0, 0x42, 0xaa, 0xd2, 0x25, 0x36,
	0x23, 0x3e, 0xfe, 0x3e, 0x94, 0x2e, 0x49, 0xe2, 0xb0, 0x50, 0x27, 0xda, 0x81, 0x63, 0xea, 0x8b,
	0x3e, 0x85, 0x13, 0xed, 0x49, 0xda, 0xd7, 0xb7, 0x18, 0x68, 0xa5, 0xe5, 0x5a, 0x27, 0x78, 0x0f,
	0x32, 0xd6, 0xca, 0x22, 0x3d, 0x5c, 0x34, 0xfa, 0x3e, 0xc8, 0x1c, 0x85, 0x5c, 0x47, 0x1b, 0x9c,
	0x9a, 0x94, 0x1d, 0x52, 0x8e, 0x7f, 0x00, 0x18, 0x5c, 0xf6, 0x65, 0x7c, 0x29, 0x73, 0xa5, 0x23,
	0xbc, 0x13, 0xe8, 0x7a, 0xb8, 0x0f, 0x3a, 0x92, 0x0f, 0x27, 0xf3, 0x66, 0x3a, 0x24, 0x76, 0x40,
	0xf1, 0x03, 0xf0, 0xe8, 0x50, 0xcd, 0x73, 0xd5, 0x3a, 0x84, 0x77, 0xfc, 0x53, 0x9b, 0xf9, 0x02,
	0x7f, 0x76, 0x7d, 0xa4, 0xb0, 0xe3, 0x42, 0x8f, 0xed, 0x16, 0xf1, 0x29, 0xfe, 0x61, 0xe5, 0x52,
	0x58, 0x48, 0x3d, 0x77, 0x7b, 0x9e, 0xad, 0x6b, 0xce, 0xc7, 0x3f, 0xaa, 0xe6, 0xee, 0xc5, 0x38,
	0xd1, 0x45, 0xa7, 0x43, 0x64, 0x8e, 0x2f, 0x88, 0x2a, 0x9d, 0x1f, 0x03, 0x1e, 0x4b, 0x8b, 0x32,
	0x54, 0x75, 0x53, 0x43, 0xeb, 0x7e, 0xd0, 0x12, 0x27, 0x1e, 0xc5, 0x9f, 0x03, 0x09, 0xfe, 0xe4,
	0x4c, 0xad, 0x07, 0x0a, 0xd5, 0x0f, 0x5a, 0x73, 0x86, 0xbe, 0x00, 0x54, 0x7f, 0x72, 0x36, 0xae,
	0x48, 0x9a, 0xd3, 0x4a, 0xf1, 0x4f, 0x5e, 0xa3, 0x55, 0xcb, 0xdb, 0x9c, 0x51, 0xc7, 0xc2, 0x0f,
	0x41, 0xde, 0xce, 0x63, 0x99, 0x46, 0x2a, 0xd8, 0x23, 0x97, 0xdb, 0x16, 0xfe, 0x29, 0x04, 0x7b,
	0x94, 0xe5, 0x49, 0xa4, 0x26, 0x18, 0x6b, 0xe3, 0x9f, 0xc1, 0x04, 0x63, 0x03, 0x55, 0x7e, 0xa6,
	0xeb, 0x58, 0x4c, 0xf3, 0xf1, 0x08, 0xca, 0xcf, 0xcc, 0xd2, 0x28, 0x9e, 0x13, 0x22, 0xba, 0xd4,
	0xc1, 0x3f, 0x87, 0xe8, 0xc5, 0x48, 0x6a, 0x19, 0xb5, 0x7d, 0x8a, 0x7f, 0x01, 0x32, 0x9a, 0x14,
	0xda, 0x07, 0xff, 0x88, 0x09, 0xb3, 0x8b, 0x7f, 0x09, 0x3e, 0xf8, 0x4f, 0xe3, 0xb2, 0x3f, 0x52,
	0xb6, 0xa6, 0xca, 0x1e, 0x01, 0x5b, 0x33, 0x84, 0xc9, 0x6d, 0xd1, 0x36, 0x09, 0x6c, 0x81, 0x5b,
	0x90, 0x01, 0x4b, 0x0e, 0xc2, 0x49, 0x52, 0xaa, 0xe6, 0x68, 0xbb, 0x1c, 0x9b, 0xd0, 0x1c, 0xed,
	0x2c, 0x37, 0x3e, 0x46, 0xbb, 0xcc, 0x61, 0x82, 0x11, 0x9b, 0x3d, 0x81, 0xda, 0xb4, 0xea, 0xc6,
	0x74, 0xd6, 0xdc, 0x65, 0x69, 0x5c, 0xc6, 0x61, 0x12, 0xff, 0xe9, 0xba, 0x3c, 0x03, 0xcf, 0x22,
	0x82, 0x62, 0x0a, 0xf7, 0x07, 0xe3, 0x28, 0x2c, 0x75, 0xa1, 0x30, 0x51, 0xbd, 0x71, 0xed, 0x8a,
	0x89, 0xb2, 0x7a, 0xe3, 0x54, 0x7e, 0xba, 0xaa, 0x3f, 0x3b, 0x55, 0x7e, 0x46, 0xaa, 0x41, 0xdf,
	0x41, 0x1b, 0x96, 0x7b, 0x0a, 0x8a, 0x6e, 0xe5, 0x5e, 0x06, 0xaa, 0xb7, 0xd0, 0x6a, 0x8b, 0x53,
	0x72, 0x80, 0x19, 0x1c, 0x68, 0xe5, 0x32, 0x3c, 0x9f, 0x8f, 0x2e, 0xe6, 0x04, 0x14, 0xff, 0xea,
	0xd5, 0xe8, 0x8a, 0xd3, 0x89, 0x54, 0xe1, 0x77, 0x5c, 0xe1, 0xe2, 0x03, 0x08, 0xbf, 0xa3, 0x76,
	0x4d, 0x85, 0x62, 0xbb, 0xe6, 0x01, 0xb6, 0x2b, 0x94, 0x24, 0xeb, 0x9f, 0x2b, 0xa9, 0x6f, 0xba,
	0x1e, 0xc5, 0x3d, 0x90, 0xfa, 0xfd, 0x6c, 0xac, 0xd3, 0xca, 0xa9, 0x08, 0xb8, 0x83, 0x1d, 0x08,
	0x8b, 0xcb, 0x72, 0x92, 0xa7, 0x2a, 0x51, 0x82, 0x9f, 0x60, 0x17, 0x12, 0x25, 0xe0, 0x61, 0x36,
	0x89, 0xca, 0xbf, 0x07, 0xe7, 0xcd, 0x50, 0xa5, 0xbf, 0x86, 0xd6, 0xdb, 0xcc, 0x21, 0xb6, 0x7d,
	0x82, 0x1f, 0x43, 0x2c, 0xed, 0x38, 0x0d, 0x93, 0x44, 0xdb, 0x8b, 0x2e, 0x77, 0x8f, 0x30, 0x07,
	0x7b, 0x31, 0xca, 0xb3, 0xa7, 0xea, 0x3e, 0xe2, 0xfb, 0x94, 0x0b, 0xec, 0xc3, 0x7d, 0xa4, 0x28,
	0x64, 0x5e, 0x02, 0x8d, 0xb6, 0x8d, 0xc5, 0x9c, 0xc6, 0x24, 0x51, 0xb6, 0x4a, 0x46, 0x29, 0x0e,
	0xc0, 0x56, 0x49, 0xa5, 0x2e, 0x63, 0x18, 0xab, 0xae, 0x43, 0x6c, 0x7c, 0x08, 0x65, 0x3c, 0xdf,
	0x8e, 0xc2, 0x44, 0xf7, 0xb3, 0xeb, 0x7a, 0xf8, 0xa8, 0xea, 0xe7, 0x2c, 0x1b, 0x2b, 0x3f, 0x6d,
	0xcd, 0x93, 0x8d, 0x8f, 0xc1, 0x4f, 0x3b, 0x56, 0x34, 0x69, 0xeb, 0xd6, 0x89, 0xa0, 0xf8, 0xa4,
	0x6a, 0xbf, 0xab, 0x52, 0xaa, 0x57, 0x5a, 0xc9, 0x4e, 0x7d, 0xc1, 0x99, 0xd3, 0xc1, 0x4f, 0xe0,
	0x0a, 0xa5, 0xf2, 0xcb, 0x3c, 0x4e, 0x87, 0xba, 0xa6, 0xbb, 0x44, 0x0d, 0x54, 0xca, 0xf1, 0xaf,
	0xab, 0x9a, 0x1e, 0x85, 0x6a, 0xa0, 0xca, 0x5c, 0x6f, 0x2b, 0xaa, 0xd3, 0x7f, 0x53, 0x6d, 0x2b,
	0xaa, 0xcb, 0x31, 0x5a, 0xee, 0x11, 0x0f, 0xff, 0x16, 0x12, 0xda, 0x0b, 0xc7, 0xda, 0xcd, 0xc0,
	0xb6, 0xf1, 0xef, 0x2a, 0x37, 0x27, 0x10, 0xb2, 0x13, 0xf4, 0x5a, 0x94, 0xe3, 0x53, 0x08, 0xd9,
	0x99, 0x5c, 0x9c, 0xc9, 0x1c, 0x68, 0xea, 0xd0, 0x63, 0x0f, 0xff, 0x7e, 0x4e, 0xd3, 0x50, 0x3e,
	0x1b, 0x2b, 0x54, 0x9f, 0x0a, 0x1c, 0x02, 0xaa, 0x2f, 0x4b, 0xdd, 0x27, 0xe0, 0xf5, 0x59, 0xd5,
	0x27, 0xe0, 0xb1, 0xa2, 0x23, 0xf0, 0x6c, 0x8a, 0xfb, 0x15, 0x1d, 0x93, 0x71, 0xa2, 0xcb, 0x47,
	0x0f, 0x8a, 0xa8, 0xea, 0x3e, 0x35, 0x25, 0xd4, 0x3e, 0xe0, 0x28, 0xf2, 0x65, 0xb5, 0x0f, 0xcc,
	0x57, 0xd7, 0x03, 0x7a, 0x82, 0x07, 0x70, 0xd3, 0x81, 0xbc, 0x52, 0x39, 0xf0, 0x38, 0xeb, 0xc1,
	0xf3, 0x36, 0x84, 0x1c, 0x78, 0x79, 0x7c, 0x01, 0xef, 0x5b, 0x03, 0x21, 0xe2, 0xab, 0x1d, 0x49,
	0x8f, 0xc9, 0x11, 0x64, 0x90, 0x14, 0x6a, 0x4b, 0xd2, 0x83, 0x52, 0xf7, 0x3d, 0xf3, 0x71, 0x3c,
	0xef, 0xfb, 0xb8, 0x50, 0x24, 0x99, 0x6e, 0x4f, 0x1f, 0xf8, 0x03, 0x90, 0x64, 0x66, 0x17, 0xda,
	0xfa, 0x43, 0xb4, 0x63, 0xb9, 0xa6, 0x1e, 0xb9, 0xd0, 0xa4, 0xe7, 0xf5, 0x37, 0xa6, 0xb3, 0xe6,
	0x8e, 0x95, 0xf5, 0xf5, 0xdc, 0x85, 0x1e, 0x6d, 0x20, 0x74, 0xd4, 0x65, 0x82, 0xfa, 0x1e, 0x31,
	0x29, 0x4e, 0xe0, 0xce, 0xa3, 0x51, 0x5c, 0xca, 0x62, 0x1c, 0xf6, 0x61, 0xaa, 0x3a, 0xa6, 0xab,
	0x06, 0xab, 0xa0, 0xf8, 0xa2, 0x9a, 0xaa, 0x69, 0x3f, 0x53, 0x83, 0xb5, 0xd4, 0x8f, 0x54, 0xe0,
	0x10, 0xc7, 0x71, 0xd5, 0xb2, 0x64, 0xe1, 0x14, 0x1e, 0xa9, 0x20, 0x0d, 0xd3, 0x34, 0x53, 0xeb,
	0x52, 0x54, 0xdf, 0x7e, 0xfe, 0x97, 0xc6, 0xc2, 0x5f, 0xbf, 0x6a, 0x2c, 0xfc, 0xfd, 0xab, 0xc6,
	0x42, 0xab, 0xfe, 0x8f, 0x97, 0x8d, 0xc5, 0x7f, 0xbe, 0x6c, 0x2c, 0xfe, 0xeb, 0x65, 0x63, 0xe1,
	0xcb, 0xaf, 0x1b, 0x0b, 0x2f, 0xbe, 0x6e, 0x2c, 0x3e, 0x59, 0x51, 0xff, 0x04, 0xce, 0xd6, 0xf4,
	0x7f, 0xb5, 0xcf, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x48, 0x4f, 0xb1, 0x26, 0x0e, 0x00,
	0x00,
}

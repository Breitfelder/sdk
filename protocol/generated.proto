// Copyright 2017 Sourced Technologies SL
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy
// of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

syntax = "proto3";
package gopkg.in.bblfsh.sdk.v0.protocol;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "gopkg.in/bblfsh/sdk.v0/uast/generated.proto";

option (gogoproto.protosizer_all) = true;
option (gogoproto.sizer_all) = false;
option go_package = "protocol";

// ParseRequest is a request to parse a file and get its UAST.
message ParseRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string filename = 1;
	string language = 2;
	string content = 3;
	gopkg.in.bblfsh.sdk.v0.protocol.Encoding encoding = 4;
}

// ParseResponse is the reply to ParseRequest.
message ParseResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	gopkg.in.bblfsh.sdk.v0.protocol.Status status = 1;
	repeated string errors = 2;
	gopkg.in.bblfsh.sdk.v0.uast.Node uast = 3 [(gogoproto.customname) = "UAST"];
}

// VersionRequest is a request to get server version
message VersionRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
}

// VersionResponse is the reply to VersionRequest
message VersionResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string version = 1;
}

// Status is the status of a response.
enum Status {
	option (gogoproto.enumdecl) = false;
	option (gogoproto.goproto_enum_prefix) = false;
	option (gogoproto.goproto_enum_stringer) = false;
	// Ok status code.
	OK = 0 [(gogoproto.enumvalue_customname) = "Ok"];
	// Error status code. It is replied when the driver has got the AST with errors.
	ERROR = 1 [(gogoproto.enumvalue_customname) = "Error"];
	// Fatal status code. It is replied when the driver hasn't could get the AST.
	FATAL = 2 [(gogoproto.enumvalue_customname) = "Fatal"];
}

// Encoding is the encoding used for the content string. Currently only
// UTF-8 or Base64 encodings are supported. You should use UTF-8 if you can
// and Base64 as a fallback.
enum Encoding {
	option (gogoproto.enumdecl) = false;
	option (gogoproto.goproto_enum_prefix) = false;
	option (gogoproto.goproto_enum_stringer) = false;
	// UTF8 encoding
	UTF8 = 0 [(gogoproto.enumvalue_customname) = "UTF8"];
	// Base64 encoding
	BASE64 = 1 [(gogoproto.enumvalue_customname) = "Base64"];
}

service ProtocolService {
	// Parse uses DefaultParser to process the given parsing request to get the UAST.
	rpc Parse (gopkg.in.bblfsh.sdk.v0.protocol.ParseRequest) returns (gopkg.in.bblfsh.sdk.v0.protocol.ParseResponse);
	// Version uses DefaultVersioner to process the given version request to get the version.
	rpc Version (gopkg.in.bblfsh.sdk.v0.protocol.VersionRequest) returns (gopkg.in.bblfsh.sdk.v0.protocol.VersionResponse);
}

